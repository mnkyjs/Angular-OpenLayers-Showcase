(self.webpackChunkopen_layers_showcase = self.webpackChunkopen_layers_showcase || []).push([
    [590],
    {
        8: (Va, Ha, si) => {
            'use strict';
            let Ue = null,
                Hn = !1,
                ai = 1;
            const Tn = Symbol('SIGNAL');
            function Ze(n) {
                const e = Ue;
                return (Ue = n), e;
            }
            const Qr = {
                version: 0,
                lastCleanEpoch: 0,
                dirty: !1,
                producerNode: void 0,
                producerLastReadVersion: void 0,
                producerIndexOfThis: void 0,
                nextProducerIndex: 0,
                liveConsumerNode: void 0,
                liveConsumerIndexOfThis: void 0,
                consumerAllowSignalWrites: !1,
                consumerIsAlwaysLive: !1,
                producerMustRecompute: () => !1,
                producerRecomputeValue: () => {},
                consumerMarkedDirty: () => {},
                consumerOnSignalRead: () => {},
            };
            function li(n) {
                if (Hn) throw new Error('');
                if (null === Ue) return;
                Ue.consumerOnSignalRead(n);
                const e = Ue.nextProducerIndex++;
                Ee(Ue),
                    e < Ue.producerNode.length && Ue.producerNode[e] !== n && Le(Ue) && _e(Ue.producerNode[e], Ue.producerIndexOfThis[e]),
                    Ue.producerNode[e] !== n && ((Ue.producerNode[e] = n), (Ue.producerIndexOfThis[e] = Le(Ue) ? ve(n, Ue, e) : 0)),
                    (Ue.producerLastReadVersion[e] = n.version);
            }
            function w(n) {
                if ((!Le(n) || n.dirty) && (n.dirty || n.lastCleanEpoch !== ai)) {
                    if (!n.producerMustRecompute(n) && !W(n)) return (n.dirty = !1), void (n.lastCleanEpoch = ai);
                    n.producerRecomputeValue(n), (n.dirty = !1), (n.lastCleanEpoch = ai);
                }
            }
            function D(n) {
                if (void 0 === n.liveConsumerNode) return;
                const e = Hn;
                Hn = !0;
                try {
                    for (const t of n.liveConsumerNode) t.dirty || z(t);
                } finally {
                    Hn = e;
                }
            }
            function F() {
                return !1 !== Ue?.consumerAllowSignalWrites;
            }
            function z(n) {
                (n.dirty = !0), D(n), n.consumerMarkedDirty?.(n);
            }
            function W(n) {
                Ee(n);
                for (let e = 0; e < n.producerNode.length; e++) {
                    const t = n.producerNode[e],
                        i = n.producerLastReadVersion[e];
                    if (i !== t.version || (w(t), i !== t.version)) return !0;
                }
                return !1;
            }
            function ve(n, e, t) {
                if ((ot(n), Ee(n), 0 === n.liveConsumerNode.length))
                    for (let i = 0; i < n.producerNode.length; i++) n.producerIndexOfThis[i] = ve(n.producerNode[i], n, i);
                return n.liveConsumerIndexOfThis.push(t), n.liveConsumerNode.push(e) - 1;
            }
            function _e(n, e) {
                if ((ot(n), Ee(n), 1 === n.liveConsumerNode.length))
                    for (let i = 0; i < n.producerNode.length; i++) _e(n.producerNode[i], n.producerIndexOfThis[i]);
                const t = n.liveConsumerNode.length - 1;
                if (
                    ((n.liveConsumerNode[e] = n.liveConsumerNode[t]),
                    (n.liveConsumerIndexOfThis[e] = n.liveConsumerIndexOfThis[t]),
                    n.liveConsumerNode.length--,
                    n.liveConsumerIndexOfThis.length--,
                    e < n.liveConsumerNode.length)
                ) {
                    const i = n.liveConsumerIndexOfThis[e],
                        r = n.liveConsumerNode[e];
                    Ee(r), (r.producerIndexOfThis[i] = e);
                }
            }
            function Le(n) {
                return n.consumerIsAlwaysLive || (n?.liveConsumerNode?.length ?? 0) > 0;
            }
            function Ee(n) {
                (n.producerNode ??= []), (n.producerIndexOfThis ??= []), (n.producerLastReadVersion ??= []);
            }
            function ot(n) {
                (n.liveConsumerNode ??= []), (n.liveConsumerIndexOfThis ??= []);
            }
            let fr = function ts() {
                throw new Error();
            };
            function Jt() {
                fr();
            }
            let Hf = null;
            function Pv(n, e) {
                F() || Jt(),
                    n.equal(n.value, e) ||
                        ((n.value = e),
                        (function hN(n) {
                            n.version++,
                                (function Xc() {
                                    ai++;
                                })(),
                                D(n),
                                Hf?.();
                        })(n));
            }
            const dN = {
                ...Qr,
                equal: function jf(n, e) {
                    return Object.is(n, e);
                },
                value: void 0,
            };
            function Te(n) {
                return 'function' == typeof n;
            }
            function Fv(n) {
                const t = n((i) => {
                    Error.call(i), (i.stack = new Error().stack);
                });
                return (t.prototype = Object.create(Error.prototype)), (t.prototype.constructor = t), t;
            }
            const Uf = Fv(
                (n) =>
                    function (t) {
                        n(this),
                            (this.message = t
                                ? `${t.length} errors occurred during unsubscription:\n${t.map((i, r) => `${r + 1}) ${i.toString()}`).join('\n  ')}`
                                : ''),
                            (this.name = 'UnsubscriptionError'),
                            (this.errors = t);
                    },
            );
            function Kc(n, e) {
                if (n) {
                    const t = n.indexOf(e);
                    0 <= t && n.splice(t, 1);
                }
            }
            class xt {
                constructor(e) {
                    (this.initialTeardown = e), (this.closed = !1), (this._parentage = null), (this._finalizers = null);
                }
                unsubscribe() {
                    let e;
                    if (!this.closed) {
                        this.closed = !0;
                        const { _parentage: t } = this;
                        if (t)
                            if (((this._parentage = null), Array.isArray(t))) for (const o of t) o.remove(this);
                            else t.remove(this);
                        const { initialTeardown: i } = this;
                        if (Te(i))
                            try {
                                i();
                            } catch (o) {
                                e = o instanceof Uf ? o.errors : [o];
                            }
                        const { _finalizers: r } = this;
                        if (r) {
                            this._finalizers = null;
                            for (const o of r)
                                try {
                                    jv(o);
                                } catch (s) {
                                    (e = e ?? []), s instanceof Uf ? (e = [...e, ...s.errors]) : e.push(s);
                                }
                        }
                        if (e) throw new Uf(e);
                    }
                }
                add(e) {
                    var t;
                    if (e && e !== this)
                        if (this.closed) jv(e);
                        else {
                            if (e instanceof xt) {
                                if (e.closed || e._hasParent(this)) return;
                                e._addParent(this);
                            }
                            (this._finalizers = null !== (t = this._finalizers) && void 0 !== t ? t : []).push(e);
                        }
                }
                _hasParent(e) {
                    const { _parentage: t } = this;
                    return t === e || (Array.isArray(t) && t.includes(e));
                }
                _addParent(e) {
                    const { _parentage: t } = this;
                    this._parentage = Array.isArray(t) ? (t.push(e), t) : t ? [t, e] : e;
                }
                _removeParent(e) {
                    const { _parentage: t } = this;
                    t === e ? (this._parentage = null) : Array.isArray(t) && Kc(t, e);
                }
                remove(e) {
                    const { _finalizers: t } = this;
                    t && Kc(t, e), e instanceof xt && e._removeParent(this);
                }
            }
            xt.EMPTY = (() => {
                const n = new xt();
                return (n.closed = !0), n;
            })();
            const Lv = xt.EMPTY;
            function Bv(n) {
                return n instanceof xt || (n && 'closed' in n && Te(n.remove) && Te(n.add) && Te(n.unsubscribe));
            }
            function jv(n) {
                Te(n) ? n() : n.unsubscribe();
            }
            const eo = {
                    onUnhandledError: null,
                    onStoppedNotification: null,
                    Promise: void 0,
                    useDeprecatedSynchronousErrorHandling: !1,
                    useDeprecatedNextContext: !1,
                },
                Zc = {
                    setTimeout(n, e, ...t) {
                        const { delegate: i } = Zc;
                        return i?.setTimeout ? i.setTimeout(n, e, ...t) : setTimeout(n, e, ...t);
                    },
                    clearTimeout(n) {
                        const { delegate: e } = Zc;
                        return (e?.clearTimeout || clearTimeout)(n);
                    },
                    delegate: void 0,
                };
            function Vv(n) {
                Zc.setTimeout(() => {
                    const { onUnhandledError: e } = eo;
                    if (!e) throw n;
                    e(n);
                });
            }
            function zf() {}
            const mN = Gf('C', void 0, void 0);
            function Gf(n, e, t) {
                return { kind: n, value: e, error: t };
            }
            let to = null;
            function Qc(n) {
                if (eo.useDeprecatedSynchronousErrorHandling) {
                    const e = !to;
                    if ((e && (to = { errorThrown: !1, error: null }), n(), e)) {
                        const { errorThrown: t, error: i } = to;
                        if (((to = null), t)) throw i;
                    }
                } else n();
            }
            class Wf extends xt {
                constructor(e) {
                    super(), (this.isStopped = !1), e ? ((this.destination = e), Bv(e) && e.add(this)) : (this.destination = EN);
                }
                static create(e, t, i) {
                    return new Ua(e, t, i);
                }
                next(e) {
                    this.isStopped
                        ? Yf(
                              (function gN(n) {
                                  return Gf('N', n, void 0);
                              })(e),
                              this,
                          )
                        : this._next(e);
                }
                error(e) {
                    this.isStopped
                        ? Yf(
                              (function pN(n) {
                                  return Gf('E', void 0, n);
                              })(e),
                              this,
                          )
                        : ((this.isStopped = !0), this._error(e));
                }
                complete() {
                    this.isStopped ? Yf(mN, this) : ((this.isStopped = !0), this._complete());
                }
                unsubscribe() {
                    this.closed || ((this.isStopped = !0), super.unsubscribe(), (this.destination = null));
                }
                _next(e) {
                    this.destination.next(e);
                }
                _error(e) {
                    try {
                        this.destination.error(e);
                    } finally {
                        this.unsubscribe();
                    }
                }
                _complete() {
                    try {
                        this.destination.complete();
                    } finally {
                        this.unsubscribe();
                    }
                }
            }
            const yN = Function.prototype.bind;
            function $f(n, e) {
                return yN.call(n, e);
            }
            class bN {
                constructor(e) {
                    this.partialObserver = e;
                }
                next(e) {
                    const { partialObserver: t } = this;
                    if (t.next)
                        try {
                            t.next(e);
                        } catch (i) {
                            Jc(i);
                        }
                }
                error(e) {
                    const { partialObserver: t } = this;
                    if (t.error)
                        try {
                            t.error(e);
                        } catch (i) {
                            Jc(i);
                        }
                    else Jc(e);
                }
                complete() {
                    const { partialObserver: e } = this;
                    if (e.complete)
                        try {
                            e.complete();
                        } catch (t) {
                            Jc(t);
                        }
                }
            }
            class Ua extends Wf {
                constructor(e, t, i) {
                    let r;
                    if ((super(), Te(e) || !e)) r = { next: e ?? void 0, error: t ?? void 0, complete: i ?? void 0 };
                    else {
                        let o;
                        this && eo.useDeprecatedNextContext
                            ? ((o = Object.create(e)),
                              (o.unsubscribe = () => this.unsubscribe()),
                              (r = {
                                  next: e.next && $f(e.next, o),
                                  error: e.error && $f(e.error, o),
                                  complete: e.complete && $f(e.complete, o),
                              }))
                            : (r = e);
                    }
                    this.destination = new bN(r);
                }
            }
            function Jc(n) {
                eo.useDeprecatedSynchronousErrorHandling
                    ? (function _N(n) {
                          eo.useDeprecatedSynchronousErrorHandling && to && ((to.errorThrown = !0), (to.error = n));
                      })(n)
                    : Vv(n);
            }
            function Yf(n, e) {
                const { onStoppedNotification: t } = eo;
                t && Zc.setTimeout(() => t(n, e));
            }
            const EN = {
                    closed: !0,
                    next: zf,
                    error: function vN(n) {
                        throw n;
                    },
                    complete: zf,
                },
                qf = ('function' == typeof Symbol && Symbol.observable) || '@@observable';
            function ns(n) {
                return n;
            }
            let ht = (() => {
                class n {
                    constructor(t) {
                        t && (this._subscribe = t);
                    }
                    lift(t) {
                        const i = new n();
                        return (i.source = this), (i.operator = t), i;
                    }
                    subscribe(t, i, r) {
                        const o = (function CN(n) {
                            return (
                                (n && n instanceof Wf) ||
                                ((function wN(n) {
                                    return n && Te(n.next) && Te(n.error) && Te(n.complete);
                                })(n) &&
                                    Bv(n))
                            );
                        })(t)
                            ? t
                            : new Ua(t, i, r);
                        return (
                            Qc(() => {
                                const { operator: s, source: a } = this;
                                o.add(s ? s.call(o, a) : a ? this._subscribe(o) : this._trySubscribe(o));
                            }),
                            o
                        );
                    }
                    _trySubscribe(t) {
                        try {
                            return this._subscribe(t);
                        } catch (i) {
                            t.error(i);
                        }
                    }
                    forEach(t, i) {
                        return new (i = Uv(i))((r, o) => {
                            const s = new Ua({
                                next: (a) => {
                                    try {
                                        t(a);
                                    } catch (l) {
                                        o(l), s.unsubscribe();
                                    }
                                },
                                error: o,
                                complete: r,
                            });
                            this.subscribe(s);
                        });
                    }
                    _subscribe(t) {
                        var i;
                        return null === (i = this.source) || void 0 === i ? void 0 : i.subscribe(t);
                    }
                    [qf]() {
                        return this;
                    }
                    pipe(...t) {
                        return (function Hv(n) {
                            return 0 === n.length
                                ? ns
                                : 1 === n.length
                                  ? n[0]
                                  : function (t) {
                                        return n.reduce((i, r) => r(i), t);
                                    };
                        })(t)(this);
                    }
                    toPromise(t) {
                        return new (t = Uv(t))((i, r) => {
                            let o;
                            this.subscribe(
                                (s) => (o = s),
                                (s) => r(s),
                                () => i(o),
                            );
                        });
                    }
                }
                return (n.create = (e) => new n(e)), n;
            })();
            function Uv(n) {
                var e;
                return null !== (e = n ?? eo.Promise) && void 0 !== e ? e : Promise;
            }
            const DN = Fv(
                (n) =>
                    function () {
                        n(this), (this.name = 'ObjectUnsubscribedError'), (this.message = 'object unsubscribed');
                    },
            );
            let et = (() => {
                class n extends ht {
                    constructor() {
                        super(),
                            (this.closed = !1),
                            (this.currentObservers = null),
                            (this.observers = []),
                            (this.isStopped = !1),
                            (this.hasError = !1),
                            (this.thrownError = null);
                    }
                    lift(t) {
                        const i = new zv(this, this);
                        return (i.operator = t), i;
                    }
                    _throwIfClosed() {
                        if (this.closed) throw new DN();
                    }
                    next(t) {
                        Qc(() => {
                            if ((this._throwIfClosed(), !this.isStopped)) {
                                this.currentObservers || (this.currentObservers = Array.from(this.observers));
                                for (const i of this.currentObservers) i.next(t);
                            }
                        });
                    }
                    error(t) {
                        Qc(() => {
                            if ((this._throwIfClosed(), !this.isStopped)) {
                                (this.hasError = this.isStopped = !0), (this.thrownError = t);
                                const { observers: i } = this;
                                for (; i.length; ) i.shift().error(t);
                            }
                        });
                    }
                    complete() {
                        Qc(() => {
                            if ((this._throwIfClosed(), !this.isStopped)) {
                                this.isStopped = !0;
                                const { observers: t } = this;
                                for (; t.length; ) t.shift().complete();
                            }
                        });
                    }
                    unsubscribe() {
                        (this.isStopped = this.closed = !0), (this.observers = this.currentObservers = null);
                    }
                    get observed() {
                        var t;
                        return (null === (t = this.observers) || void 0 === t ? void 0 : t.length) > 0;
                    }
                    _trySubscribe(t) {
                        return this._throwIfClosed(), super._trySubscribe(t);
                    }
                    _subscribe(t) {
                        return this._throwIfClosed(), this._checkFinalizedStatuses(t), this._innerSubscribe(t);
                    }
                    _innerSubscribe(t) {
                        const { hasError: i, isStopped: r, observers: o } = this;
                        return i || r
                            ? Lv
                            : ((this.currentObservers = null),
                              o.push(t),
                              new xt(() => {
                                  (this.currentObservers = null), Kc(o, t);
                              }));
                    }
                    _checkFinalizedStatuses(t) {
                        const { hasError: i, thrownError: r, isStopped: o } = this;
                        i ? t.error(r) : o && t.complete();
                    }
                    asObservable() {
                        const t = new ht();
                        return (t.source = this), t;
                    }
                }
                return (n.create = (e, t) => new zv(e, t)), n;
            })();
            class zv extends et {
                constructor(e, t) {
                    super(), (this.destination = e), (this.source = t);
                }
                next(e) {
                    var t, i;
                    null === (i = null === (t = this.destination) || void 0 === t ? void 0 : t.next) || void 0 === i || i.call(t, e);
                }
                error(e) {
                    var t, i;
                    null === (i = null === (t = this.destination) || void 0 === t ? void 0 : t.error) || void 0 === i || i.call(t, e);
                }
                complete() {
                    var e, t;
                    null === (t = null === (e = this.destination) || void 0 === e ? void 0 : e.complete) || void 0 === t || t.call(e);
                }
                _subscribe(e) {
                    var t, i;
                    return null !== (i = null === (t = this.source) || void 0 === t ? void 0 : t.subscribe(e)) && void 0 !== i ? i : Lv;
                }
            }
            class Gv extends et {
                constructor(e) {
                    super(), (this._value = e);
                }
                get value() {
                    return this.getValue();
                }
                _subscribe(e) {
                    const t = super._subscribe(e);
                    return !t.closed && e.next(this._value), t;
                }
                getValue() {
                    const { hasError: e, thrownError: t, _value: i } = this;
                    if (e) throw t;
                    return this._throwIfClosed(), i;
                }
                next(e) {
                    super.next((this._value = e));
                }
            }
            function Vt(n) {
                return (e) => {
                    if (
                        (function IN(n) {
                            return Te(n?.lift);
                        })(e)
                    )
                        return e.lift(function (t) {
                            try {
                                return n(t, this);
                            } catch (i) {
                                this.error(i);
                            }
                        });
                    throw new TypeError('Unable to lift unknown Observable type');
                };
            }
            function Ht(n, e, t, i, r) {
                return new xN(n, e, t, i, r);
            }
            class xN extends Wf {
                constructor(e, t, i, r, o, s) {
                    super(e),
                        (this.onFinalize = o),
                        (this.shouldUnsubscribe = s),
                        (this._next = t
                            ? function (a) {
                                  try {
                                      t(a);
                                  } catch (l) {
                                      e.error(l);
                                  }
                              }
                            : super._next),
                        (this._error = r
                            ? function (a) {
                                  try {
                                      r(a);
                                  } catch (l) {
                                      e.error(l);
                                  } finally {
                                      this.unsubscribe();
                                  }
                              }
                            : super._error),
                        (this._complete = i
                            ? function () {
                                  try {
                                      i();
                                  } catch (a) {
                                      e.error(a);
                                  } finally {
                                      this.unsubscribe();
                                  }
                              }
                            : super._complete);
                }
                unsubscribe() {
                    var e;
                    if (!this.shouldUnsubscribe || this.shouldUnsubscribe()) {
                        const { closed: t } = this;
                        super.unsubscribe(), !t && (null === (e = this.onFinalize) || void 0 === e || e.call(this));
                    }
                }
            }
            function Ut(n, e) {
                return Vt((t, i) => {
                    let r = 0;
                    t.subscribe(
                        Ht(i, (o) => {
                            i.next(n.call(e, o, r++));
                        }),
                    );
                });
            }
            const Wv = 'https://g.co/ng/security#xss';
            class S extends Error {
                constructor(e, t) {
                    super(
                        (function is(n, e) {
                            return `NG0${Math.abs(n)}${e ? ': ' + e : ''}`;
                        })(e, t),
                    ),
                        (this.code = e);
                }
            }
            function Xf(n) {
                return (e) => {
                    setTimeout(n, void 0, e);
                };
            }
            const en = class SN extends et {
                constructor(e = !1) {
                    super(), (this.__isAsync = e);
                }
                emit(e) {
                    super.next(e);
                }
                subscribe(e, t, i) {
                    let r = e,
                        o = t || (() => null),
                        s = i;
                    if (e && 'object' == typeof e) {
                        const l = e;
                        (r = l.next?.bind(l)), (o = l.error?.bind(l)), (s = l.complete?.bind(l));
                    }
                    this.__isAsync && ((o = Xf(o)), r && (r = Xf(r)), s && (s = Xf(s)));
                    const a = super.subscribe({ next: r, error: o, complete: s });
                    return e instanceof xt && e.add(a), a;
                }
            };
            var ye = (function (n) {
                return (
                    (n[(n.Default = 0)] = 'Default'),
                    (n[(n.Host = 1)] = 'Host'),
                    (n[(n.Self = 2)] = 'Self'),
                    (n[(n.SkipSelf = 4)] = 'SkipSelf'),
                    (n[(n.Optional = 8)] = 'Optional'),
                    n
                );
            })(ye || {});
            function _t(n) {
                if ('string' == typeof n) return n;
                if (Array.isArray(n)) return '[' + n.map(_t).join(', ') + ']';
                if (null == n) return '' + n;
                if (n.overriddenName) return `${n.overriddenName}`;
                if (n.name) return `${n.name}`;
                const e = n.toString();
                if (null == e) return '' + e;
                const t = e.indexOf('\n');
                return -1 === t ? e : e.substring(0, t);
            }
            function Kf(n, e) {
                return null == n || '' === n ? (null === e ? '' : e) : null == e || '' === e ? n : n + ' ' + e;
            }
            var tu = (function (n) {
                    return (n[(n.OnPush = 0)] = 'OnPush'), (n[(n.Default = 1)] = 'Default'), n;
                })(tu || {}),
                Un = (function (n) {
                    return (n[(n.Emulated = 0)] = 'Emulated'), (n[(n.None = 2)] = 'None'), (n[(n.ShadowDom = 3)] = 'ShadowDom'), n;
                })(Un || {});
            function Oi(n) {
                return { toString: n }.toString();
            }
            const Me = globalThis,
                ci = {},
                we = [];
            function Oe(n) {
                for (let e in n) if (n[e] === Oe) return e;
                throw Error('Could not find renamed property on target object.');
            }
            function AN(n, e) {
                for (const t in e) e.hasOwnProperty(t) && !n.hasOwnProperty(t) && (n[t] = e[t]);
            }
            const za = Oe({ ɵcmp: Oe }),
                Zf = Oe({ ɵdir: Oe }),
                Qf = Oe({ ɵpipe: Oe }),
                Ni = Oe({ ɵfac: Oe }),
                Ga = Oe({ __NG_ELEMENT_ID__: Oe }),
                Xv = Oe({ __NG_ENV_ID__: Oe });
            var st = (function (n) {
                return (
                    (n[(n.None = 0)] = 'None'),
                    (n[(n.SignalBased = 1)] = 'SignalBased'),
                    (n[(n.HasDecoratorInputTransform = 2)] = 'HasDecoratorInputTransform'),
                    n
                );
            })(st || {});
            function Kv(n, e, t) {
                let i = n.length;
                for (;;) {
                    const r = n.indexOf(e, t);
                    if (-1 === r) return r;
                    if (0 === r || n.charCodeAt(r - 1) <= 32) {
                        const o = e.length;
                        if (r + o === i || n.charCodeAt(r + o) <= 32) return r;
                    }
                    t = r + 1;
                }
            }
            function Jf(n, e, t) {
                let i = 0;
                for (; i < t.length; ) {
                    const r = t[i];
                    if ('number' == typeof r) {
                        if (0 !== r) break;
                        i++;
                        const o = t[i++],
                            s = t[i++],
                            a = t[i++];
                        n.setAttribute(e, s, a, o);
                    } else {
                        const o = r,
                            s = t[++i];
                        Qv(o) ? n.setProperty(e, o, s) : n.setAttribute(e, o, s), i++;
                    }
                }
                return i;
            }
            function Zv(n) {
                return 3 === n || 4 === n || 6 === n;
            }
            function Qv(n) {
                return 64 === n.charCodeAt(0);
            }
            function Wa(n, e) {
                if (null !== e && 0 !== e.length)
                    if (null === n || 0 === n.length) n = e.slice();
                    else {
                        let t = -1;
                        for (let i = 0; i < e.length; i++) {
                            const r = e[i];
                            'number' == typeof r ? (t = r) : 0 === t || Jv(n, t, r, null, -1 === t || 2 === t ? e[++i] : null);
                        }
                    }
                return n;
            }
            function Jv(n, e, t, i, r) {
                let o = 0,
                    s = n.length;
                if (-1 === e) s = -1;
                else
                    for (; o < n.length; ) {
                        const a = n[o++];
                        if ('number' == typeof a) {
                            if (a === e) {
                                s = -1;
                                break;
                            }
                            if (a > e) {
                                s = o - 1;
                                break;
                            }
                        }
                    }
                for (; o < n.length; ) {
                    const a = n[o];
                    if ('number' == typeof a) break;
                    if (a === t) {
                        if (null === i) return void (null !== r && (n[o + 1] = r));
                        if (i === n[o + 1]) return void (n[o + 2] = r);
                    }
                    o++, null !== i && o++, null !== r && o++;
                }
                -1 !== s && (n.splice(s, 0, e), (o = s + 1)),
                    n.splice(o++, 0, t),
                    null !== i && n.splice(o++, 0, i),
                    null !== r && n.splice(o++, 0, r);
            }
            const eE = 'ng-template';
            function ON(n, e, t) {
                let i = 0,
                    r = !0;
                for (; i < n.length; ) {
                    let o = n[i++];
                    if ('string' == typeof o && r) {
                        const s = n[i++];
                        if (t && 'class' === o && -1 !== Kv(s.toLowerCase(), e, 0)) return !0;
                    } else {
                        if (1 === o) {
                            for (; i < n.length && 'string' == typeof (o = n[i++]); ) if (o.toLowerCase() === e) return !0;
                            return !1;
                        }
                        'number' == typeof o && (r = !1);
                    }
                }
                return !1;
            }
            function tE(n) {
                return 4 === n.type && n.value !== eE;
            }
            function NN(n, e, t) {
                return e === (4 !== n.type || t ? n.value : eE);
            }
            function PN(n, e, t) {
                let i = 4;
                const r = n.attrs || [],
                    o = (function LN(n) {
                        for (let e = 0; e < n.length; e++) if (Zv(n[e])) return e;
                        return n.length;
                    })(r);
                let s = !1;
                for (let a = 0; a < e.length; a++) {
                    const l = e[a];
                    if ('number' != typeof l) {
                        if (!s)
                            if (4 & i) {
                                if (((i = 2 | (1 & i)), ('' !== l && !NN(n, l, t)) || ('' === l && 1 === e.length))) {
                                    if (zn(i)) return !1;
                                    s = !0;
                                }
                            } else {
                                const c = 8 & i ? l : e[++a];
                                if (8 & i && null !== n.attrs) {
                                    if (!ON(n.attrs, c, t)) {
                                        if (zn(i)) return !1;
                                        s = !0;
                                    }
                                    continue;
                                }
                                const d = kN(8 & i ? 'class' : l, r, tE(n), t);
                                if (-1 === d) {
                                    if (zn(i)) return !1;
                                    s = !0;
                                    continue;
                                }
                                if ('' !== c) {
                                    let h;
                                    h = d > o ? '' : r[d + 1].toLowerCase();
                                    const f = 8 & i ? h : null;
                                    if ((f && -1 !== Kv(f, c, 0)) || (2 & i && c !== h)) {
                                        if (zn(i)) return !1;
                                        s = !0;
                                    }
                                }
                            }
                    } else {
                        if (!s && !zn(i) && !zn(l)) return !1;
                        if (s && zn(l)) continue;
                        (s = !1), (i = l | (1 & i));
                    }
                }
                return zn(i) || s;
            }
            function zn(n) {
                return 0 == (1 & n);
            }
            function kN(n, e, t, i) {
                if (null === e) return -1;
                let r = 0;
                if (i || !t) {
                    let o = !1;
                    for (; r < e.length; ) {
                        const s = e[r];
                        if (s === n) return r;
                        if (3 === s || 6 === s) o = !0;
                        else {
                            if (1 === s || 2 === s) {
                                let a = e[++r];
                                for (; 'string' == typeof a; ) a = e[++r];
                                continue;
                            }
                            if (4 === s) break;
                            if (0 === s) {
                                r += 4;
                                continue;
                            }
                        }
                        r += o ? 1 : 2;
                    }
                    return -1;
                }
                return (function BN(n, e) {
                    let t = n.indexOf(4);
                    if (t > -1)
                        for (t++; t < n.length; ) {
                            const i = n[t];
                            if ('number' == typeof i) return -1;
                            if (i === e) return t;
                            t++;
                        }
                    return -1;
                })(e, n);
            }
            function nE(n, e, t = !1) {
                for (let i = 0; i < e.length; i++) if (PN(n, e[i], t)) return !0;
                return !1;
            }
            function jN(n, e) {
                e: for (let t = 0; t < e.length; t++) {
                    const i = e[t];
                    if (n.length === i.length) {
                        for (let r = 0; r < n.length; r++) if (n[r] !== i[r]) continue e;
                        return !0;
                    }
                }
                return !1;
            }
            function iE(n, e) {
                return n ? ':not(' + e.trim() + ')' : e;
            }
            function VN(n) {
                let e = n[0],
                    t = 1,
                    i = 2,
                    r = '',
                    o = !1;
                for (; t < n.length; ) {
                    let s = n[t];
                    if ('string' == typeof s)
                        if (2 & i) {
                            const a = n[++t];
                            r += '[' + s + (a.length > 0 ? '="' + a + '"' : '') + ']';
                        } else 8 & i ? (r += '.' + s) : 4 & i && (r += ' ' + s);
                    else '' !== r && !zn(s) && ((e += iE(o, r)), (r = '')), (i = s), (o = o || !zn(i));
                    t++;
                }
                return '' !== r && (e += iE(o, r)), e;
            }
            function Pi(n) {
                return Oi(() => {
                    const e = sE(n),
                        t = {
                            ...e,
                            decls: n.decls,
                            vars: n.vars,
                            template: n.template,
                            consts: n.consts || null,
                            ngContentSelectors: n.ngContentSelectors,
                            onPush: n.changeDetection === tu.OnPush,
                            directiveDefs: null,
                            pipeDefs: null,
                            dependencies: (e.standalone && n.dependencies) || null,
                            getStandaloneInjector: null,
                            signals: n.signals ?? !1,
                            data: n.data || {},
                            encapsulation: n.encapsulation || Un.Emulated,
                            styles: n.styles || we,
                            _: null,
                            schemas: n.schemas || null,
                            tView: null,
                            id: '',
                        };
                    aE(t);
                    const i = n.dependencies;
                    return (
                        (t.directiveDefs = nu(i, !1)),
                        (t.pipeDefs = nu(i, !0)),
                        (t.id = (function $N(n) {
                            let e = 0;
                            const t = [
                                n.selectors,
                                n.ngContentSelectors,
                                n.hostVars,
                                n.hostAttrs,
                                n.consts,
                                n.vars,
                                n.decls,
                                n.encapsulation,
                                n.standalone,
                                n.signals,
                                n.exportAs,
                                JSON.stringify(n.inputs),
                                JSON.stringify(n.outputs),
                                Object.getOwnPropertyNames(n.type.prototype),
                                !!n.contentQueries,
                                !!n.viewQuery,
                            ].join('|');
                            for (const r of t) e = (Math.imul(31, e) + r.charCodeAt(0)) << 0;
                            return (e += 2147483648), 'c' + e;
                        })(t)),
                        t
                    );
                });
            }
            function zN(n) {
                return fe(n) || yt(n);
            }
            function GN(n) {
                return null !== n;
            }
            function oE(n, e) {
                if (null == n) return ci;
                const t = {};
                for (const i in n)
                    if (n.hasOwnProperty(i)) {
                        const r = n[i];
                        let o,
                            s,
                            a = st.None;
                        Array.isArray(r) ? ((a = r[0]), (o = r[1]), (s = r[2] ?? o)) : ((o = r), (s = r)),
                            e ? ((t[o] = a !== st.None ? [i, a] : i), (e[o] = s)) : (t[o] = i);
                    }
                return t;
            }
            function zt(n) {
                return Oi(() => {
                    const e = sE(n);
                    return aE(e), e;
                });
            }
            function fe(n) {
                return n[za] || null;
            }
            function yt(n) {
                return n[Zf] || null;
            }
            function St(n) {
                return n[Qf] || null;
            }
            function sE(n) {
                const e = {};
                return {
                    type: n.type,
                    providersResolver: null,
                    factory: null,
                    hostBindings: n.hostBindings || null,
                    hostVars: n.hostVars || 0,
                    hostAttrs: n.hostAttrs || null,
                    contentQueries: n.contentQueries || null,
                    declaredInputs: e,
                    inputTransforms: null,
                    inputConfig: n.inputs || ci,
                    exportAs: n.exportAs || null,
                    standalone: !0 === n.standalone,
                    signals: !0 === n.signals,
                    selectors: n.selectors || we,
                    viewQuery: n.viewQuery || null,
                    features: n.features || null,
                    setInput: null,
                    findHostDirectiveDefs: null,
                    hostDirectives: null,
                    inputs: oE(n.inputs, e),
                    outputs: oE(n.outputs),
                    debugInfo: null,
                };
            }
            function aE(n) {
                n.features?.forEach((e) => e(n));
            }
            function nu(n, e) {
                if (!n) return null;
                const t = e ? St : zN;
                return () => ('function' == typeof n ? n() : n).map((i) => t(i)).filter(GN);
            }
            const Qe = 0,
                O = 1,
                G = 2,
                at = 3,
                Gn = 4,
                Ot = 5,
                Wn = 6,
                rs = 7,
                ze = 8,
                Nt = 9,
                ki = 10,
                re = 11,
                $a = 12,
                lE = 13,
                os = 14,
                Je = 15,
                Ya = 16,
                ss = 17,
                Fi = 18,
                qa = 19,
                cE = 20,
                pr = 21,
                iu = 22,
                io = 23,
                oe = 25,
                em = 1,
                ui = 7,
                as = 9,
                lt = 10;
            var tm = (function (n) {
                return (n[(n.None = 0)] = 'None'), (n[(n.HasTransplantedViews = 2)] = 'HasTransplantedViews'), n;
            })(tm || {});
            function Pt(n) {
                return Array.isArray(n) && 'object' == typeof n[em];
            }
            function kt(n) {
                return Array.isArray(n) && !0 === n[em];
            }
            function nm(n) {
                return 0 != (4 & n.flags);
            }
            function ro(n) {
                return n.componentOffset > -1;
            }
            function ou(n) {
                return 1 == (1 & n.flags);
            }
            function $n(n) {
                return !!n.template;
            }
            function im(n) {
                return 0 != (512 & n[G]);
            }
            let pE = !1;
            function Fe(n) {
                for (; Array.isArray(n); ) n = n[Qe];
                return n;
            }
            function Ka(n, e) {
                return Fe(e[n]);
            }
            function Gt(n, e) {
                return Fe(e[n.index]);
            }
            function Za(n, e) {
                return n.data[e];
            }
            function _n(n, e) {
                const t = e[n];
                return Pt(t) ? t : t[Qe];
            }
            function am(n) {
                return 128 == (128 & n[G]);
            }
            function di(n, e) {
                return null == e ? null : n[e];
            }
            function gE(n) {
                n[ss] = 0;
            }
            function eP(n) {
                1024 & n[G] || ((n[G] |= 1024), am(n) && Qa(n));
            }
            function lm(n) {
                return !!(9216 & n[G] || n[io]?.dirty);
            }
            function cm(n) {
                lm(n)
                    ? Qa(n)
                    : 64 & n[G] &&
                      ((function KN() {
                          return pE;
                      })()
                          ? ((n[G] |= 1024), Qa(n))
                          : n[ki].changeDetectionScheduler?.notify());
            }
            function Qa(n) {
                n[ki].changeDetectionScheduler?.notify();
                let e = oo(n);
                for (; null !== e && !(8192 & e[G]) && ((e[G] |= 8192), am(e)); ) e = oo(e);
            }
            function oo(n) {
                const e = n[at];
                return kt(e) ? e[at] : e;
            }
            const te = { lFrame: xE(null), bindingsEnabled: !0, skipHydrationRootTNode: null };
            function bE() {
                return te.bindingsEnabled;
            }
            function cs() {
                return null !== te.skipHydrationRootTNode;
            }
            function C() {
                return te.lFrame.lView;
            }
            function ge() {
                return te.lFrame.tView;
            }
            function dm(n) {
                return (te.lFrame.contextLView = n), n[ze];
            }
            function hm(n) {
                return (te.lFrame.contextLView = null), n;
            }
            function Ne() {
                let n = vE();
                for (; null !== n && 64 === n.type; ) n = n.parent;
                return n;
            }
            function vE() {
                return te.lFrame.currentTNode;
            }
            function hi(n, e) {
                const t = te.lFrame;
                (t.currentTNode = n), (t.isParent = e);
            }
            function fm() {
                return te.lFrame.isParent;
            }
            function mm() {
                te.lFrame.isParent = !1;
            }
            function Yn() {
                return te.lFrame.bindingIndex++;
            }
            function Bi(n) {
                const e = te.lFrame,
                    t = e.bindingIndex;
                return (e.bindingIndex = e.bindingIndex + n), t;
            }
            function dP(n, e) {
                const t = te.lFrame;
                (t.bindingIndex = t.bindingRootIndex = n), pm(e);
            }
            function pm(n) {
                te.lFrame.currentDirectiveIndex = n;
            }
            function gm(n) {
                const e = te.lFrame.currentDirectiveIndex;
                return -1 === e ? null : n[e];
            }
            function _m() {
                return te.lFrame.currentQueryIndex;
            }
            function au(n) {
                te.lFrame.currentQueryIndex = n;
            }
            function fP(n) {
                const e = n[O];
                return 2 === e.type ? e.declTNode : 1 === e.type ? n[Ot] : null;
            }
            function DE(n, e, t) {
                if (t & ye.SkipSelf) {
                    let r = e,
                        o = n;
                    for (; !((r = r.parent), null !== r || t & ye.Host || ((r = fP(o)), null === r || ((o = o[os]), 10 & r.type))); );
                    if (null === r) return !1;
                    (e = r), (n = o);
                }
                const i = (te.lFrame = IE());
                return (i.currentTNode = e), (i.lView = n), !0;
            }
            function ym(n) {
                const e = IE(),
                    t = n[O];
                (te.lFrame = e),
                    (e.currentTNode = t.firstChild),
                    (e.lView = n),
                    (e.tView = t),
                    (e.contextLView = n),
                    (e.bindingIndex = t.bindingStartIndex),
                    (e.inI18n = !1);
            }
            function IE() {
                const n = te.lFrame,
                    e = null === n ? null : n.child;
                return null === e ? xE(n) : e;
            }
            function xE(n) {
                const e = {
                    currentTNode: null,
                    isParent: !0,
                    lView: null,
                    tView: null,
                    selectedIndex: -1,
                    contextLView: null,
                    elementDepthCount: 0,
                    currentNamespace: null,
                    currentDirectiveIndex: -1,
                    bindingRootIndex: -1,
                    bindingIndex: -1,
                    currentQueryIndex: 0,
                    parent: n,
                    child: null,
                    inI18n: !1,
                };
                return null !== n && (n.child = e), e;
            }
            function SE() {
                const n = te.lFrame;
                return (te.lFrame = n.parent), (n.currentTNode = null), (n.lView = null), n;
            }
            const TE = SE;
            function bm() {
                const n = SE();
                (n.isParent = !0),
                    (n.tView = null),
                    (n.selectedIndex = -1),
                    (n.contextLView = null),
                    (n.elementDepthCount = 0),
                    (n.currentDirectiveIndex = -1),
                    (n.currentNamespace = null),
                    (n.bindingRootIndex = -1),
                    (n.bindingIndex = -1),
                    (n.currentQueryIndex = 0);
            }
            function Ft() {
                return te.lFrame.selectedIndex;
            }
            function so(n) {
                te.lFrame.selectedIndex = n;
            }
            function Ge() {
                const n = te.lFrame;
                return Za(n.tView, n.selectedIndex);
            }
            let RE = !0;
            function lu() {
                return RE;
            }
            function gr(n) {
                RE = n;
            }
            function bP() {
                return us(Ne(), C());
            }
            function us(n, e) {
                return new Tt(Gt(n, e));
            }
            let wm,
                Tt = (() => {
                    class n {
                        constructor(t) {
                            this.nativeElement = t;
                        }
                        static #e = (this.__NG_ELEMENT_ID__ = bP);
                    }
                    return n;
                })();
            function AE(n) {
                return n instanceof Tt ? n.nativeElement : n;
            }
            function ds(n, e) {
                n.forEach((t) => (Array.isArray(t) ? ds(t, e) : e(t)));
            }
            function OE(n, e, t) {
                e >= n.length ? n.push(t) : n.splice(e, 0, t);
            }
            function cu(n, e) {
                return e >= n.length - 1 ? n.pop() : n.splice(e, 1)[0];
            }
            function yn(n, e, t) {
                let i = hs(n, e);
                return (
                    i >= 0
                        ? (n[1 | i] = t)
                        : ((i = ~i),
                          (function NE(n, e, t, i) {
                              let r = n.length;
                              if (r == e) n.push(t, i);
                              else if (1 === r) n.push(i, n[0]), (n[0] = t);
                              else {
                                  for (r--, n.push(n[r - 1], n[r]); r > e; ) (n[r] = n[r - 2]), r--;
                                  (n[e] = t), (n[e + 1] = i);
                              }
                          })(n, i, e, t)),
                    i
                );
            }
            function Em(n, e) {
                const t = hs(n, e);
                if (t >= 0) return n[1 | t];
            }
            function hs(n, e) {
                return (function PE(n, e, t) {
                    let i = 0,
                        r = n.length >> t;
                    for (; r !== i; ) {
                        const o = i + ((r - i) >> 1),
                            s = n[o << t];
                        if (e === s) return o << t;
                        s > e ? (r = o) : (i = o + 1);
                    }
                    return ~(r << t);
                })(n, e, 1);
            }
            function EP() {
                return this._results[Symbol.iterator]();
            }
            class el {
                static #e = Symbol.iterator;
                get changes() {
                    return (this._changes ??= new en());
                }
                constructor(e = !1) {
                    (this._emitDistinctChangesOnly = e),
                        (this.dirty = !0),
                        (this._onDirty = void 0),
                        (this._results = []),
                        (this._changesDetected = !1),
                        (this._changes = void 0),
                        (this.length = 0),
                        (this.first = void 0),
                        (this.last = void 0);
                    const t = el.prototype;
                    t[Symbol.iterator] || (t[Symbol.iterator] = EP);
                }
                get(e) {
                    return this._results[e];
                }
                map(e) {
                    return this._results.map(e);
                }
                filter(e) {
                    return this._results.filter(e);
                }
                find(e) {
                    return this._results.find(e);
                }
                reduce(e, t) {
                    return this._results.reduce(e, t);
                }
                forEach(e) {
                    this._results.forEach(e);
                }
                some(e) {
                    return this._results.some(e);
                }
                toArray() {
                    return this._results.slice();
                }
                toString() {
                    return this._results.toString();
                }
                reset(e, t) {
                    this.dirty = !1;
                    const i = (function nn(n) {
                        return n.flat(Number.POSITIVE_INFINITY);
                    })(e);
                    (this._changesDetected = !(function vP(n, e, t) {
                        if (n.length !== e.length) return !1;
                        for (let i = 0; i < n.length; i++) {
                            let r = n[i],
                                o = e[i];
                            if ((t && ((r = t(r)), (o = t(o))), o !== r)) return !1;
                        }
                        return !0;
                    })(this._results, i, t)) &&
                        ((this._results = i), (this.length = i.length), (this.last = i[this.length - 1]), (this.first = i[0]));
                }
                notifyOnChanges() {
                    void 0 !== this._changes && (this._changesDetected || !this._emitDistinctChangesOnly) && this._changes.emit(this);
                }
                onDirty(e) {
                    this._onDirty = e;
                }
                setDirty() {
                    (this.dirty = !0), this._onDirty?.();
                }
                destroy() {
                    void 0 !== this._changes && (this._changes.complete(), this._changes.unsubscribe());
                }
            }
            function du(n) {
                return 128 == (128 & n.flags);
            }
            function j(n) {
                return { token: n.token, providedIn: n.providedIn || null, factory: n.factory, value: void 0 };
            }
            function fu(n) {
                return LE(n, pu) || LE(n, BE);
            }
            function LE(n, e) {
                return n.hasOwnProperty(e) ? n[e] : null;
            }
            function mu(n) {
                return n && (n.hasOwnProperty(Dm) || n.hasOwnProperty(IP)) ? n[Dm] : null;
            }
            const pu = Oe({ ɵprov: Oe }),
                Dm = Oe({ ɵinj: Oe }),
                BE = Oe({ ngInjectableDef: Oe }),
                IP = Oe({ ngInjectorDef: Oe });
            class L {
                constructor(e, t) {
                    (this._desc = e),
                        (this.ngMetadataName = 'InjectionToken'),
                        (this.ɵprov = void 0),
                        'number' == typeof t
                            ? (this.__NG_ELEMENT_ID__ = t)
                            : void 0 !== t && (this.ɵprov = j({ token: this, providedIn: t.providedIn || 'root', factory: t.factory }));
                }
                get multi() {
                    return this;
                }
                toString() {
                    return `InjectionToken ${this._desc}`;
                }
            }
            const Im = new L('', { providedIn: 'root', factory: () => xP }),
                xP = 'ng',
                jE = new L(''),
                ao = new L('', { providedIn: 'platform', factory: () => 'unknown' }),
                yr = new L(''),
                xm = new L('', {
                    providedIn: 'root',
                    factory: () =>
                        (function _r() {
                            if (void 0 !== wm) return wm;
                            if (typeof document < 'u') return document;
                            throw new S(210, !1);
                        })()
                            .body?.querySelector('[ngCspNonce]')
                            ?.getAttribute('ngCspNonce') || null,
                }),
                MP = Oe({ __forward_ref__: Oe });
            function Sm(n) {
                return (
                    (n.__forward_ref__ = Sm),
                    (n.toString = function () {
                        return _t(this());
                    }),
                    n
                );
            }
            function Z(n) {
                return (function gu(n) {
                    return 'function' == typeof n && n.hasOwnProperty(MP) && n.__forward_ref__ === Sm;
                })(n)
                    ? n()
                    : n;
            }
            function Om(n) {
                return n && !!n.ɵproviders;
            }
            function se(n) {
                return 'string' == typeof n ? n : null == n ? '' : String(n);
            }
            function Nm(n, e) {
                throw new S(-201, !1);
            }
            let Pm;
            function rn(n) {
                const e = Pm;
                return (Pm = n), e;
            }
            function UE(n, e, t) {
                const i = fu(n);
                return i && 'root' == i.providedIn
                    ? void 0 === i.value
                        ? (i.value = i.factory())
                        : i.value
                    : t & ye.Optional
                      ? null
                      : void 0 !== e
                        ? e
                        : void Nm();
            }
            const nl = {},
                km = '__NG_DI_FLAG__',
                _u = 'ngTempTokenPath',
                kP = /\n/gm,
                zE = '__source';
            let fs;
            function br(n) {
                const e = fs;
                return (fs = n), e;
            }
            function BP(n, e = ye.Default) {
                if (void 0 === fs) throw new S(-203, !1);
                return null === fs ? UE(n, void 0, e) : fs.get(n, e & ye.Optional ? null : void 0, e);
            }
            function T(n, e = ye.Default) {
                return (
                    (function HE() {
                        return Pm;
                    })() || BP
                )(Z(n), e);
            }
            function $(n, e = ye.Default) {
                return T(n, yu(e));
            }
            function yu(n) {
                return typeof n > 'u' || 'number' == typeof n
                    ? n
                    : 0 | (n.optional && 8) | (n.host && 1) | (n.self && 2) | (n.skipSelf && 4);
            }
            function Fm(n) {
                const e = [];
                for (let t = 0; t < n.length; t++) {
                    const i = Z(n[t]);
                    if (Array.isArray(i)) {
                        if (0 === i.length) throw new S(900, !1);
                        let r,
                            o = ye.Default;
                        for (let s = 0; s < i.length; s++) {
                            const a = i[s],
                                l = jP(a);
                            'number' == typeof l ? (-1 === l ? (r = a.token) : (o |= l)) : (r = a);
                        }
                        e.push(T(r, o));
                    } else e.push(T(i));
                }
                return e;
            }
            function jP(n) {
                return n[km];
            }
            let WE = () => null;
            function Gm(n, e, t = !1) {
                return WE(n, e, t);
            }
            function lo(n, e) {
                return n.hasOwnProperty(Ni) ? n[Ni] : null;
            }
            const ws = new L(''),
                ZE = new L('', -1),
                Xm = new L('');
            class Iu {
                get(e, t = nl) {
                    if (t === nl) {
                        const i = new Error(`NullInjectorError: No provider for ${_t(e)}!`);
                        throw ((i.name = 'NullInjectorError'), i);
                    }
                    return t;
                }
            }
            function JP(...n) {
                return { ɵproviders: QE(0, n), ɵfromNgModule: !0 };
            }
            function QE(n, ...e) {
                const t = [],
                    i = new Set();
                let r;
                const o = (s) => {
                    t.push(s);
                };
                return (
                    ds(e, (s) => {
                        const a = s;
                        xu(a, o, [], i) && ((r ||= []), r.push(a));
                    }),
                    void 0 !== r && JE(r, o),
                    t
                );
            }
            function JE(n, e) {
                for (let t = 0; t < n.length; t++) {
                    const { ngModule: i, providers: r } = n[t];
                    Zm(r, (o) => {
                        e(o, i);
                    });
                }
            }
            function xu(n, e, t, i) {
                if (!(n = Z(n))) return !1;
                let r = null,
                    o = mu(n);
                const s = !o && fe(n);
                if (o || s) {
                    if (s && !s.standalone) return !1;
                    r = n;
                } else {
                    const l = n.ngModule;
                    if (((o = mu(l)), !o)) return !1;
                    r = l;
                }
                const a = i.has(r);
                if (s) {
                    if (a) return !1;
                    if ((i.add(r), s.dependencies)) {
                        const l = 'function' == typeof s.dependencies ? s.dependencies() : s.dependencies;
                        for (const c of l) xu(c, e, t, i);
                    }
                } else {
                    if (!o) return !1;
                    {
                        if (null != o.imports && !a) {
                            let c;
                            i.add(r);
                            try {
                                ds(o.imports, (u) => {
                                    xu(u, e, t, i) && ((c ||= []), c.push(u));
                                });
                            } finally {
                            }
                            void 0 !== c && JE(c, e);
                        }
                        if (!a) {
                            const c = lo(r) || (() => new r());
                            e({ provide: r, useFactory: c, deps: we }, r),
                                e({ provide: Xm, useValue: r, multi: !0 }, r),
                                e({ provide: ws, useValue: () => T(r), multi: !0 }, r);
                        }
                        const l = o.providers;
                        if (null != l && !a) {
                            const c = n;
                            Zm(l, (u) => {
                                e(u, c);
                            });
                        }
                    }
                }
                return r !== n && void 0 !== n.providers;
            }
            function Zm(n, e) {
                for (let t of n) Om(t) && (t = t.ɵproviders), Array.isArray(t) ? Zm(t, e) : e(t);
            }
            const ek = Oe({ provide: String, useValue: Oe });
            function Qm(n) {
                return null !== n && 'object' == typeof n && ek in n;
            }
            function co(n) {
                return 'function' == typeof n;
            }
            const Jm = new L(''),
                Su = {},
                nk = {};
            let ep;
            function Tu() {
                return void 0 === ep && (ep = new Iu()), ep;
            }
            class ji {}
            class Cs extends ji {
                get destroyed() {
                    return this._destroyed;
                }
                constructor(e, t, i, r) {
                    super(),
                        (this.parent = t),
                        (this.source = i),
                        (this.scopes = r),
                        (this.records = new Map()),
                        (this._ngOnDestroyHooks = new Set()),
                        (this._onDestroyHooks = []),
                        (this._destroyed = !1),
                        np(e, (s) => this.processProvider(s)),
                        this.records.set(ZE, Ds(void 0, this)),
                        r.has('environment') && this.records.set(ji, Ds(void 0, this));
                    const o = this.records.get(Jm);
                    null != o && 'string' == typeof o.value && this.scopes.add(o.value),
                        (this.injectorDefTypes = new Set(this.get(Xm, we, ye.Self)));
                }
                destroy() {
                    this.assertNotDestroyed(), (this._destroyed = !0);
                    try {
                        for (const t of this._ngOnDestroyHooks) t.ngOnDestroy();
                        const e = this._onDestroyHooks;
                        this._onDestroyHooks = [];
                        for (const t of e) t();
                    } finally {
                        this.records.clear(), this._ngOnDestroyHooks.clear(), this.injectorDefTypes.clear();
                    }
                }
                onDestroy(e) {
                    return this.assertNotDestroyed(), this._onDestroyHooks.push(e), () => this.removeOnDestroy(e);
                }
                runInContext(e) {
                    this.assertNotDestroyed();
                    const t = br(this),
                        i = rn(void 0);
                    try {
                        return e();
                    } finally {
                        br(t), rn(i);
                    }
                }
                get(e, t = nl, i = ye.Default) {
                    if ((this.assertNotDestroyed(), e.hasOwnProperty(Xv))) return e[Xv](this);
                    i = yu(i);
                    const o = br(this),
                        s = rn(void 0);
                    try {
                        if (!(i & ye.SkipSelf)) {
                            let l = this.records.get(e);
                            if (void 0 === l) {
                                const c =
                                    (function ak(n) {
                                        return 'function' == typeof n || ('object' == typeof n && n instanceof L);
                                    })(e) && fu(e);
                                (l = c && this.injectableDefInScope(c) ? Ds(tp(e), Su) : null), this.records.set(e, l);
                            }
                            if (null != l) return this.hydrate(e, l);
                        }
                        return (i & ye.Self ? Tu() : this.parent).get(e, (t = i & ye.Optional && t === nl ? null : t));
                    } catch (a) {
                        if ('NullInjectorError' === a.name) {
                            if (((a[_u] = a[_u] || []).unshift(_t(e)), o)) throw a;
                            return (function VP(n, e, t, i) {
                                const r = n[_u];
                                throw (
                                    (e[zE] && r.unshift(e[zE]),
                                    (n.message = (function HP(n, e, t, i = null) {
                                        n = n && '\n' === n.charAt(0) && '\u0275' == n.charAt(1) ? n.slice(2) : n;
                                        let r = _t(e);
                                        if (Array.isArray(e)) r = e.map(_t).join(' -> ');
                                        else if ('object' == typeof e) {
                                            let o = [];
                                            for (let s in e)
                                                if (e.hasOwnProperty(s)) {
                                                    let a = e[s];
                                                    o.push(s + ':' + ('string' == typeof a ? JSON.stringify(a) : _t(a)));
                                                }
                                            r = `{${o.join(', ')}}`;
                                        }
                                        return `${t}${i ? '(' + i + ')' : ''}[${r}]: ${n.replace(kP, '\n  ')}`;
                                    })('\n' + n.message, r, t, i)),
                                    (n.ngTokenPath = r),
                                    (n[_u] = null),
                                    n)
                                );
                            })(a, e, 'R3InjectorError', this.source);
                        }
                        throw a;
                    } finally {
                        rn(s), br(o);
                    }
                }
                resolveInjectorInitializers() {
                    const e = br(this),
                        t = rn(void 0);
                    try {
                        const r = this.get(ws, we, ye.Self);
                        for (const o of r) o();
                    } finally {
                        br(e), rn(t);
                    }
                }
                toString() {
                    const e = [],
                        t = this.records;
                    for (const i of t.keys()) e.push(_t(i));
                    return `R3Injector[${e.join(', ')}]`;
                }
                assertNotDestroyed() {
                    if (this._destroyed) throw new S(205, !1);
                }
                processProvider(e) {
                    let t = co((e = Z(e))) ? e : Z(e && e.provide);
                    const i = (function rk(n) {
                        return Qm(n)
                            ? Ds(void 0, n.useValue)
                            : Ds(
                                  (function n0(n, e, t) {
                                      let i;
                                      if (co(n)) {
                                          const r = Z(n);
                                          return lo(r) || tp(r);
                                      }
                                      if (Qm(n)) i = () => Z(n.useValue);
                                      else if (
                                          (function t0(n) {
                                              return !(!n || !n.useFactory);
                                          })(n)
                                      )
                                          i = () => n.useFactory(...Fm(n.deps || []));
                                      else if (
                                          (function e0(n) {
                                              return !(!n || !n.useExisting);
                                          })(n)
                                      )
                                          i = () => T(Z(n.useExisting));
                                      else {
                                          const r = Z(n && (n.useClass || n.provide));
                                          if (
                                              !(function ok(n) {
                                                  return !!n.deps;
                                              })(n)
                                          )
                                              return lo(r) || tp(r);
                                          i = () => new r(...Fm(n.deps));
                                      }
                                      return i;
                                  })(n),
                                  Su,
                              );
                    })(e);
                    if (!co(e) && !0 === e.multi) {
                        let r = this.records.get(t);
                        r || ((r = Ds(void 0, Su, !0)), (r.factory = () => Fm(r.multi)), this.records.set(t, r)), (t = e), r.multi.push(e);
                    }
                    this.records.set(t, i);
                }
                hydrate(e, t) {
                    return (
                        t.value === Su && ((t.value = nk), (t.value = t.factory())),
                        'object' == typeof t.value &&
                            t.value &&
                            (function sk(n) {
                                return null !== n && 'object' == typeof n && 'function' == typeof n.ngOnDestroy;
                            })(t.value) &&
                            this._ngOnDestroyHooks.add(t.value),
                        t.value
                    );
                }
                injectableDefInScope(e) {
                    if (!e.providedIn) return !1;
                    const t = Z(e.providedIn);
                    return 'string' == typeof t ? 'any' === t || this.scopes.has(t) : this.injectorDefTypes.has(t);
                }
                removeOnDestroy(e) {
                    const t = this._onDestroyHooks.indexOf(e);
                    -1 !== t && this._onDestroyHooks.splice(t, 1);
                }
            }
            function tp(n) {
                const e = fu(n),
                    t = null !== e ? e.factory : lo(n);
                if (null !== t) return t;
                if (n instanceof L) throw new S(204, !1);
                if (n instanceof Function)
                    return (function ik(n) {
                        if (n.length > 0) throw new S(204, !1);
                        const t = (function DP(n) {
                            return (n && (n[pu] || n[BE])) || null;
                        })(n);
                        return null !== t ? () => t.factory(n) : () => new n();
                    })(n);
                throw new S(204, !1);
            }
            function Ds(n, e, t = !1) {
                return { factory: n, value: e, multi: t ? [] : void 0 };
            }
            function np(n, e) {
                for (const t of n) Array.isArray(t) ? np(t, e) : t && Om(t) ? np(t.ɵproviders, e) : e(t);
            }
            class _k {
                constructor(e, t, i) {
                    (this.previousValue = e), (this.currentValue = t), (this.firstChange = i);
                }
                isFirstChange() {
                    return this.firstChange;
                }
            }
            function o0(n, e, t, i) {
                null !== e ? e.applyValueToInputSignal(e, i) : (n[t] = i);
            }
            function s0(n) {
                return n.type.prototype.ngOnChanges && (n.setInput = bk), yk;
            }
            function yk() {
                const n = l0(this),
                    e = n?.current;
                if (e) {
                    const t = n.previous;
                    if (t === ci) n.previous = e;
                    else for (let i in e) t[i] = e[i];
                    (n.current = null), this.ngOnChanges(e);
                }
            }
            function bk(n, e, t, i, r) {
                const o = this.declaredInputs[i],
                    s =
                        l0(n) ||
                        (function vk(n, e) {
                            return (n[a0] = e);
                        })(n, { previous: ci, current: null }),
                    a = s.current || (s.current = {}),
                    l = s.previous,
                    c = l[o];
                (a[o] = new _k(c && c.currentValue, t, l === ci)), o0(n, e, r, t);
            }
            const a0 = '__ngSimpleChanges__';
            function l0(n) {
                return n[a0] || null;
            }
            const fi = function (n, e, t) {};
            function Au(n, e) {
                for (let t = e.directiveStart, i = e.directiveEnd; t < i; t++) {
                    const o = n.data[t].type.prototype,
                        { ngAfterContentInit: s, ngAfterContentChecked: a, ngAfterViewInit: l, ngAfterViewChecked: c, ngOnDestroy: u } = o;
                    s && (n.contentHooks ??= []).push(-t, s),
                        a && ((n.contentHooks ??= []).push(t, a), (n.contentCheckHooks ??= []).push(t, a)),
                        l && (n.viewHooks ??= []).push(-t, l),
                        c && ((n.viewHooks ??= []).push(t, c), (n.viewCheckHooks ??= []).push(t, c)),
                        null != u && (n.destroyHooks ??= []).push(t, u);
                }
            }
            function Ou(n, e, t) {
                c0(n, e, 3, t);
            }
            function Nu(n, e, t, i) {
                (3 & n[G]) === t && c0(n, e, t, i);
            }
            function sp(n, e) {
                let t = n[G];
                (3 & t) === e && ((t &= 16383), (t += 1), (n[G] = t));
            }
            function c0(n, e, t, i) {
                const o = i ?? -1,
                    s = e.length - 1;
                let a = 0;
                for (let l = void 0 !== i ? 65535 & n[ss] : 0; l < s; l++)
                    if ('number' == typeof e[l + 1]) {
                        if (((a = e[l]), null != i && a >= i)) break;
                    } else
                        e[l] < 0 && (n[ss] += 65536), (a < o || -1 == o) && (Ck(n, t, e, l), (n[ss] = (4294901760 & n[ss]) + l + 2)), l++;
            }
            function u0(n, e) {
                fi(4, n, e);
                const t = Ze(null);
                try {
                    e.call(n);
                } finally {
                    Ze(t), fi(5, n, e);
                }
            }
            function Ck(n, e, t, i) {
                const r = t[i] < 0,
                    o = t[i + 1],
                    a = n[r ? -t[i] : t[i]];
                r ? n[G] >> 14 < n[ss] >> 16 && (3 & n[G]) === e && ((n[G] += 16384), u0(a, o)) : u0(a, o);
            }
            const xs = -1;
            class ll {
                constructor(e, t, i) {
                    (this.factory = e), (this.resolving = !1), (this.canSeeViewProviders = t), (this.injectImpl = i);
                }
            }
            function lp(n) {
                return n !== xs;
            }
            function cl(n) {
                return 32767 & n;
            }
            function ul(n, e) {
                let t = (function Tk(n) {
                        return n >> 16;
                    })(n),
                    i = e;
                for (; t > 0; ) (i = i[os]), t--;
                return i;
            }
            let cp = !0;
            function Pu(n) {
                const e = cp;
                return (cp = n), e;
            }
            const d0 = 255,
                h0 = 5;
            let Mk = 0;
            const mi = {};
            function ku(n, e) {
                const t = f0(n, e);
                if (-1 !== t) return t;
                const i = e[O];
                i.firstCreatePass && ((n.injectorIndex = e.length), up(i.data, n), up(e, null), up(i.blueprint, null));
                const r = Fu(n, e),
                    o = n.injectorIndex;
                if (lp(r)) {
                    const s = cl(r),
                        a = ul(r, e),
                        l = a[O].data;
                    for (let c = 0; c < 8; c++) e[o + c] = a[s + c] | l[s + c];
                }
                return (e[o + 8] = r), o;
            }
            function up(n, e) {
                n.push(0, 0, 0, 0, 0, 0, 0, 0, e);
            }
            function f0(n, e) {
                return -1 === n.injectorIndex || (n.parent && n.parent.injectorIndex === n.injectorIndex) || null === e[n.injectorIndex + 8]
                    ? -1
                    : n.injectorIndex;
            }
            function Fu(n, e) {
                if (n.parent && -1 !== n.parent.injectorIndex) return n.parent.injectorIndex;
                let t = 0,
                    i = null,
                    r = e;
                for (; null !== r; ) {
                    if (((i = v0(r)), null === i)) return xs;
                    if ((t++, (r = r[os]), -1 !== i.injectorIndex)) return i.injectorIndex | (t << 16);
                }
                return xs;
            }
            function dp(n, e, t) {
                !(function Rk(n, e, t) {
                    let i;
                    'string' == typeof t ? (i = t.charCodeAt(0) || 0) : t.hasOwnProperty(Ga) && (i = t[Ga]),
                        null == i && (i = t[Ga] = Mk++);
                    const r = i & d0;
                    e.data[n + (r >> h0)] |= 1 << r;
                })(n, e, t);
            }
            function m0(n, e, t) {
                if (t & ye.Optional || void 0 !== n) return n;
                Nm();
            }
            function p0(n, e, t, i) {
                if ((t & ye.Optional && void 0 === i && (i = null), !(t & (ye.Self | ye.Host)))) {
                    const r = n[Nt],
                        o = rn(void 0);
                    try {
                        return r ? r.get(e, i, t & ye.Optional) : UE(e, i, t & ye.Optional);
                    } finally {
                        rn(o);
                    }
                }
                return m0(i, 0, t);
            }
            function g0(n, e, t, i = ye.Default, r) {
                if (null !== n) {
                    if (2048 & e[G] && !(i & ye.Self)) {
                        const s = (function Fk(n, e, t, i, r) {
                            let o = n,
                                s = e;
                            for (; null !== o && null !== s && 2048 & s[G] && !(512 & s[G]); ) {
                                const a = _0(o, s, t, i | ye.Self, mi);
                                if (a !== mi) return a;
                                let l = o.parent;
                                if (!l) {
                                    const c = s[cE];
                                    if (c) {
                                        const u = c.get(t, mi, i);
                                        if (u !== mi) return u;
                                    }
                                    (l = v0(s)), (s = s[os]);
                                }
                                o = l;
                            }
                            return r;
                        })(n, e, t, i, mi);
                        if (s !== mi) return s;
                    }
                    const o = _0(n, e, t, i, mi);
                    if (o !== mi) return o;
                }
                return p0(e, t, i, r);
            }
            function _0(n, e, t, i, r) {
                const o = (function Nk(n) {
                    if ('string' == typeof n) return n.charCodeAt(0) || 0;
                    const e = n.hasOwnProperty(Ga) ? n[Ga] : void 0;
                    return 'number' == typeof e ? (e >= 0 ? e & d0 : Pk) : e;
                })(t);
                if ('function' == typeof o) {
                    if (!DE(e, n, i)) return i & ye.Host ? m0(r, 0, i) : p0(e, t, i, r);
                    try {
                        let s;
                        if (((s = o(i)), null != s || i & ye.Optional)) return s;
                        Nm();
                    } finally {
                        TE();
                    }
                } else if ('number' == typeof o) {
                    let s = null,
                        a = f0(n, e),
                        l = xs,
                        c = i & ye.Host ? e[Je][Ot] : null;
                    for (
                        (-1 === a || i & ye.SkipSelf) &&
                        ((l = -1 === a ? Fu(n, e) : e[a + 8]),
                        l !== xs && b0(i, !1) ? ((s = e[O]), (a = cl(l)), (e = ul(l, e))) : (a = -1));
                        -1 !== a;

                    ) {
                        const u = e[O];
                        if (y0(o, a, u.data)) {
                            const d = Ok(a, e, t, s, i, c);
                            if (d !== mi) return d;
                        }
                        (l = e[a + 8]),
                            l !== xs && b0(i, e[O].data[a + 8] === c) && y0(o, a, e) ? ((s = u), (a = cl(l)), (e = ul(l, e))) : (a = -1);
                    }
                }
                return r;
            }
            function Ok(n, e, t, i, r, o) {
                const s = e[O],
                    a = s.data[n + 8],
                    u = Lu(a, s, t, null == i ? ro(a) && cp : i != s && 0 != (3 & a.type), r & ye.Host && o === a);
                return null !== u ? uo(e, s, u, a) : mi;
            }
            function Lu(n, e, t, i, r) {
                const o = n.providerIndexes,
                    s = e.data,
                    a = 1048575 & o,
                    l = n.directiveStart,
                    u = o >> 20,
                    h = r ? a + u : n.directiveEnd;
                for (let f = i ? a : a + u; f < h; f++) {
                    const m = s[f];
                    if ((f < l && t === m) || (f >= l && m.type === t)) return f;
                }
                if (r) {
                    const f = s[l];
                    if (f && $n(f) && f.type === t) return l;
                }
                return null;
            }
            function uo(n, e, t, i) {
                let r = n[t];
                const o = e.data;
                if (
                    (function Dk(n) {
                        return n instanceof ll;
                    })(r)
                ) {
                    const s = r;
                    s.resolving &&
                        (function OP(n, e) {
                            throw (e && e.join(' > '), new S(-200, n));
                        })(
                            (function Ce(n) {
                                return 'function' == typeof n
                                    ? n.name || n.toString()
                                    : 'object' == typeof n && null != n && 'function' == typeof n.type
                                      ? n.type.name || n.type.toString()
                                      : se(n);
                            })(o[t]),
                        );
                    const a = Pu(s.canSeeViewProviders);
                    s.resolving = !0;
                    const c = s.injectImpl ? rn(s.injectImpl) : null;
                    DE(n, i, ye.Default);
                    try {
                        (r = n[t] = s.factory(void 0, o, n, i)),
                            e.firstCreatePass &&
                                t >= i.directiveStart &&
                                (function wk(n, e, t) {
                                    const { ngOnChanges: i, ngOnInit: r, ngDoCheck: o } = e.type.prototype;
                                    if (i) {
                                        const s = s0(e);
                                        (t.preOrderHooks ??= []).push(n, s), (t.preOrderCheckHooks ??= []).push(n, s);
                                    }
                                    r && (t.preOrderHooks ??= []).push(0 - n, r),
                                        o && ((t.preOrderHooks ??= []).push(n, o), (t.preOrderCheckHooks ??= []).push(n, o));
                                })(t, o[t], e);
                    } finally {
                        null !== c && rn(c), Pu(a), (s.resolving = !1), TE();
                    }
                }
                return r;
            }
            function y0(n, e, t) {
                return !!(t[e + (n >> h0)] & (1 << n));
            }
            function b0(n, e) {
                return !(n & ye.Self || (n & ye.Host && e));
            }
            class vt {
                constructor(e, t) {
                    (this._tNode = e), (this._lView = t);
                }
                get(e, t, i) {
                    return g0(this._tNode, this._lView, e, yu(i), t);
                }
            }
            function Pk() {
                return new vt(Ne(), C());
            }
            function v0(n) {
                const e = n[O],
                    t = e.type;
                return 2 === t ? e.declTNode : 1 === t ? n[Ot] : null;
            }
            function I0(n, e = null, t = null, i) {
                const r = (function x0(n, e = null, t = null, i, r = new Set()) {
                    const o = [t || we, JP(n)];
                    return (i = i || ('object' == typeof n ? void 0 : _t(n))), new Cs(o, e || Tu(), i || null, r);
                })(n, e, t, i);
                return r.resolveInjectorInitializers(), r;
            }
            let Mt = (() => {
                class n {
                    static #e = (this.THROW_IF_NOT_FOUND = nl);
                    static #t = (this.NULL = new Iu());
                    static create(t, i) {
                        if (Array.isArray(t)) return I0({ name: '' }, i, t, '');
                        {
                            const r = t.name ?? '';
                            return I0({ name: r }, t.parent, t.providers, r);
                        }
                    }
                    static #n = (this.ɵprov = j({ token: n, providedIn: 'any', factory: () => T(ZE) }));
                    static #i = (this.__NG_ELEMENT_ID__ = -1);
                }
                return n;
            })();
            function mp(n) {
                return n.ngOriginalError;
            }
            class Mn {
                constructor() {
                    this._console = console;
                }
                handleError(e) {
                    const t = this._findOriginalError(e);
                    this._console.error('ERROR', e), t && this._console.error('ORIGINAL ERROR', t);
                }
                _findOriginalError(e) {
                    let t = e && mp(e);
                    for (; t && mp(t); ) t = mp(t);
                    return t || null;
                }
            }
            const T0 = new L('', { providedIn: 'root', factory: () => $(Mn).handleError.bind(void 0) }),
                R0 = new L('', { providedIn: 'root', factory: () => !1 });
            let Hu;
            function Ms(n) {
                return (
                    (function pp() {
                        if (void 0 === Hu && ((Hu = null), Me.trustedTypes))
                            try {
                                Hu = Me.trustedTypes.createPolicy('angular', {
                                    createHTML: (n) => n,
                                    createScript: (n) => n,
                                    createScriptURL: (n) => n,
                                });
                            } catch {}
                        return Hu;
                    })()?.createHTML(n) || n
                );
            }
            class ho {
                constructor(e) {
                    this.changingThisBreaksApplicationSecurity = e;
                }
                toString() {
                    return `SafeValue must use [property]=binding: ${this.changingThisBreaksApplicationSecurity} (see ${Wv})`;
                }
            }
            class $k extends ho {
                getTypeName() {
                    return 'HTML';
                }
            }
            class Yk extends ho {
                getTypeName() {
                    return 'Style';
                }
            }
            class qk extends ho {
                getTypeName() {
                    return 'Script';
                }
            }
            class Xk extends ho {
                getTypeName() {
                    return 'URL';
                }
            }
            class Kk extends ho {
                getTypeName() {
                    return 'ResourceURL';
                }
            }
            function bn(n) {
                return n instanceof ho ? n.changingThisBreaksApplicationSecurity : n;
            }
            function pi(n, e) {
                const t = (function Zk(n) {
                    return (n instanceof ho && n.getTypeName()) || null;
                })(n);
                if (null != t && t !== e) {
                    if ('ResourceURL' === t && 'URL' === e) return !0;
                    throw new Error(`Required a safe ${e}, got a ${t} (see ${Wv})`);
                }
                return t === e;
            }
            class r1 {
                constructor(e) {
                    this.inertDocumentHelper = e;
                }
                getInertBodyElement(e) {
                    e = '<body><remove></remove>' + e;
                    try {
                        const t = new window.DOMParser().parseFromString(Ms(e), 'text/html').body;
                        return null === t ? this.inertDocumentHelper.getInertBodyElement(e) : (t.removeChild(t.firstChild), t);
                    } catch {
                        return null;
                    }
                }
            }
            class o1 {
                constructor(e) {
                    (this.defaultDoc = e), (this.inertDocument = this.defaultDoc.implementation.createHTMLDocument('sanitization-inert'));
                }
                getInertBodyElement(e) {
                    const t = this.inertDocument.createElement('template');
                    return (t.innerHTML = Ms(e)), t;
                }
            }
            const a1 = /^(?!javascript:)(?:[a-z0-9+.-]+:|[^&:\/?#]*(?:[\/?#]|$))/i;
            function zu(n) {
                return (n = String(n)).match(a1) ? n : 'unsafe:' + n;
            }
            function Vi(n) {
                const e = {};
                for (const t of n.split(',')) e[t] = !0;
                return e;
            }
            function dl(...n) {
                const e = {};
                for (const t of n) for (const i in t) t.hasOwnProperty(i) && (e[i] = !0);
                return e;
            }
            const k0 = Vi('area,br,col,hr,img,wbr'),
                F0 = Vi('colgroup,dd,dt,li,p,tbody,td,tfoot,th,thead,tr'),
                L0 = Vi('rp,rt'),
                _p = dl(
                    k0,
                    dl(
                        F0,
                        Vi(
                            'address,article,aside,blockquote,caption,center,del,details,dialog,dir,div,dl,figure,figcaption,footer,h1,h2,h3,h4,h5,h6,header,hgroup,hr,ins,main,map,menu,nav,ol,pre,section,summary,table,ul',
                        ),
                    ),
                    dl(
                        L0,
                        Vi(
                            'a,abbr,acronym,audio,b,bdi,bdo,big,br,cite,code,del,dfn,em,font,i,img,ins,kbd,label,map,mark,picture,q,ruby,rp,rt,s,samp,small,source,span,strike,strong,sub,sup,time,track,tt,u,var,video',
                        ),
                    ),
                    dl(L0, F0),
                ),
                yp = Vi('background,cite,href,itemtype,longdesc,poster,src,xlink:href'),
                B0 = dl(
                    yp,
                    Vi(
                        'abbr,accesskey,align,alt,autoplay,axis,bgcolor,border,cellpadding,cellspacing,class,clear,color,cols,colspan,compact,controls,coords,datetime,default,dir,download,face,headers,height,hidden,hreflang,hspace,ismap,itemscope,itemprop,kind,label,lang,language,loop,media,muted,nohref,nowrap,open,preload,rel,rev,role,rows,rowspan,rules,scope,scrolling,shape,size,sizes,span,srclang,srcset,start,summary,tabindex,target,title,translate,type,usemap,valign,value,vspace,width',
                    ),
                    Vi(
                        'aria-activedescendant,aria-atomic,aria-autocomplete,aria-busy,aria-checked,aria-colcount,aria-colindex,aria-colspan,aria-controls,aria-current,aria-describedby,aria-details,aria-disabled,aria-dropeffect,aria-errormessage,aria-expanded,aria-flowto,aria-grabbed,aria-haspopup,aria-hidden,aria-invalid,aria-keyshortcuts,aria-label,aria-labelledby,aria-level,aria-live,aria-modal,aria-multiline,aria-multiselectable,aria-orientation,aria-owns,aria-placeholder,aria-posinset,aria-pressed,aria-readonly,aria-relevant,aria-required,aria-roledescription,aria-rowcount,aria-rowindex,aria-rowspan,aria-selected,aria-setsize,aria-sort,aria-valuemax,aria-valuemin,aria-valuenow,aria-valuetext',
                    ),
                ),
                l1 = Vi('script,style,template');
            class c1 {
                constructor() {
                    (this.sanitizedSomething = !1), (this.buf = []);
                }
                sanitizeChildren(e) {
                    let t = e.firstChild,
                        i = !0;
                    for (; t; )
                        if (
                            (t.nodeType === Node.ELEMENT_NODE
                                ? (i = this.startElement(t))
                                : t.nodeType === Node.TEXT_NODE
                                  ? this.chars(t.nodeValue)
                                  : (this.sanitizedSomething = !0),
                            i && t.firstChild)
                        )
                            t = t.firstChild;
                        else
                            for (; t; ) {
                                t.nodeType === Node.ELEMENT_NODE && this.endElement(t);
                                let r = this.checkClobberedElement(t, t.nextSibling);
                                if (r) {
                                    t = r;
                                    break;
                                }
                                t = this.checkClobberedElement(t, t.parentNode);
                            }
                    return this.buf.join('');
                }
                startElement(e) {
                    const t = e.nodeName.toLowerCase();
                    if (!_p.hasOwnProperty(t)) return (this.sanitizedSomething = !0), !l1.hasOwnProperty(t);
                    this.buf.push('<'), this.buf.push(t);
                    const i = e.attributes;
                    for (let r = 0; r < i.length; r++) {
                        const o = i.item(r),
                            s = o.name,
                            a = s.toLowerCase();
                        if (!B0.hasOwnProperty(a)) {
                            this.sanitizedSomething = !0;
                            continue;
                        }
                        let l = o.value;
                        yp[a] && (l = zu(l)), this.buf.push(' ', s, '="', j0(l), '"');
                    }
                    return this.buf.push('>'), !0;
                }
                endElement(e) {
                    const t = e.nodeName.toLowerCase();
                    _p.hasOwnProperty(t) && !k0.hasOwnProperty(t) && (this.buf.push('</'), this.buf.push(t), this.buf.push('>'));
                }
                chars(e) {
                    this.buf.push(j0(e));
                }
                checkClobberedElement(e, t) {
                    if (t && (e.compareDocumentPosition(t) & Node.DOCUMENT_POSITION_CONTAINED_BY) === Node.DOCUMENT_POSITION_CONTAINED_BY)
                        throw new Error(`Failed to sanitize html because the element is clobbered: ${e.outerHTML}`);
                    return t;
                }
            }
            const u1 = /[\uD800-\uDBFF][\uDC00-\uDFFF]/g,
                d1 = /([^\#-~ |!])/g;
            function j0(n) {
                return n
                    .replace(/&/g, '&amp;')
                    .replace(u1, function (e) {
                        return '&#' + (1024 * (e.charCodeAt(0) - 55296) + (e.charCodeAt(1) - 56320) + 65536) + ';';
                    })
                    .replace(d1, function (e) {
                        return '&#' + e.charCodeAt(0) + ';';
                    })
                    .replace(/</g, '&lt;')
                    .replace(/>/g, '&gt;');
            }
            let Gu;
            function V0(n, e) {
                let t = null;
                try {
                    Gu =
                        Gu ||
                        (function P0(n) {
                            const e = new o1(n);
                            return (function s1() {
                                try {
                                    return !!new window.DOMParser().parseFromString(Ms(''), 'text/html');
                                } catch {
                                    return !1;
                                }
                            })()
                                ? new r1(e)
                                : e;
                        })(n);
                    let i = e ? String(e) : '';
                    t = Gu.getInertBodyElement(i);
                    let r = 5,
                        o = i;
                    do {
                        if (0 === r) throw new Error('Failed to sanitize html because the input is unstable');
                        r--, (i = o), (o = t.innerHTML), (t = Gu.getInertBodyElement(i));
                    } while (i !== o);
                    return Ms(new c1().sanitizeChildren(bp(t) || t));
                } finally {
                    if (t) {
                        const i = bp(t) || t;
                        for (; i.firstChild; ) i.removeChild(i.firstChild);
                    }
                }
            }
            function bp(n) {
                return 'content' in n &&
                    (function h1(n) {
                        return n.nodeType === Node.ELEMENT_NODE && 'TEMPLATE' === n.nodeName;
                    })(n)
                    ? n.content
                    : null;
            }
            var Rt = (function (n) {
                return (
                    (n[(n.NONE = 0)] = 'NONE'),
                    (n[(n.HTML = 1)] = 'HTML'),
                    (n[(n.STYLE = 2)] = 'STYLE'),
                    (n[(n.SCRIPT = 3)] = 'SCRIPT'),
                    (n[(n.URL = 4)] = 'URL'),
                    (n[(n.RESOURCE_URL = 5)] = 'RESOURCE_URL'),
                    n
                );
            })(Rt || {});
            const vp = new Map();
            let S1 = 0;
            const wp = '__ngContext__';
            function Lt(n, e) {
                Pt(e)
                    ? ((n[wp] = e[qa]),
                      (function M1(n) {
                          vp.set(n[qa], n);
                      })(e))
                    : (n[wp] = e);
            }
            var Er = (function (n) {
                return (n[(n.Important = 1)] = 'Important'), (n[(n.DashCase = 2)] = 'DashCase'), n;
            })(Er || {});
            let xp;
            function Sp(n, e) {
                return xp(n, e);
            }
            function As(n, e, t, i, r) {
                if (null != i) {
                    let o,
                        s = !1;
                    kt(i) ? (o = i) : Pt(i) && ((s = !0), (i = i[Qe]));
                    const a = Fe(i);
                    0 === n && null !== t
                        ? null == r
                            ? aw(e, t, a)
                            : fo(e, t, a, r || null, !0)
                        : 1 === n && null !== t
                          ? fo(e, t, a, r || null, !0)
                          : 2 === n
                            ? (function Qu(n, e, t) {
                                  const i = Ku(n, e);
                                  i &&
                                      (function Z1(n, e, t, i) {
                                          n.removeChild(e, t, i);
                                      })(n, i, e, t);
                              })(e, a, s)
                            : 3 === n && e.destroyNode(a),
                        null != o &&
                            (function eF(n, e, t, i, r) {
                                const o = t[ui];
                                o !== Fe(t) && As(e, n, i, o, r);
                                for (let a = lt; a < t.length; a++) {
                                    const l = t[a];
                                    Ju(l[O], l, n, e, i, o);
                                }
                            })(e, n, o, t, r);
                }
            }
            function qu(n, e, t) {
                return n.createElement(e, t);
            }
            function rw(n, e) {
                Ju(n, e, e[re], 2, null, null);
            }
            function ow(n, e) {
                const t = n[as],
                    i = t.indexOf(e);
                t.splice(i, 1);
            }
            function ml(n, e) {
                if (n.length <= lt) return;
                const t = lt + e,
                    i = n[t];
                if (i) {
                    const r = i[Ya];
                    null !== r && r !== n && ow(r, i), e > 0 && (n[t - 1][Gn] = i[Gn]);
                    const o = cu(n, lt + e);
                    !(function G1(n, e) {
                        rw(n, e), (e[Qe] = null), (e[Ot] = null);
                    })(i[O], i);
                    const s = o[Fi];
                    null !== s && s.detachView(o[O]), (i[at] = null), (i[Gn] = null), (i[G] &= -129);
                }
                return i;
            }
            function Xu(n, e) {
                if (!(256 & e[G])) {
                    const t = e[re];
                    t.destroyNode && Ju(n, e, t, 3, null, null),
                        (function $1(n) {
                            let e = n[$a];
                            if (!e) return Mp(n[O], n);
                            for (; e; ) {
                                let t = null;
                                if (Pt(e)) t = e[$a];
                                else {
                                    const i = e[lt];
                                    i && (t = i);
                                }
                                if (!t) {
                                    for (; e && !e[Gn] && e !== n; ) Pt(e) && Mp(e[O], e), (e = e[at]);
                                    null === e && (e = n), Pt(e) && Mp(e[O], e), (t = e && e[Gn]);
                                }
                                e = t;
                            }
                        })(e);
                }
            }
            function Mp(n, e) {
                if (!(256 & e[G])) {
                    (e[G] &= -129),
                        (e[G] |= 256),
                        e[io] &&
                            (function he(n) {
                                if ((Ee(n), Le(n)))
                                    for (let e = 0; e < n.producerNode.length; e++) _e(n.producerNode[e], n.producerIndexOfThis[e]);
                                (n.producerNode.length = n.producerLastReadVersion.length = n.producerIndexOfThis.length = 0),
                                    n.liveConsumerNode && (n.liveConsumerNode.length = n.liveConsumerIndexOfThis.length = 0);
                            })(e[io]),
                        (function K1(n, e) {
                            let t;
                            if (null != n && null != (t = n.destroyHooks))
                                for (let i = 0; i < t.length; i += 2) {
                                    const r = e[t[i]];
                                    if (!(r instanceof ll)) {
                                        const o = t[i + 1];
                                        if (Array.isArray(o))
                                            for (let s = 0; s < o.length; s += 2) {
                                                const a = r[o[s]],
                                                    l = o[s + 1];
                                                fi(4, a, l);
                                                try {
                                                    l.call(a);
                                                } finally {
                                                    fi(5, a, l);
                                                }
                                            }
                                        else {
                                            fi(4, r, o);
                                            try {
                                                o.call(r);
                                            } finally {
                                                fi(5, r, o);
                                            }
                                        }
                                    }
                                }
                        })(n, e),
                        (function X1(n, e) {
                            const t = n.cleanup,
                                i = e[rs];
                            if (null !== t)
                                for (let o = 0; o < t.length - 1; o += 2)
                                    if ('string' == typeof t[o]) {
                                        const s = t[o + 3];
                                        s >= 0 ? i[s]() : i[-s].unsubscribe(), (o += 2);
                                    } else t[o].call(i[t[o + 1]]);
                            null !== i && (e[rs] = null);
                            const r = e[pr];
                            if (null !== r) {
                                e[pr] = null;
                                for (let o = 0; o < r.length; o++) (0, r[o])();
                            }
                        })(n, e),
                        1 === e[O].type && e[re].destroy();
                    const t = e[Ya];
                    if (null !== t && kt(e[at])) {
                        t !== e[at] && ow(t, e);
                        const i = e[Fi];
                        null !== i && i.detachView(n);
                    }
                    !(function R1(n) {
                        vp.delete(n[qa]);
                    })(e);
                }
            }
            function Rp(n, e, t) {
                return (function sw(n, e, t) {
                    let i = e;
                    for (; null !== i && 40 & i.type; ) i = (e = i).parent;
                    if (null === i) return t[Qe];
                    {
                        const { componentOffset: r } = i;
                        if (r > -1) {
                            const { encapsulation: o } = n.data[i.directiveStart + r];
                            if (o === Un.None || o === Un.Emulated) return null;
                        }
                        return Gt(i, t);
                    }
                })(n, e.parent, t);
            }
            function fo(n, e, t, i, r) {
                n.insertBefore(e, t, i, r);
            }
            function aw(n, e, t) {
                n.appendChild(e, t);
            }
            function lw(n, e, t, i, r) {
                null !== i ? fo(n, e, t, i, r) : aw(n, e, t);
            }
            function Ku(n, e) {
                return n.parentNode(e);
            }
            function cw(n, e, t) {
                return dw(n, e, t);
            }
            let Ap,
                dw = function uw(n, e, t) {
                    return 40 & n.type ? Gt(n, t) : null;
                };
            function Zu(n, e, t, i) {
                const r = Rp(n, i, e),
                    o = e[re],
                    a = cw(i.parent || e[Ot], i, e);
                if (null != r)
                    if (Array.isArray(t)) for (let l = 0; l < t.length; l++) lw(o, r, t[l], a, !1);
                    else lw(o, r, t, a, !1);
                void 0 !== Ap && Ap(o, i, e, t, r);
            }
            function pl(n, e) {
                if (null !== e) {
                    const t = e.type;
                    if (3 & t) return Gt(e, n);
                    if (4 & t) return Op(-1, n[e.index]);
                    if (8 & t) {
                        const i = e.child;
                        if (null !== i) return pl(n, i);
                        {
                            const r = n[e.index];
                            return kt(r) ? Op(-1, r) : Fe(r);
                        }
                    }
                    if (32 & t) return Sp(e, n)() || Fe(n[e.index]);
                    {
                        const i = fw(n, e);
                        return null !== i ? (Array.isArray(i) ? i[0] : pl(oo(n[Je]), i)) : pl(n, e.next);
                    }
                }
                return null;
            }
            function fw(n, e) {
                return null !== e ? n[Je][Ot].projection[e.projection] : null;
            }
            function Op(n, e) {
                const t = lt + n + 1;
                if (t < e.length) {
                    const i = e[t],
                        r = i[O].firstChild;
                    if (null !== r) return pl(i, r);
                }
                return e[ui];
            }
            function Np(n, e, t, i, r, o, s) {
                for (; null != t; ) {
                    const a = i[t.index],
                        l = t.type;
                    if ((s && 0 === e && (a && Lt(Fe(a), i), (t.flags |= 2)), 32 != (32 & t.flags)))
                        if (8 & l) Np(n, e, t.child, i, r, o, !1), As(e, n, r, a, o);
                        else if (32 & l) {
                            const c = Sp(t, i);
                            let u;
                            for (; (u = c()); ) As(e, n, r, u, o);
                            As(e, n, r, a, o);
                        } else 16 & l ? pw(n, e, i, t, r, o) : As(e, n, r, a, o);
                    t = s ? t.projectionNext : t.next;
                }
            }
            function Ju(n, e, t, i, r, o) {
                Np(t, i, n.firstChild, e, r, o, !1);
            }
            function pw(n, e, t, i, r, o) {
                const s = t[Je],
                    l = s[Ot].projection[i.projection];
                if (Array.isArray(l)) for (let c = 0; c < l.length; c++) As(e, n, r, l[c], o);
                else {
                    let c = l;
                    const u = s[at];
                    du(i) && (c.flags |= 128), Np(n, e, c, u, r, o, !0);
                }
            }
            function gw(n, e, t) {
                '' === t ? n.removeAttribute(e, 'class') : n.setAttribute(e, 'class', t);
            }
            function _w(n, e, t) {
                const { mergedAttrs: i, classes: r, styles: o } = t;
                null !== i && Jf(n, e, i),
                    null !== r && gw(n, e, r),
                    null !== o &&
                        (function nF(n, e, t) {
                            n.setAttribute(e, 'style', t);
                        })(n, e, o);
            }
            const ae = {};
            function Os(n = 1) {
                yw(ge(), C(), Ft() + n, !1);
            }
            function yw(n, e, t, i) {
                if (!i)
                    if (3 == (3 & e[G])) {
                        const o = n.preOrderCheckHooks;
                        null !== o && Ou(e, o, t);
                    } else {
                        const o = n.preOrderHooks;
                        null !== o && Nu(e, o, 0, t);
                    }
                so(t);
            }
            function P(n, e = ye.Default) {
                const t = C();
                return null === t ? T(n, e) : g0(Ne(), t, Z(n), e);
            }
            function vw(n, e, t, i, r, o) {
                const s = Ze(null);
                try {
                    let a = null;
                    r & st.SignalBased && (a = e[i][Tn]),
                        null !== a && void 0 !== a.transformFn && (o = a.transformFn(o)),
                        r & st.HasDecoratorInputTransform && (o = n.inputTransforms[i].call(e, o)),
                        null !== n.setInput ? n.setInput(e, a, o, t, i) : o0(e, a, i, o);
                } finally {
                    Ze(s);
                }
            }
            function ed(n, e, t, i, r, o, s, a, l, c, u) {
                const d = e.blueprint.slice();
                return (
                    (d[Qe] = r),
                    (d[G] = 204 | i),
                    (null !== c || (n && 2048 & n[G])) && (d[G] |= 2048),
                    gE(d),
                    (d[at] = d[os] = n),
                    (d[ze] = t),
                    (d[ki] = s || (n && n[ki])),
                    (d[re] = a || (n && n[re])),
                    (d[Nt] = l || (n && n[Nt]) || null),
                    (d[Ot] = o),
                    (d[qa] = (function T1() {
                        return S1++;
                    })()),
                    (d[Wn] = u),
                    (d[cE] = c),
                    (d[Je] = 2 == e.type ? n[Je] : d),
                    d
                );
            }
            function Ns(n, e, t, i, r) {
                let o = n.data[e];
                if (null === o)
                    (o = (function Pp(n, e, t, i, r) {
                        const o = vE(),
                            s = fm(),
                            l = (n.data[e] = (function uF(n, e, t, i, r, o) {
                                let s = e ? e.injectorIndex : -1,
                                    a = 0;
                                return (
                                    cs() && (a |= 128),
                                    {
                                        type: t,
                                        index: i,
                                        insertBeforeIndex: null,
                                        injectorIndex: s,
                                        directiveStart: -1,
                                        directiveEnd: -1,
                                        directiveStylingLast: -1,
                                        componentOffset: -1,
                                        propertyBindings: null,
                                        flags: a,
                                        providerIndexes: 0,
                                        value: r,
                                        attrs: o,
                                        mergedAttrs: null,
                                        localNames: null,
                                        initialInputs: void 0,
                                        inputs: null,
                                        outputs: null,
                                        tView: null,
                                        next: null,
                                        prev: null,
                                        projectionNext: null,
                                        child: null,
                                        parent: e,
                                        projection: null,
                                        styles: null,
                                        stylesWithoutHost: null,
                                        residualStyles: void 0,
                                        classes: null,
                                        classesWithoutHost: null,
                                        residualClasses: void 0,
                                        classBindings: 0,
                                        styleBindings: 0,
                                    }
                                );
                            })(0, s ? o : o && o.parent, t, e, i, r));
                        return (
                            null === n.firstChild && (n.firstChild = l),
                            null !== o &&
                                (s
                                    ? null == o.child && null !== l.parent && (o.child = l)
                                    : null === o.next && ((o.next = l), (l.prev = o))),
                            l
                        );
                    })(n, e, t, i, r)),
                        (function uP() {
                            return te.lFrame.inI18n;
                        })() && (o.flags |= 32);
                else if (64 & o.type) {
                    (o.type = t), (o.value = i), (o.attrs = r);
                    const s = (function Ja() {
                        const n = te.lFrame,
                            e = n.currentTNode;
                        return n.isParent ? e : e.parent;
                    })();
                    o.injectorIndex = null === s ? -1 : s.injectorIndex;
                }
                return hi(o, !0), o;
            }
            function gl(n, e, t, i) {
                if (0 === t) return -1;
                const r = e.length;
                for (let o = 0; o < t; o++) e.push(i), n.blueprint.push(i), n.data.push(null);
                return r;
            }
            function Ew(n, e, t, i, r) {
                const o = Ft(),
                    s = 2 & i;
                try {
                    so(-1), s && e.length > oe && yw(n, e, oe, !1), fi(s ? 2 : 0, r), t(i, r);
                } finally {
                    so(o), fi(s ? 3 : 1, r);
                }
            }
            function kp(n, e, t) {
                if (nm(e)) {
                    const i = Ze(null);
                    try {
                        const o = e.directiveEnd;
                        for (let s = e.directiveStart; s < o; s++) {
                            const a = n.data[s];
                            a.contentQueries && a.contentQueries(1, t[s], s);
                        }
                    } finally {
                        Ze(i);
                    }
                }
            }
            function Fp(n, e, t) {
                bE() &&
                    ((function _F(n, e, t, i) {
                        const r = t.directiveStart,
                            o = t.directiveEnd;
                        ro(t) &&
                            (function DF(n, e, t) {
                                const i = Gt(e, n),
                                    r = ww(t);
                                let s = 16;
                                t.signals ? (s = 4096) : t.onPush && (s = 64);
                                const a = td(
                                    n,
                                    ed(n, r, null, s, i, e, null, n[ki].rendererFactory.createRenderer(i, t), null, null, null),
                                );
                                n[e.index] = a;
                            })(e, t, n.data[r + t.componentOffset]),
                            n.firstCreatePass || ku(t, e),
                            Lt(i, e);
                        const s = t.initialInputs;
                        for (let a = r; a < o; a++) {
                            const l = n.data[a],
                                c = uo(e, n, a, t);
                            Lt(c, e), null !== s && IF(0, a - r, c, l, 0, s), $n(l) && (_n(t.index, e)[ze] = uo(e, n, a, t));
                        }
                    })(n, e, t, Gt(t, e)),
                    64 == (64 & t.flags) && Sw(n, e, t));
            }
            function Lp(n, e, t = Gt) {
                const i = e.localNames;
                if (null !== i) {
                    let r = e.index + 1;
                    for (let o = 0; o < i.length; o += 2) {
                        const s = i[o + 1],
                            a = -1 === s ? t(e, n) : n[s];
                        n[r++] = a;
                    }
                }
            }
            function ww(n) {
                const e = n.tView;
                return null === e || e.incompleteFirstPass
                    ? (n.tView = Bp(
                          1,
                          null,
                          n.template,
                          n.decls,
                          n.vars,
                          n.directiveDefs,
                          n.pipeDefs,
                          n.viewQuery,
                          n.schemas,
                          n.consts,
                          n.id,
                      ))
                    : e;
            }
            function Bp(n, e, t, i, r, o, s, a, l, c, u) {
                const d = oe + i,
                    h = d + r,
                    f = (function rF(n, e) {
                        const t = [];
                        for (let i = 0; i < e; i++) t.push(i < n ? null : ae);
                        return t;
                    })(d, h),
                    m = 'function' == typeof c ? c() : c;
                return (f[O] = {
                    type: n,
                    blueprint: f,
                    template: t,
                    queries: null,
                    viewQuery: a,
                    declTNode: e,
                    data: f.slice().fill(null, d),
                    bindingStartIndex: d,
                    expandoStartIndex: h,
                    hostBindingOpCodes: null,
                    firstCreatePass: !0,
                    firstUpdatePass: !0,
                    staticViewQueries: !1,
                    staticContentQueries: !1,
                    preOrderHooks: null,
                    preOrderCheckHooks: null,
                    contentHooks: null,
                    contentCheckHooks: null,
                    viewHooks: null,
                    viewCheckHooks: null,
                    destroyHooks: null,
                    cleanup: null,
                    contentQueries: null,
                    components: null,
                    directiveRegistry: 'function' == typeof o ? o() : o,
                    pipeRegistry: 'function' == typeof s ? s() : s,
                    firstChild: null,
                    schemas: l,
                    consts: m,
                    incompleteFirstPass: !1,
                    ssrId: u,
                });
            }
            let Cw = () => null;
            function Dw(n, e, t, i, r) {
                for (let o in e) {
                    if (!e.hasOwnProperty(o)) continue;
                    const s = e[o];
                    if (void 0 === s) continue;
                    i ??= {};
                    let a,
                        l = st.None;
                    Array.isArray(s) ? ((a = s[0]), (l = s[1])) : (a = s);
                    let c = o;
                    if (null !== r) {
                        if (!r.hasOwnProperty(o)) continue;
                        c = r[o];
                    }
                    0 === n ? Iw(i, t, c, a, l) : Iw(i, t, c, a);
                }
                return i;
            }
            function Iw(n, e, t, i, r) {
                let o;
                n.hasOwnProperty(t) ? (o = n[t]).push(e, i) : (o = n[t] = [e, i]), void 0 !== r && o.push(r);
            }
            function sn(n, e, t, i, r, o, s, a) {
                const l = Gt(e, t);
                let u,
                    c = e.inputs;
                !a && null != c && (u = c[i])
                    ? (zp(n, t, u, i, r),
                      ro(e) &&
                          (function fF(n, e) {
                              const t = _n(e, n);
                              16 & t[G] || (t[G] |= 64);
                          })(t, e.index))
                    : 3 & e.type &&
                      ((i = (function hF(n) {
                          return 'class' === n
                              ? 'className'
                              : 'for' === n
                                ? 'htmlFor'
                                : 'formaction' === n
                                  ? 'formAction'
                                  : 'innerHtml' === n
                                    ? 'innerHTML'
                                    : 'readonly' === n
                                      ? 'readOnly'
                                      : 'tabindex' === n
                                        ? 'tabIndex'
                                        : n;
                      })(i)),
                      (r = null != s ? s(r, e.value || '', i) : r),
                      o.setProperty(l, i, r));
            }
            function jp(n, e, t, i) {
                if (bE()) {
                    const r = null === i ? null : { '': -1 },
                        o = (function bF(n, e) {
                            const t = n.directiveRegistry;
                            let i = null,
                                r = null;
                            if (t)
                                for (let o = 0; o < t.length; o++) {
                                    const s = t[o];
                                    if (nE(e, s.selectors, !1))
                                        if ((i || (i = []), $n(s)))
                                            if (null !== s.findHostDirectiveDefs) {
                                                const a = [];
                                                (r = r || new Map()),
                                                    s.findHostDirectiveDefs(s, a, r),
                                                    i.unshift(...a, s),
                                                    Vp(n, e, a.length);
                                            } else i.unshift(s), Vp(n, e, 0);
                                        else (r = r || new Map()), s.findHostDirectiveDefs?.(s, i, r), i.push(s);
                                }
                            return null === i ? null : [i, r];
                        })(n, t);
                    let s, a;
                    null === o ? (s = a = null) : ([s, a] = o),
                        null !== s && xw(n, e, t, s, r, a),
                        r &&
                            (function vF(n, e, t) {
                                if (e) {
                                    const i = (n.localNames = []);
                                    for (let r = 0; r < e.length; r += 2) {
                                        const o = t[e[r + 1]];
                                        if (null == o) throw new S(-301, !1);
                                        i.push(e[r], o);
                                    }
                                }
                            })(t, i, r);
                }
                t.mergedAttrs = Wa(t.mergedAttrs, t.attrs);
            }
            function xw(n, e, t, i, r, o) {
                for (let c = 0; c < i.length; c++) dp(ku(t, e), n, i[c].type);
                !(function wF(n, e, t) {
                    (n.flags |= 1), (n.directiveStart = e), (n.directiveEnd = e + t), (n.providerIndexes = e);
                })(t, n.data.length, i.length);
                for (let c = 0; c < i.length; c++) {
                    const u = i[c];
                    u.providersResolver && u.providersResolver(u);
                }
                let s = !1,
                    a = !1,
                    l = gl(n, e, i.length, null);
                for (let c = 0; c < i.length; c++) {
                    const u = i[c];
                    (t.mergedAttrs = Wa(t.mergedAttrs, u.hostAttrs)),
                        CF(n, t, e, l, u),
                        EF(l, u, r),
                        null !== u.contentQueries && (t.flags |= 4),
                        (null !== u.hostBindings || null !== u.hostAttrs || 0 !== u.hostVars) && (t.flags |= 64);
                    const d = u.type.prototype;
                    !s && (d.ngOnChanges || d.ngOnInit || d.ngDoCheck) && ((n.preOrderHooks ??= []).push(t.index), (s = !0)),
                        !a && (d.ngOnChanges || d.ngDoCheck) && ((n.preOrderCheckHooks ??= []).push(t.index), (a = !0)),
                        l++;
                }
                !(function dF(n, e, t) {
                    const r = e.directiveEnd,
                        o = n.data,
                        s = e.attrs,
                        a = [];
                    let l = null,
                        c = null;
                    for (let u = e.directiveStart; u < r; u++) {
                        const d = o[u],
                            h = t ? t.get(d) : null,
                            m = h ? h.outputs : null;
                        (l = Dw(0, d.inputs, u, l, h ? h.inputs : null)), (c = Dw(1, d.outputs, u, c, m));
                        const p = null === l || null === s || tE(e) ? null : xF(l, u, s);
                        a.push(p);
                    }
                    null !== l && (l.hasOwnProperty('class') && (e.flags |= 8), l.hasOwnProperty('style') && (e.flags |= 16)),
                        (e.initialInputs = a),
                        (e.inputs = l),
                        (e.outputs = c);
                })(n, t, o);
            }
            function Sw(n, e, t) {
                const i = t.directiveStart,
                    r = t.directiveEnd,
                    o = t.index,
                    s = (function hP() {
                        return te.lFrame.currentDirectiveIndex;
                    })();
                try {
                    so(o);
                    for (let a = i; a < r; a++) {
                        const l = n.data[a],
                            c = e[a];
                        pm(a), (null !== l.hostBindings || 0 !== l.hostVars || null !== l.hostAttrs) && yF(l, c);
                    }
                } finally {
                    so(-1), pm(s);
                }
            }
            function yF(n, e) {
                null !== n.hostBindings && n.hostBindings(1, e);
            }
            function Vp(n, e, t) {
                (e.componentOffset = t), (n.components ??= []).push(e.index);
            }
            function EF(n, e, t) {
                if (t) {
                    if (e.exportAs) for (let i = 0; i < e.exportAs.length; i++) t[e.exportAs[i]] = n;
                    $n(e) && (t[''] = n);
                }
            }
            function CF(n, e, t, i, r) {
                n.data[i] = r;
                const o = r.factory || (r.factory = lo(r.type)),
                    s = new ll(o, $n(r), P);
                (n.blueprint[i] = s),
                    (t[i] = s),
                    (function pF(n, e, t, i, r) {
                        const o = r.hostBindings;
                        if (o) {
                            let s = n.hostBindingOpCodes;
                            null === s && (s = n.hostBindingOpCodes = []);
                            const a = ~e.index;
                            (function gF(n) {
                                let e = n.length;
                                for (; e > 0; ) {
                                    const t = n[--e];
                                    if ('number' == typeof t && t < 0) return t;
                                }
                                return 0;
                            })(s) != a && s.push(a),
                                s.push(t, i, o);
                        }
                    })(n, e, i, gl(n, t, r.hostVars, ae), r);
            }
            function gi(n, e, t, i, r, o) {
                const s = Gt(n, e);
                !(function Hp(n, e, t, i, r, o, s) {
                    if (null == o) n.removeAttribute(e, r, t);
                    else {
                        const a = null == s ? se(o) : s(o, i || '', r);
                        n.setAttribute(e, r, a, t);
                    }
                })(e[re], s, o, n.value, t, i, r);
            }
            function IF(n, e, t, i, r, o) {
                const s = o[e];
                if (null !== s) for (let a = 0; a < s.length; ) vw(i, t, s[a++], s[a++], s[a++], s[a++]);
            }
            function xF(n, e, t) {
                let i = null,
                    r = 0;
                for (; r < t.length; ) {
                    const o = t[r];
                    if (0 !== o)
                        if (5 !== o) {
                            if ('number' == typeof o) break;
                            if (n.hasOwnProperty(o)) {
                                null === i && (i = []);
                                const s = n[o];
                                for (let a = 0; a < s.length; a += 3)
                                    if (s[a] === e) {
                                        i.push(o, s[a + 1], s[a + 2], t[r + 1]);
                                        break;
                                    }
                            }
                            r += 2;
                        } else r += 2;
                    else r += 4;
                }
                return i;
            }
            function Tw(n, e, t, i) {
                return [n, !0, 0, e, null, i, null, t, null, null];
            }
            function Mw(n, e) {
                const t = n.contentQueries;
                if (null !== t) {
                    const i = Ze(null);
                    try {
                        for (let r = 0; r < t.length; r += 2) {
                            const s = t[r + 1];
                            if (-1 !== s) {
                                const a = n.data[s];
                                au(t[r]), a.contentQueries(2, e[s], s);
                            }
                        }
                    } finally {
                        Ze(i);
                    }
                }
            }
            function td(n, e) {
                return n[$a] ? (n[lE][Gn] = e) : (n[$a] = e), (n[lE] = e), e;
            }
            function Up(n, e, t) {
                au(0);
                const i = Ze(null);
                try {
                    e(n, t);
                } finally {
                    Ze(i);
                }
            }
            function Rw(n) {
                return n[rs] || (n[rs] = []);
            }
            function Aw(n) {
                return n.cleanup || (n.cleanup = []);
            }
            function Ow(n, e, t) {
                return (
                    (null === n || $n(n)) &&
                        (t = (function sm(n) {
                            for (; Array.isArray(n); ) {
                                if ('object' == typeof n[em]) return n;
                                n = n[Qe];
                            }
                            return null;
                        })(t[e.index])),
                    t[re]
                );
            }
            function nd(n, e) {
                const t = n[Nt],
                    i = t ? t.get(Mn, null) : null;
                i && i.handleError(e);
            }
            function zp(n, e, t, i, r) {
                for (let o = 0; o < t.length; ) {
                    const s = t[o++],
                        a = t[o++],
                        l = t[o++];
                    vw(n.data[s], e[s], i, a, l, r);
                }
            }
            function SF(n, e) {
                const t = _n(e, n),
                    i = t[O];
                !(function TF(n, e) {
                    for (let t = e.length; t < n.blueprint.length; t++) e.push(n.blueprint[t]);
                })(i, t);
                const r = t[Qe];
                null !== r && null === t[Wn] && (t[Wn] = Gm(r, t[Nt])), Gp(i, t, t[ze]);
            }
            function Gp(n, e, t) {
                ym(e);
                try {
                    const i = n.viewQuery;
                    null !== i && Up(1, i, t);
                    const r = n.template;
                    null !== r && Ew(n, e, r, 1, t),
                        n.firstCreatePass && (n.firstCreatePass = !1),
                        e[Fi]?.finishViewCreation(n),
                        n.staticContentQueries && Mw(n, e),
                        n.staticViewQueries && Up(2, n.viewQuery, t);
                    const o = n.components;
                    null !== o &&
                        (function MF(n, e) {
                            for (let t = 0; t < e.length; t++) SF(n, e[t]);
                        })(e, o);
                } catch (i) {
                    throw (n.firstCreatePass && ((n.incompleteFirstPass = !0), (n.firstCreatePass = !1)), i);
                } finally {
                    (e[G] &= -5), bm();
                }
            }
            function _l(n, e, t, i) {
                const r = e.tView,
                    a = ed(n, r, t, 4096 & n[G] ? 4096 : 16, null, e, null, null, null, i?.injector ?? null, i?.dehydratedView ?? null);
                a[Ya] = n[e.index];
                const c = n[Fi];
                return null !== c && (a[Fi] = c.createEmbeddedView(r)), Gp(r, a, t), a;
            }
            function Ps(n, e) {
                return !e || null === e.firstChild || du(n);
            }
            function yl(n, e, t, i = !0) {
                const r = e[O];
                if (
                    ((function Y1(n, e, t, i) {
                        const r = lt + i,
                            o = t.length;
                        i > 0 && (t[r - 1][Gn] = e),
                            i < o - lt ? ((e[Gn] = t[r]), OE(t, lt + i, e)) : (t.push(e), (e[Gn] = null)),
                            (e[at] = t);
                        const s = e[Ya];
                        null !== s &&
                            t !== s &&
                            (function q1(n, e) {
                                const t = n[as];
                                e[Je] !== e[at][at][Je] && (n[G] |= tm.HasTransplantedViews), null === t ? (n[as] = [e]) : t.push(e);
                            })(s, e);
                        const a = e[Fi];
                        null !== a && a.insertView(n), cm(e), (e[G] |= 128);
                    })(r, e, n, t),
                    i)
                ) {
                    const s = Op(t, n),
                        a = e[re],
                        l = Ku(a, n[ui]);
                    null !== l &&
                        (function W1(n, e, t, i, r, o) {
                            (i[Qe] = r), (i[Ot] = e), Ju(n, i, t, 1, r, o);
                        })(r, n[Ot], a, e, l, s);
                }
                const o = e[Wn];
                null !== o && null !== o.firstChild && (o.firstChild = null);
            }
            function bl(n, e, t, i, r = !1) {
                for (; null !== t; ) {
                    const o = e[t.index];
                    null !== o && i.push(Fe(o)), kt(o) && Pw(o, i);
                    const s = t.type;
                    if (8 & s) bl(n, e, t.child, i);
                    else if (32 & s) {
                        const a = Sp(t, e);
                        let l;
                        for (; (l = a()); ) i.push(l);
                    } else if (16 & s) {
                        const a = fw(e, t);
                        if (Array.isArray(a)) i.push(...a);
                        else {
                            const l = oo(e[Je]);
                            bl(l[O], l, a, i, !0);
                        }
                    }
                    t = r ? t.projectionNext : t.next;
                }
                return i;
            }
            function Pw(n, e) {
                for (let t = lt; t < n.length; t++) {
                    const i = n[t],
                        r = i[O].firstChild;
                    null !== r && bl(i[O], i, r, e);
                }
                n[ui] !== n[Qe] && e.push(n[ui]);
            }
            let kw = [];
            const NF = {
                ...Qr,
                consumerIsAlwaysLive: !0,
                consumerMarkedDirty: (n) => {
                    Qa(n.lView);
                },
                consumerOnSignalRead() {
                    this.lView[io] = this;
                },
            };
            function Fw(n) {
                return Bw(n[$a]);
            }
            function Lw(n) {
                return Bw(n[Gn]);
            }
            function Bw(n) {
                for (; null !== n && !kt(n); ) n = n[Gn];
                return n;
            }
            function id(n, e = !0, t = 0) {
                const i = n[ki],
                    r = i.rendererFactory;
                r.begin?.();
                try {
                    !(function FF(n, e) {
                        $p(n, e);
                        let t = 0;
                        for (; lm(n); ) {
                            if (100 === t) throw new S(103, !1);
                            t++, $p(n, 1);
                        }
                    })(n, t);
                } catch (s) {
                    throw (e && nd(n, s), s);
                } finally {
                    r.end?.(), i.inlineEffectRunner?.flush();
                }
            }
            function LF(n, e, t, i) {
                const r = e[G];
                if (256 == (256 & r)) return;
                e[ki].inlineEffectRunner?.flush(), ym(e);
                let s = null,
                    a = null;
                (function BF(n) {
                    return 2 !== n.type;
                })(n) &&
                    ((a = (function RF(n) {
                        return (
                            n[io] ??
                            (function AF(n) {
                                const e = kw.pop() ?? Object.create(NF);
                                return (e.lView = n), e;
                            })(n)
                        );
                    })(e)),
                    (s = (function V(n) {
                        return n && (n.nextProducerIndex = 0), Ze(n);
                    })(a)));
                try {
                    gE(e),
                        (function wE(n) {
                            return (te.lFrame.bindingIndex = n);
                        })(n.bindingStartIndex),
                        null !== t && Ew(n, e, t, 2, i);
                    const l = 3 == (3 & r);
                    if (l) {
                        const d = n.preOrderCheckHooks;
                        null !== d && Ou(e, d, null);
                    } else {
                        const d = n.preOrderHooks;
                        null !== d && Nu(e, d, 0, null), sp(e, 0);
                    }
                    if (
                        ((function jF(n) {
                            for (let e = Fw(n); null !== e; e = Lw(e)) {
                                if (!(e[G] & tm.HasTransplantedViews)) continue;
                                const t = e[as];
                                for (let i = 0; i < t.length; i++) {
                                    eP(t[i]);
                                }
                            }
                        })(e),
                        Vw(e, 0),
                        null !== n.contentQueries && Mw(n, e),
                        l)
                    ) {
                        const d = n.contentCheckHooks;
                        null !== d && Ou(e, d);
                    } else {
                        const d = n.contentHooks;
                        null !== d && Nu(e, d, 1), sp(e, 1);
                    }
                    !(function iF(n, e) {
                        const t = n.hostBindingOpCodes;
                        if (null !== t)
                            try {
                                for (let i = 0; i < t.length; i++) {
                                    const r = t[i];
                                    if (r < 0) so(~r);
                                    else {
                                        const o = r,
                                            s = t[++i],
                                            a = t[++i];
                                        dP(s, o), a(2, e[o]);
                                    }
                                }
                            } finally {
                                so(-1);
                            }
                    })(n, e);
                    const c = n.components;
                    null !== c && Uw(e, c, 0);
                    const u = n.viewQuery;
                    if ((null !== u && Up(2, u, i), l)) {
                        const d = n.viewCheckHooks;
                        null !== d && Ou(e, d);
                    } else {
                        const d = n.viewHooks;
                        null !== d && Nu(e, d, 2), sp(e, 2);
                    }
                    if ((!0 === n.firstUpdatePass && (n.firstUpdatePass = !1), e[iu])) {
                        for (const d of e[iu]) d();
                        e[iu] = null;
                    }
                    e[G] &= -73;
                } catch (l) {
                    throw (Qa(e), l);
                } finally {
                    null !== a &&
                        ((function H(n, e) {
                            if (
                                (Ze(e),
                                n && void 0 !== n.producerNode && void 0 !== n.producerIndexOfThis && void 0 !== n.producerLastReadVersion)
                            ) {
                                if (Le(n))
                                    for (let t = n.nextProducerIndex; t < n.producerNode.length; t++)
                                        _e(n.producerNode[t], n.producerIndexOfThis[t]);
                                for (; n.producerNode.length > n.nextProducerIndex; )
                                    n.producerNode.pop(), n.producerLastReadVersion.pop(), n.producerIndexOfThis.pop();
                            }
                        })(a, s),
                        (function OF(n) {
                            n.lView[io] !== n && ((n.lView = null), kw.push(n));
                        })(a)),
                        bm();
                }
            }
            function Vw(n, e) {
                for (let t = Fw(n); null !== t; t = Lw(t)) for (let i = lt; i < t.length; i++) Hw(t[i], e);
            }
            function VF(n, e, t) {
                Hw(_n(e, n), t);
            }
            function Hw(n, e) {
                am(n) && $p(n, e);
            }
            function $p(n, e) {
                const i = n[O],
                    r = n[G],
                    o = n[io];
                let s = !!(0 === e && 16 & r);
                if (
                    ((s ||= !!(64 & r && 0 === e)),
                    (s ||= !!(1024 & r)),
                    (s ||= !(!o?.dirty || !W(o))),
                    o && (o.dirty = !1),
                    (n[G] &= -9217),
                    s)
                )
                    LF(i, n, i.template, n[ze]);
                else if (8192 & r) {
                    Vw(n, 1);
                    const a = i.components;
                    null !== a && Uw(n, a, 1);
                }
            }
            function Uw(n, e, t) {
                for (let i = 0; i < e.length; i++) VF(n, e[i], t);
            }
            function vl(n) {
                for (n[ki].changeDetectionScheduler?.notify(); n; ) {
                    n[G] |= 64;
                    const e = oo(n);
                    if (im(n) && !e) return n;
                    n = e;
                }
                return null;
            }
            class El {
                get rootNodes() {
                    const e = this._lView,
                        t = e[O];
                    return bl(t, e, t.firstChild, []);
                }
                constructor(e, t, i = !0) {
                    (this._lView = e),
                        (this._cdRefInjectingView = t),
                        (this.notifyErrorHandler = i),
                        (this._appRef = null),
                        (this._attachedToViewContainer = !1);
                }
                get context() {
                    return this._lView[ze];
                }
                set context(e) {
                    this._lView[ze] = e;
                }
                get destroyed() {
                    return 256 == (256 & this._lView[G]);
                }
                destroy() {
                    if (this._appRef) this._appRef.detachView(this);
                    else if (this._attachedToViewContainer) {
                        const e = this._lView[at];
                        if (kt(e)) {
                            const t = e[8],
                                i = t ? t.indexOf(this) : -1;
                            i > -1 && (ml(e, i), cu(t, i));
                        }
                        this._attachedToViewContainer = !1;
                    }
                    Xu(this._lView[O], this._lView);
                }
                onDestroy(e) {
                    !(function su(n, e) {
                        if (256 == (256 & n[G])) throw new S(911, !1);
                        null === n[pr] && (n[pr] = []), n[pr].push(e);
                    })(this._lView, e);
                }
                markForCheck() {
                    vl(this._cdRefInjectingView || this._lView);
                }
                detach() {
                    this._lView[G] &= -129;
                }
                reattach() {
                    cm(this._lView), (this._lView[G] |= 128);
                }
                detectChanges() {
                    (this._lView[G] |= 1024), id(this._lView, this.notifyErrorHandler);
                }
                checkNoChanges() {}
                attachToViewContainerRef() {
                    if (this._appRef) throw new S(902, !1);
                    this._attachedToViewContainer = !0;
                }
                detachFromAppRef() {
                    (this._appRef = null), rw(this._lView[O], this._lView);
                }
                attachToAppRef(e) {
                    if (this._attachedToViewContainer) throw new S(902, !1);
                    (this._appRef = e), cm(this._lView);
                }
            }
            let _i = (() => {
                class n {
                    static #e = (this.__NG_ELEMENT_ID__ = zF);
                }
                return n;
            })();
            const HF = _i,
                UF = class extends HF {
                    constructor(e, t, i) {
                        super(), (this._declarationLView = e), (this._declarationTContainer = t), (this.elementRef = i);
                    }
                    get ssrId() {
                        return this._declarationTContainer.tView?.ssrId || null;
                    }
                    createEmbeddedView(e, t) {
                        return this.createEmbeddedViewImpl(e, t);
                    }
                    createEmbeddedViewImpl(e, t, i) {
                        const r = _l(this._declarationLView, this._declarationTContainer, e, { injector: t, dehydratedView: i });
                        return new El(r);
                    }
                };
            function zF() {
                return rd(Ne(), C());
            }
            function rd(n, e) {
                return 4 & n.type ? new UF(e, n, us(n, e)) : null;
            }
            let qw = () => null;
            function ks(n, e) {
                return qw(n, e);
            }
            class Qp {}
            class dL {}
            class Xw {}
            class fL {
                resolveComponentFactory(e) {
                    throw (function hL(n) {
                        const e = Error(`No component factory found for ${_t(n)}.`);
                        return (e.ngComponent = n), e;
                    })(e);
                }
            }
            let Fs = (() => {
                class n {
                    static #e = (this.NULL = new fL());
                }
                return n;
            })();
            class Jp {}
            let pL = (() => {
                class n {
                    static #e = (this.ɵprov = j({ token: n, providedIn: 'root', factory: () => null }));
                }
                return n;
            })();
            const eg = {};
            function Jw(n, e) {
                const t = (function cN(n) {
                        const e = Object.create(dN);
                        e.value = n;
                        const t = () => (li(e), e.value);
                        return (t[Tn] = e), t;
                    })(n),
                    i = t[Tn];
                return (
                    e?.equal && (i.equal = e.equal),
                    (t.set = (r) => Pv(i, r)),
                    (t.update = (r) =>
                        (function uN(n, e) {
                            F() || Jt(), Pv(n, e(n.value));
                        })(i, r)),
                    (t.asReadonly = gL.bind(t)),
                    t
                );
            }
            function gL() {
                const n = this[Tn];
                if (void 0 === n.readonlyFn) {
                    const e = () => this();
                    (e[Tn] = n), (n.readonlyFn = e);
                }
                return n.readonlyFn;
            }
            let ig = (() => {
                class n {
                    static #e = (this.__NG_ELEMENT_ID__ = xL);
                }
                return n;
            })();
            function xL(n) {
                return (function SL(n, e, t) {
                    if (ro(n) && !t) {
                        const i = _n(n.index, e);
                        return new El(i, i);
                    }
                    return 47 & n.type ? new El(e[Je], e) : null;
                })(Ne(), C(), 16 == (16 & n));
            }
            const lC = new Set();
            function wr(n) {
                lC.has(n) || (lC.add(n), performance?.mark?.('mark_feature_usage', { detail: { feature: n } }));
            }
            function cC(...n) {}
            class ce {
                constructor({
                    enableLongStackTrace: e = !1,
                    shouldCoalesceEventChangeDetection: t = !1,
                    shouldCoalesceRunChangeDetection: i = !1,
                }) {
                    if (
                        ((this.hasPendingMacrotasks = !1),
                        (this.hasPendingMicrotasks = !1),
                        (this.isStable = !0),
                        (this.onUnstable = new en(!1)),
                        (this.onMicrotaskEmpty = new en(!1)),
                        (this.onStable = new en(!1)),
                        (this.onError = new en(!1)),
                        typeof Zone > 'u')
                    )
                        throw new S(908, !1);
                    Zone.assertZonePatched();
                    const r = this;
                    (r._nesting = 0),
                        (r._outer = r._inner = Zone.current),
                        Zone.TaskTrackingZoneSpec && (r._inner = r._inner.fork(new Zone.TaskTrackingZoneSpec())),
                        e && Zone.longStackTraceZoneSpec && (r._inner = r._inner.fork(Zone.longStackTraceZoneSpec)),
                        (r.shouldCoalesceEventChangeDetection = !i && t),
                        (r.shouldCoalesceRunChangeDetection = i),
                        (r.lastRequestAnimationFrameId = -1),
                        (r.nativeRequestAnimationFrame = (function LL() {
                            const n = 'function' == typeof Me.requestAnimationFrame;
                            let e = Me[n ? 'requestAnimationFrame' : 'setTimeout'],
                                t = Me[n ? 'cancelAnimationFrame' : 'clearTimeout'];
                            if (typeof Zone < 'u' && e && t) {
                                const i = e[Zone.__symbol__('OriginalDelegate')];
                                i && (e = i);
                                const r = t[Zone.__symbol__('OriginalDelegate')];
                                r && (t = r);
                            }
                            return { nativeRequestAnimationFrame: e, nativeCancelAnimationFrame: t };
                        })().nativeRequestAnimationFrame),
                        (function VL(n) {
                            const e = () => {
                                !(function jL(n) {
                                    n.isCheckStableRunning ||
                                        -1 !== n.lastRequestAnimationFrameId ||
                                        ((n.lastRequestAnimationFrameId = n.nativeRequestAnimationFrame.call(Me, () => {
                                            n.fakeTopEventTask ||
                                                (n.fakeTopEventTask = Zone.root.scheduleEventTask(
                                                    'fakeTopEventTask',
                                                    () => {
                                                        (n.lastRequestAnimationFrameId = -1),
                                                            og(n),
                                                            (n.isCheckStableRunning = !0),
                                                            rg(n),
                                                            (n.isCheckStableRunning = !1);
                                                    },
                                                    void 0,
                                                    () => {},
                                                    () => {},
                                                )),
                                                n.fakeTopEventTask.invoke();
                                        })),
                                        og(n));
                                })(n);
                            };
                            n._inner = n._inner.fork({
                                name: 'angular',
                                properties: { isAngularZone: !0 },
                                onInvokeTask: (t, i, r, o, s, a) => {
                                    if (
                                        (function HL(n) {
                                            return !(!Array.isArray(n) || 1 !== n.length) && !0 === n[0].data?.__ignore_ng_zone__;
                                        })(a)
                                    )
                                        return t.invokeTask(r, o, s, a);
                                    try {
                                        return uC(n), t.invokeTask(r, o, s, a);
                                    } finally {
                                        ((n.shouldCoalesceEventChangeDetection && 'eventTask' === o.type) ||
                                            n.shouldCoalesceRunChangeDetection) &&
                                            e(),
                                            dC(n);
                                    }
                                },
                                onInvoke: (t, i, r, o, s, a, l) => {
                                    try {
                                        return uC(n), t.invoke(r, o, s, a, l);
                                    } finally {
                                        n.shouldCoalesceRunChangeDetection && e(), dC(n);
                                    }
                                },
                                onHasTask: (t, i, r, o) => {
                                    t.hasTask(r, o),
                                        i === r &&
                                            ('microTask' == o.change
                                                ? ((n._hasPendingMicrotasks = o.microTask), og(n), rg(n))
                                                : 'macroTask' == o.change && (n.hasPendingMacrotasks = o.macroTask));
                                },
                                onHandleError: (t, i, r, o) => (t.handleError(r, o), n.runOutsideAngular(() => n.onError.emit(o)), !1),
                            });
                        })(r);
                }
                static isInAngularZone() {
                    return typeof Zone < 'u' && !0 === Zone.current.get('isAngularZone');
                }
                static assertInAngularZone() {
                    if (!ce.isInAngularZone()) throw new S(909, !1);
                }
                static assertNotInAngularZone() {
                    if (ce.isInAngularZone()) throw new S(909, !1);
                }
                run(e, t, i) {
                    return this._inner.run(e, t, i);
                }
                runTask(e, t, i, r) {
                    const o = this._inner,
                        s = o.scheduleEventTask('NgZoneEvent: ' + r, e, BL, cC, cC);
                    try {
                        return o.runTask(s, t, i);
                    } finally {
                        o.cancelTask(s);
                    }
                }
                runGuarded(e, t, i) {
                    return this._inner.runGuarded(e, t, i);
                }
                runOutsideAngular(e) {
                    return this._outer.run(e);
                }
            }
            const BL = {};
            function rg(n) {
                if (0 == n._nesting && !n.hasPendingMicrotasks && !n.isStable)
                    try {
                        n._nesting++, n.onMicrotaskEmpty.emit(null);
                    } finally {
                        if ((n._nesting--, !n.hasPendingMicrotasks))
                            try {
                                n.runOutsideAngular(() => n.onStable.emit(null));
                            } finally {
                                n.isStable = !0;
                            }
                    }
            }
            function og(n) {
                n.hasPendingMicrotasks = !!(
                    n._hasPendingMicrotasks ||
                    ((n.shouldCoalesceEventChangeDetection || n.shouldCoalesceRunChangeDetection) && -1 !== n.lastRequestAnimationFrameId)
                );
            }
            function uC(n) {
                n._nesting++, n.isStable && ((n.isStable = !1), n.onUnstable.emit(null));
            }
            function dC(n) {
                n._nesting--, rg(n);
            }
            let xl = (() => {
                class n {
                    constructor() {
                        (this.handler = null), (this.internalCallbacks = []);
                    }
                    execute() {
                        const t = [...this.internalCallbacks];
                        this.internalCallbacks.length = 0;
                        for (const i of t) i();
                        this.handler?.execute();
                    }
                    ngOnDestroy() {
                        this.handler?.destroy(), (this.handler = null), (this.internalCallbacks.length = 0);
                    }
                    static #e = (this.ɵprov = j({ token: n, providedIn: 'root', factory: () => new n() }));
                }
                return n;
            })();
            function fd(n, e, t) {
                let i = t ? n.styles : null,
                    r = t ? n.classes : null,
                    o = 0;
                if (null !== e)
                    for (let s = 0; s < e.length; s++) {
                        const a = e[s];
                        'number' == typeof a ? (o = a) : 1 == o ? (r = Kf(r, a)) : 2 == o && (i = Kf(i, a + ': ' + e[++s] + ';'));
                    }
                t ? (n.styles = i) : (n.stylesWithoutHost = i), t ? (n.classes = r) : (n.classesWithoutHost = r);
            }
            class bC extends Fs {
                constructor(e) {
                    super(), (this.ngModule = e);
                }
                resolveComponentFactory(e) {
                    const t = fe(e);
                    return new Ml(t, this.ngModule);
                }
            }
            function vC(n) {
                const e = [];
                for (const t in n) {
                    if (!n.hasOwnProperty(t)) continue;
                    const i = n[t];
                    void 0 !== i && e.push({ propName: Array.isArray(i) ? i[0] : i, templateName: t });
                }
                return e;
            }
            class qL {
                constructor(e, t) {
                    (this.injector = e), (this.parentInjector = t);
                }
                get(e, t, i) {
                    i = yu(i);
                    const r = this.injector.get(e, eg, i);
                    return r !== eg || t === eg ? r : this.parentInjector.get(e, t, i);
                }
            }
            class Ml extends Xw {
                get inputs() {
                    const e = this.componentDef,
                        t = e.inputTransforms,
                        i = vC(e.inputs);
                    if (null !== t) for (const r of i) t.hasOwnProperty(r.propName) && (r.transform = t[r.propName]);
                    return i;
                }
                get outputs() {
                    return vC(this.componentDef.outputs);
                }
                constructor(e, t) {
                    super(),
                        (this.componentDef = e),
                        (this.ngModule = t),
                        (this.componentType = e.type),
                        (this.selector = (function HN(n) {
                            return n.map(VN).join(',');
                        })(e.selectors)),
                        (this.ngContentSelectors = e.ngContentSelectors ? e.ngContentSelectors : []),
                        (this.isBoundToModule = !!t);
                }
                create(e, t, i, r) {
                    let o = (r = r || this.ngModule) instanceof ji ? r : r?.injector;
                    o && null !== this.componentDef.getStandaloneInjector && (o = this.componentDef.getStandaloneInjector(o) || o);
                    const s = o ? new qL(e, o) : e,
                        a = s.get(Jp, null);
                    if (null === a) throw new S(407, !1);
                    const d = {
                            rendererFactory: a,
                            sanitizer: s.get(pL, null),
                            inlineEffectRunner: null,
                            afterRenderEventManager: s.get(xl, null),
                            changeDetectionScheduler: s.get(Qp, null),
                        },
                        h = a.createRenderer(null, this.componentDef),
                        f = this.componentDef.selectors[0][0] || 'div',
                        m = i
                            ? (function oF(n, e, t, i) {
                                  const o = i.get(R0, !1) || t === Un.ShadowDom,
                                      s = n.selectRootElement(e, o);
                                  return (
                                      (function sF(n) {
                                          Cw(n);
                                      })(s),
                                      s
                                  );
                              })(h, i, this.componentDef.encapsulation, s)
                            : qu(
                                  h,
                                  f,
                                  (function YL(n) {
                                      const e = n.toLowerCase();
                                      return 'svg' === e ? 'svg' : 'math' === e ? 'math' : null;
                                  })(f),
                              );
                    let p = 512;
                    this.componentDef.signals ? (p |= 4096) : this.componentDef.onPush || (p |= 16);
                    let g = null;
                    null !== m && (g = Gm(m, s, !0));
                    const y = Bp(0, null, null, 1, 0, null, null, null, null, null, null),
                        _ = ed(null, y, null, p, null, null, d, h, s, null, g);
                    let b, v;
                    ym(_);
                    try {
                        const E = this.componentDef;
                        let R,
                            N = null;
                        E.findHostDirectiveDefs ? ((R = []), (N = new Map()), E.findHostDirectiveDefs(E, R, N), R.push(E)) : (R = [E]);
                        const k = (function KL(n, e) {
                                const t = n[O],
                                    i = oe;
                                return (n[i] = e), Ns(t, i, 2, '#host', null);
                            })(_, m),
                            U = (function ZL(n, e, t, i, r, o, s) {
                                const a = r[O];
                                !(function QL(n, e, t, i) {
                                    for (const r of n) e.mergedAttrs = Wa(e.mergedAttrs, r.hostAttrs);
                                    null !== e.mergedAttrs && (fd(e, e.mergedAttrs, !0), null !== t && _w(i, t, e));
                                })(i, n, e, s);
                                let l = null;
                                null !== e && (l = Gm(e, r[Nt]));
                                const c = o.rendererFactory.createRenderer(e, t);
                                let u = 16;
                                t.signals ? (u = 4096) : t.onPush && (u = 64);
                                const d = ed(r, ww(t), null, u, r[n.index], n, o, c, null, null, l);
                                return a.firstCreatePass && Vp(a, n, i.length - 1), td(r, d), (r[n.index] = d);
                            })(k, m, E, R, _, d, h);
                        (v = Za(y, oe)),
                            m &&
                                (function e2(n, e, t, i) {
                                    if (i) Jf(n, t, ['ng-version', '17.2.2']);
                                    else {
                                        const { attrs: r, classes: o } = (function UN(n) {
                                            const e = [],
                                                t = [];
                                            let i = 1,
                                                r = 2;
                                            for (; i < n.length; ) {
                                                let o = n[i];
                                                if ('string' == typeof o) 2 === r ? '' !== o && e.push(o, n[++i]) : 8 === r && t.push(o);
                                                else {
                                                    if (!zn(r)) break;
                                                    r = o;
                                                }
                                                i++;
                                            }
                                            return { attrs: e, classes: t };
                                        })(e.selectors[0]);
                                        r && Jf(n, t, r), o && o.length > 0 && gw(n, t, o.join(' '));
                                    }
                                })(h, E, m, i),
                            void 0 !== t &&
                                (function t2(n, e, t) {
                                    const i = (n.projection = []);
                                    for (let r = 0; r < e.length; r++) {
                                        const o = t[r];
                                        i.push(null != o ? Array.from(o) : null);
                                    }
                                })(v, this.ngContentSelectors, t),
                            (b = (function JL(n, e, t, i, r, o) {
                                const s = Ne(),
                                    a = r[O],
                                    l = Gt(s, r);
                                xw(a, r, s, t, null, i);
                                for (let u = 0; u < t.length; u++) Lt(uo(r, a, s.directiveStart + u, s), r);
                                Sw(a, r, s), l && Lt(l, r);
                                const c = uo(r, a, s.directiveStart + s.componentOffset, s);
                                if (((n[ze] = r[ze] = c), null !== o)) for (const u of o) u(c, e);
                                return kp(a, s, r), c;
                            })(U, E, R, N, _, [n2])),
                            Gp(y, _, null);
                    } finally {
                        bm();
                    }
                    return new XL(this.componentType, b, us(v, _), _, v);
                }
            }
            class XL extends dL {
                constructor(e, t, i, r, o) {
                    super(),
                        (this.location = i),
                        (this._rootLView = r),
                        (this._tNode = o),
                        (this.previousInputValues = null),
                        (this.instance = t),
                        (this.hostView = this.changeDetectorRef = new El(r, void 0, !1)),
                        (this.componentType = e);
                }
                setInput(e, t) {
                    const i = this._tNode.inputs;
                    let r;
                    if (null !== i && (r = i[e])) {
                        if (
                            ((this.previousInputValues ??= new Map()),
                            this.previousInputValues.has(e) && Object.is(this.previousInputValues.get(e), t))
                        )
                            return;
                        const o = this._rootLView;
                        zp(o[O], o, r, e, t), this.previousInputValues.set(e, t), vl(_n(this._tNode.index, o));
                    }
                }
                get injector() {
                    return new vt(this._tNode, this._rootLView);
                }
                destroy() {
                    this.hostView.destroy();
                }
                onDestroy(e) {
                    this.hostView.onDestroy(e);
                }
            }
            function n2() {
                const n = Ne();
                Au(C()[O], n);
            }
            let qn = (() => {
                class n {
                    static #e = (this.__NG_ELEMENT_ID__ = r2);
                }
                return n;
            })();
            function r2() {
                return CC(Ne(), C());
            }
            const o2 = qn,
                EC = class extends o2 {
                    constructor(e, t, i) {
                        super(), (this._lContainer = e), (this._hostTNode = t), (this._hostLView = i);
                    }
                    get element() {
                        return us(this._hostTNode, this._hostLView);
                    }
                    get injector() {
                        return new vt(this._hostTNode, this._hostLView);
                    }
                    get parentInjector() {
                        const e = Fu(this._hostTNode, this._hostLView);
                        if (lp(e)) {
                            const t = ul(e, this._hostLView),
                                i = cl(e);
                            return new vt(t[O].data[i + 8], t);
                        }
                        return new vt(null, this._hostLView);
                    }
                    clear() {
                        for (; this.length > 0; ) this.remove(this.length - 1);
                    }
                    get(e) {
                        const t = wC(this._lContainer);
                        return (null !== t && t[e]) || null;
                    }
                    get length() {
                        return this._lContainer.length - lt;
                    }
                    createEmbeddedView(e, t, i) {
                        let r, o;
                        'number' == typeof i ? (r = i) : null != i && ((r = i.index), (o = i.injector));
                        const s = ks(this._lContainer, e.ssrId),
                            a = e.createEmbeddedViewImpl(t || {}, o, s);
                        return this.insertImpl(a, r, Ps(this._hostTNode, s)), a;
                    }
                    createComponent(e, t, i, r, o) {
                        const s =
                            e &&
                            !(function al(n) {
                                return 'function' == typeof n;
                            })(e);
                        let a;
                        if (s) a = t;
                        else {
                            const m = t || {};
                            (a = m.index), (i = m.injector), (r = m.projectableNodes), (o = m.environmentInjector || m.ngModuleRef);
                        }
                        const l = s ? e : new Ml(fe(e)),
                            c = i || this.parentInjector;
                        if (!o && null == l.ngModule) {
                            const p = (s ? c : this.parentInjector).get(ji, null);
                            p && (o = p);
                        }
                        const u = fe(l.componentType ?? {}),
                            d = ks(this._lContainer, u?.id ?? null),
                            f = l.create(c, r, d?.firstChild ?? null, o);
                        return this.insertImpl(f.hostView, a, Ps(this._hostTNode, d)), f;
                    }
                    insert(e, t) {
                        return this.insertImpl(e, t, !0);
                    }
                    insertImpl(e, t, i) {
                        const r = e._lView;
                        if (
                            (function JN(n) {
                                return kt(n[at]);
                            })(r)
                        ) {
                            const a = this.indexOf(e);
                            if (-1 !== a) this.detach(a);
                            else {
                                const l = r[at],
                                    c = new EC(l, l[Ot], l[at]);
                                c.detach(c.indexOf(e));
                            }
                        }
                        const o = this._adjustIndex(t),
                            s = this._lContainer;
                        return yl(s, r, o, i), e.attachToViewContainerRef(), OE(lg(s), o, e), e;
                    }
                    move(e, t) {
                        return this.insert(e, t);
                    }
                    indexOf(e) {
                        const t = wC(this._lContainer);
                        return null !== t ? t.indexOf(e) : -1;
                    }
                    remove(e) {
                        const t = this._adjustIndex(e, -1),
                            i = ml(this._lContainer, t);
                        i && (cu(lg(this._lContainer), t), Xu(i[O], i));
                    }
                    detach(e) {
                        const t = this._adjustIndex(e, -1),
                            i = ml(this._lContainer, t);
                        return i && null != cu(lg(this._lContainer), t) ? new El(i) : null;
                    }
                    _adjustIndex(e, t = 0) {
                        return e ?? this.length + t;
                    }
                };
            function wC(n) {
                return n[8];
            }
            function lg(n) {
                return n[8] || (n[8] = []);
            }
            function CC(n, e) {
                let t;
                const i = e[n.index];
                return kt(i) ? (t = i) : ((t = Tw(i, e, null, n)), (e[n.index] = t), td(e, t)), DC(t, e, n, i), new EC(t, n, e);
            }
            let DC = function xC(n, e, t, i) {
                    if (n[ui]) return;
                    let r;
                    (r =
                        8 & t.type
                            ? Fe(i)
                            : (function s2(n, e) {
                                  const t = n[re],
                                      i = t.createComment(''),
                                      r = Gt(e, n);
                                  return (
                                      fo(
                                          t,
                                          Ku(t, r),
                                          i,
                                          (function Q1(n, e) {
                                              return n.nextSibling(e);
                                          })(t, r),
                                          !1,
                                      ),
                                      i
                                  );
                              })(e, t)),
                        (n[ui] = r);
                },
                cg = () => !1;
            class ug {
                constructor(e) {
                    (this.queryList = e), (this.matches = null);
                }
                clone() {
                    return new ug(this.queryList);
                }
                setDirty() {
                    this.queryList.setDirty();
                }
            }
            class dg {
                constructor(e = []) {
                    this.queries = e;
                }
                createEmbeddedView(e) {
                    const t = e.queries;
                    if (null !== t) {
                        const i = null !== e.contentQueries ? e.contentQueries[0] : t.length,
                            r = [];
                        for (let o = 0; o < i; o++) {
                            const s = t.getByIndex(o);
                            r.push(this.queries[s.indexInDeclarationView].clone());
                        }
                        return new dg(r);
                    }
                    return null;
                }
                insertView(e) {
                    this.dirtyQueriesWithMatches(e);
                }
                detachView(e) {
                    this.dirtyQueriesWithMatches(e);
                }
                finishViewCreation(e) {
                    this.dirtyQueriesWithMatches(e);
                }
                dirtyQueriesWithMatches(e) {
                    for (let t = 0; t < this.queries.length; t++) null !== gg(e, t).matches && this.queries[t].setDirty();
                }
            }
            class SC {
                constructor(e, t, i = null) {
                    (this.flags = t),
                        (this.read = i),
                        (this.predicate =
                            'string' == typeof e
                                ? (function m2(n) {
                                      return n.split(',').map((e) => e.trim());
                                  })(e)
                                : e);
                }
            }
            class hg {
                constructor(e = []) {
                    this.queries = e;
                }
                elementStart(e, t) {
                    for (let i = 0; i < this.queries.length; i++) this.queries[i].elementStart(e, t);
                }
                elementEnd(e) {
                    for (let t = 0; t < this.queries.length; t++) this.queries[t].elementEnd(e);
                }
                embeddedTView(e) {
                    let t = null;
                    for (let i = 0; i < this.length; i++) {
                        const r = null !== t ? t.length : 0,
                            o = this.getByIndex(i).embeddedTView(e, r);
                        o && ((o.indexInDeclarationView = i), null !== t ? t.push(o) : (t = [o]));
                    }
                    return null !== t ? new hg(t) : null;
                }
                template(e, t) {
                    for (let i = 0; i < this.queries.length; i++) this.queries[i].template(e, t);
                }
                getByIndex(e) {
                    return this.queries[e];
                }
                get length() {
                    return this.queries.length;
                }
                track(e) {
                    this.queries.push(e);
                }
            }
            class fg {
                constructor(e, t = -1) {
                    (this.metadata = e),
                        (this.matches = null),
                        (this.indexInDeclarationView = -1),
                        (this.crossesNgTemplate = !1),
                        (this._appliesToNextNode = !0),
                        (this._declarationNodeIndex = t);
                }
                elementStart(e, t) {
                    this.isApplyingToNode(t) && this.matchTNode(e, t);
                }
                elementEnd(e) {
                    this._declarationNodeIndex === e.index && (this._appliesToNextNode = !1);
                }
                template(e, t) {
                    this.elementStart(e, t);
                }
                embeddedTView(e, t) {
                    return this.isApplyingToNode(e)
                        ? ((this.crossesNgTemplate = !0), this.addMatch(-e.index, t), new fg(this.metadata))
                        : null;
                }
                isApplyingToNode(e) {
                    if (this._appliesToNextNode && 1 != (1 & this.metadata.flags)) {
                        const t = this._declarationNodeIndex;
                        let i = e.parent;
                        for (; null !== i && 8 & i.type && i.index !== t; ) i = i.parent;
                        return t === (null !== i ? i.index : -1);
                    }
                    return this._appliesToNextNode;
                }
                matchTNode(e, t) {
                    const i = this.metadata.predicate;
                    if (Array.isArray(i))
                        for (let r = 0; r < i.length; r++) {
                            const o = i[r];
                            this.matchTNodeWithReadOption(e, t, u2(t, o)), this.matchTNodeWithReadOption(e, t, Lu(t, e, o, !1, !1));
                        }
                    else
                        i === _i
                            ? 4 & t.type && this.matchTNodeWithReadOption(e, t, -1)
                            : this.matchTNodeWithReadOption(e, t, Lu(t, e, i, !1, !1));
                }
                matchTNodeWithReadOption(e, t, i) {
                    if (null !== i) {
                        const r = this.metadata.read;
                        if (null !== r)
                            if (r === Tt || r === qn || (r === _i && 4 & t.type)) this.addMatch(t.index, -2);
                            else {
                                const o = Lu(t, e, r, !1, !1);
                                null !== o && this.addMatch(t.index, o);
                            }
                        else this.addMatch(t.index, i);
                    }
                }
                addMatch(e, t) {
                    null === this.matches ? (this.matches = [e, t]) : this.matches.push(e, t);
                }
            }
            function u2(n, e) {
                const t = n.localNames;
                if (null !== t) for (let i = 0; i < t.length; i += 2) if (t[i] === e) return t[i + 1];
                return null;
            }
            function h2(n, e, t, i) {
                return -1 === t
                    ? (function d2(n, e) {
                          return 11 & n.type ? us(n, e) : 4 & n.type ? rd(n, e) : null;
                      })(e, n)
                    : -2 === t
                      ? (function f2(n, e, t) {
                            return t === Tt ? us(e, n) : t === _i ? rd(e, n) : t === qn ? CC(e, n) : void 0;
                        })(n, e, i)
                      : uo(n, n[O], t, e);
            }
            function TC(n, e, t, i) {
                const r = e[Fi].queries[i];
                if (null === r.matches) {
                    const o = n.data,
                        s = t.matches,
                        a = [];
                    for (let l = 0; null !== s && l < s.length; l += 2) {
                        const c = s[l];
                        a.push(c < 0 ? null : h2(e, o[c], s[l + 1], t.metadata.read));
                    }
                    r.matches = a;
                }
                return r.matches;
            }
            function mg(n, e, t, i) {
                const r = n.queries.getByIndex(t),
                    o = r.matches;
                if (null !== o) {
                    const s = TC(n, e, r, t);
                    for (let a = 0; a < o.length; a += 2) {
                        const l = o[a];
                        if (l > 0) i.push(s[a / 2]);
                        else {
                            const c = o[a + 1],
                                u = e[-l];
                            for (let d = lt; d < u.length; d++) {
                                const h = u[d];
                                h[Ya] === h[at] && mg(h[O], h, c, i);
                            }
                            if (null !== u[as]) {
                                const d = u[as];
                                for (let h = 0; h < d.length; h++) {
                                    const f = d[h];
                                    mg(f[O], f, c, i);
                                }
                            }
                        }
                    }
                }
                return i;
            }
            function RC(n, e, t) {
                const i = ge();
                return (
                    i.firstCreatePass &&
                        ((function OC(n, e, t) {
                            null === n.queries && (n.queries = new hg()), n.queries.track(new fg(e, t));
                        })(i, new SC(n, e, t), -1),
                        2 == (2 & e) && (i.staticViewQueries = !0)),
                    (function MC(n, e, t) {
                        const i = new el(4 == (4 & t));
                        return (
                            (function cF(n, e, t, i) {
                                const r = Rw(e);
                                r.push(t), n.firstCreatePass && Aw(n).push(i, r.length - 1);
                            })(n, e, i, i.destroy),
                            (e[Fi] ??= new dg()).queries.push(new ug(i)) - 1
                        );
                    })(i, C(), e)
                );
            }
            function gg(n, e) {
                return n.queries.getByIndex(e);
            }
            function NC(n, e) {
                const t = n[O],
                    i = gg(t, e);
                return i.crossesNgTemplate ? mg(t, n, e, []) : TC(t, n, i, e);
            }
            function Dr(n) {
                let e = (function GC(n) {
                        return Object.getPrototypeOf(n.prototype).constructor;
                    })(n.type),
                    t = !0;
                const i = [n];
                for (; e; ) {
                    let r;
                    if ($n(n)) r = e.ɵcmp || e.ɵdir;
                    else {
                        if (e.ɵcmp) throw new S(903, !1);
                        r = e.ɵdir;
                    }
                    if (r) {
                        if (t) {
                            i.push(r);
                            const s = n;
                            (s.inputs = pd(n.inputs)),
                                (s.inputTransforms = pd(n.inputTransforms)),
                                (s.declaredInputs = pd(n.declaredInputs)),
                                (s.outputs = pd(n.outputs));
                            const a = r.hostBindings;
                            a && M2(n, a);
                            const l = r.viewQuery,
                                c = r.contentQueries;
                            if ((l && S2(n, l), c && T2(n, c), I2(n, r), AN(n.outputs, r.outputs), $n(r) && r.data.animation)) {
                                const u = n.data;
                                u.animation = (u.animation || []).concat(r.data.animation);
                            }
                        }
                        const o = r.features;
                        if (o)
                            for (let s = 0; s < o.length; s++) {
                                const a = o[s];
                                a && a.ngInherit && a(n), a === Dr && (t = !1);
                            }
                    }
                    e = Object.getPrototypeOf(e);
                }
                !(function x2(n) {
                    let e = 0,
                        t = null;
                    for (let i = n.length - 1; i >= 0; i--) {
                        const r = n[i];
                        (r.hostVars = e += r.hostVars), (r.hostAttrs = Wa(r.hostAttrs, (t = Wa(t, r.hostAttrs))));
                    }
                })(i);
            }
            function I2(n, e) {
                for (const t in e.inputs) {
                    if (!e.inputs.hasOwnProperty(t) || n.inputs.hasOwnProperty(t)) continue;
                    const i = e.inputs[t];
                    if (void 0 !== i && ((n.inputs[t] = i), (n.declaredInputs[t] = e.declaredInputs[t]), null !== e.inputTransforms)) {
                        const r = Array.isArray(i) ? i[0] : i;
                        if (!e.inputTransforms.hasOwnProperty(r)) continue;
                        (n.inputTransforms ??= {}), (n.inputTransforms[r] = e.inputTransforms[r]);
                    }
                }
            }
            function pd(n) {
                return n === ci ? {} : n === we ? [] : n;
            }
            function S2(n, e) {
                const t = n.viewQuery;
                n.viewQuery = t
                    ? (i, r) => {
                          e(i, r), t(i, r);
                      }
                    : e;
            }
            function T2(n, e) {
                const t = n.contentQueries;
                n.contentQueries = t
                    ? (i, r, o) => {
                          e(i, r, o), t(i, r, o);
                      }
                    : e;
            }
            function M2(n, e) {
                const t = n.hostBindings;
                n.hostBindings = t
                    ? (i, r) => {
                          e(i, r), t(i, r);
                      }
                    : e;
            }
            function yg(n) {
                const e = n.inputConfig,
                    t = {};
                for (const i in e)
                    if (e.hasOwnProperty(i)) {
                        const r = e[i];
                        Array.isArray(r) && r[3] && (t[i] = r[3]);
                    }
                n.inputTransforms = t;
            }
            class go {}
            class qC extends go {
                constructor(e) {
                    super(), (this.componentFactoryResolver = new bC(this)), (this.instance = null);
                    const t = new Cs(
                        [...e.providers, { provide: go, useValue: this }, { provide: Fs, useValue: this.componentFactoryResolver }],
                        e.parent || Tu(),
                        e.debugName,
                        new Set(['environment']),
                    );
                    (this.injector = t), e.runEnvironmentInitializers && t.resolveInjectorInitializers();
                }
                destroy() {
                    this.injector.destroy();
                }
                onDestroy(e) {
                    this.injector.onDestroy(e);
                }
            }
            let _d = (() => {
                class n {
                    constructor() {
                        (this.taskId = 0), (this.pendingTasks = new Set()), (this.hasPendingTasks = new Gv(!1));
                    }
                    get _hasPendingTasks() {
                        return this.hasPendingTasks.value;
                    }
                    add() {
                        this._hasPendingTasks || this.hasPendingTasks.next(!0);
                        const t = this.taskId++;
                        return this.pendingTasks.add(t), t;
                    }
                    remove(t) {
                        this.pendingTasks.delete(t), 0 === this.pendingTasks.size && this._hasPendingTasks && this.hasPendingTasks.next(!1);
                    }
                    ngOnDestroy() {
                        this.pendingTasks.clear(), this._hasPendingTasks && this.hasPendingTasks.next(!1);
                    }
                    static #e = (this.ɵfac = function (i) {
                        return new (i || n)();
                    });
                    static #t = (this.ɵprov = j({ token: n, factory: n.ɵfac, providedIn: 'root' }));
                }
                return n;
            })();
            function ct(n, e, t) {
                return !Object.is(n[e], t) && ((n[e] = t), !0);
            }
            function yo(n, e, t, i, r, o, s, a) {
                const l = C(),
                    c = ge(),
                    u = n + oe,
                    d = c.firstCreatePass
                        ? (function V2(n, e, t, i, r, o, s, a, l) {
                              const c = e.consts,
                                  u = Ns(e, n, 4, s || null, di(c, a));
                              jp(e, t, u, di(c, l)), Au(e, u);
                              const d = (u.tView = Bp(2, u, i, r, o, e.directiveRegistry, e.pipeRegistry, null, e.schemas, c, null));
                              return null !== e.queries && (e.queries.template(e, u), (d.queries = e.queries.embeddedTView(u))), u;
                          })(u, c, l, e, t, i, r, o, s)
                        : c.data[u];
                hi(d, !1);
                const h = XC(c, l, d, n);
                lu() && Zu(c, l, h, d), Lt(h, l);
                const f = Tw(h, l, h, d);
                return (
                    (l[u] = f),
                    td(l, f),
                    (function IC(n, e, t) {
                        return cg(n, e, t);
                    })(f, d, l),
                    ou(d) && Fp(c, l, d),
                    null != s && Lp(l, d, a),
                    yo
                );
            }
            let XC = function KC(n, e, t, i) {
                return gr(!0), e[re].createComment('');
            };
            function xr(n, e, t, i) {
                const r = C();
                return ct(r, Yn(), e) && (ge(), gi(Ge(), r, n, e, t, i)), xr;
            }
            function Dd(n, e) {
                return (n << 17) | (e << 2);
            }
            function Sr(n) {
                return (n >> 17) & 32767;
            }
            function Rg(n) {
                return 2 | n;
            }
            function vo(n) {
                return (131068 & n) >> 2;
            }
            function Ag(n, e) {
                return (-131069 & n) | (e << 2);
            }
            function Og(n) {
                return 1 | n;
            }
            function SD(n, e, t, i) {
                const r = n[t + 1],
                    o = null === e;
                let s = i ? Sr(r) : vo(r),
                    a = !1;
                for (; 0 !== s && (!1 === a || o); ) {
                    const c = n[s + 1];
                    DB(n[s], e) && ((a = !0), (n[s + 1] = i ? Og(c) : Rg(c))), (s = i ? Sr(c) : vo(c));
                }
                a && (n[t + 1] = i ? Rg(r) : Og(r));
            }
            function DB(n, e) {
                return (
                    null === n ||
                    null == e ||
                    (Array.isArray(n) ? n[1] : n) === e ||
                    (!(!Array.isArray(n) || 'string' != typeof e) && hs(n, e) >= 0)
                );
            }
            const Et = { textEnd: 0, key: 0, keyEnd: 0, value: 0, valueEnd: 0 };
            function TD(n) {
                return n.substring(Et.key, Et.keyEnd);
            }
            function MD(n, e) {
                const t = Et.textEnd;
                return t === e
                    ? -1
                    : ((e = Et.keyEnd =
                          (function TB(n, e, t) {
                              for (; e < t && n.charCodeAt(e) > 32; ) e++;
                              return e;
                          })(n, (Et.key = e), t)),
                      Js(n, e, t));
            }
            function Js(n, e, t) {
                for (; e < t && n.charCodeAt(e) <= 32; ) e++;
                return e;
            }
            function Ng(n, e, t) {
                const i = C();
                return ct(i, Yn(), e) && sn(ge(), Ge(), i, n, e, i[re], t, !1), Ng;
            }
            function Pg(n, e, t, i, r) {
                const s = r ? 'class' : 'style';
                zp(n, t, e.inputs[s], s, i);
            }
            function Ui(n, e) {
                return (
                    (function Xn(n, e, t, i) {
                        const r = C(),
                            o = ge(),
                            s = Bi(2);
                        o.firstUpdatePass && FD(o, n, s, i),
                            e !== ae &&
                                ct(r, s, e) &&
                                BD(
                                    o,
                                    o.data[Ft()],
                                    r,
                                    r[re],
                                    n,
                                    (r[s + 1] = (function jB(n, e) {
                                        return (
                                            null == n ||
                                                '' === n ||
                                                ('string' == typeof e ? (n += e) : 'object' == typeof n && (n = _t(bn(n)))),
                                            n
                                        );
                                    })(e, t)),
                                    i,
                                    s,
                                );
                    })(n, e, null, !0),
                    Ui
                );
            }
            function kl(n) {
                !(function Kn(n, e, t, i) {
                    const r = ge(),
                        o = Bi(2);
                    r.firstUpdatePass && FD(r, null, o, i);
                    const s = C();
                    if (t !== ae && ct(s, o, t)) {
                        const a = r.data[Ft()];
                        if (VD(a, i) && !kD(r, o)) {
                            let l = i ? a.classesWithoutHost : a.stylesWithoutHost;
                            null !== l && (t = Kf(l, t || '')), Pg(r, a, s, t, i);
                        } else
                            !(function BB(n, e, t, i, r, o, s, a) {
                                r === ae && (r = we);
                                let l = 0,
                                    c = 0,
                                    u = 0 < r.length ? r[0] : null,
                                    d = 0 < o.length ? o[0] : null;
                                for (; null !== u || null !== d; ) {
                                    const h = l < r.length ? r[l + 1] : void 0,
                                        f = c < o.length ? o[c + 1] : void 0;
                                    let p,
                                        m = null;
                                    u === d
                                        ? ((l += 2), (c += 2), h !== f && ((m = d), (p = f)))
                                        : null === d || (null !== u && u < d)
                                          ? ((l += 2), (m = u))
                                          : ((c += 2), (m = d), (p = f)),
                                        null !== m && BD(n, e, t, i, m, p, s, a),
                                        (u = l < r.length ? r[l] : null),
                                        (d = c < o.length ? o[c] : null);
                                }
                            })(
                                r,
                                a,
                                s,
                                s[re],
                                s[o + 1],
                                (s[o + 1] = (function FB(n, e, t) {
                                    if (null == t || '' === t) return we;
                                    const i = [],
                                        r = bn(t);
                                    if (Array.isArray(r)) for (let o = 0; o < r.length; o++) n(i, r[o], !0);
                                    else if ('object' == typeof r) for (const o in r) r.hasOwnProperty(o) && n(i, o, r[o]);
                                    else 'string' == typeof r && e(i, r);
                                    return i;
                                })(n, e, t)),
                                i,
                                o,
                            );
                    }
                })(LB, vi, n, !0);
            }
            function vi(n, e) {
                for (
                    let t = (function xB(n) {
                        return (
                            (function AD(n) {
                                (Et.key = 0), (Et.keyEnd = 0), (Et.value = 0), (Et.valueEnd = 0), (Et.textEnd = n.length);
                            })(n),
                            MD(n, Js(n, 0, Et.textEnd))
                        );
                    })(e);
                    t >= 0;
                    t = MD(e, t)
                )
                    yn(n, TD(e), !0);
            }
            function kD(n, e) {
                return e >= n.expandoStartIndex;
            }
            function FD(n, e, t, i) {
                const r = n.data;
                if (null === r[t + 1]) {
                    const o = r[Ft()],
                        s = kD(n, t);
                    VD(o, i) && null === e && !s && (e = !1),
                        (e = (function OB(n, e, t, i) {
                            const r = gm(n);
                            let o = i ? e.residualClasses : e.residualStyles;
                            if (null === r)
                                0 === (i ? e.classBindings : e.styleBindings) &&
                                    ((t = Fl((t = kg(null, n, e, t, i)), e.attrs, i)), (o = null));
                            else {
                                const s = e.directiveStylingLast;
                                if (-1 === s || n[s] !== r)
                                    if (((t = kg(r, n, e, t, i)), null === o)) {
                                        let l = (function NB(n, e, t) {
                                            const i = t ? e.classBindings : e.styleBindings;
                                            if (0 !== vo(i)) return n[Sr(i)];
                                        })(n, e, i);
                                        void 0 !== l &&
                                            Array.isArray(l) &&
                                            ((l = kg(null, n, e, l[1], i)),
                                            (l = Fl(l, e.attrs, i)),
                                            (function PB(n, e, t, i) {
                                                n[Sr(t ? e.classBindings : e.styleBindings)] = i;
                                            })(n, e, i, l));
                                    } else
                                        o = (function kB(n, e, t) {
                                            let i;
                                            const r = e.directiveEnd;
                                            for (let o = 1 + e.directiveStylingLast; o < r; o++) i = Fl(i, n[o].hostAttrs, t);
                                            return Fl(i, e.attrs, t);
                                        })(n, e, i);
                            }
                            return void 0 !== o && (i ? (e.residualClasses = o) : (e.residualStyles = o)), t;
                        })(r, o, e, i)),
                        (function wB(n, e, t, i, r, o) {
                            let s = o ? e.classBindings : e.styleBindings,
                                a = Sr(s),
                                l = vo(s);
                            n[i] = t;
                            let u,
                                c = !1;
                            if ((Array.isArray(t) ? ((u = t[1]), (null === u || hs(t, u) > 0) && (c = !0)) : (u = t), r))
                                if (0 !== l) {
                                    const h = Sr(n[a + 1]);
                                    (n[i + 1] = Dd(h, a)),
                                        0 !== h && (n[h + 1] = Ag(n[h + 1], i)),
                                        (n[a + 1] = (function vB(n, e) {
                                            return (131071 & n) | (e << 17);
                                        })(n[a + 1], i));
                                } else (n[i + 1] = Dd(a, 0)), 0 !== a && (n[a + 1] = Ag(n[a + 1], i)), (a = i);
                            else (n[i + 1] = Dd(l, 0)), 0 === a ? (a = i) : (n[l + 1] = Ag(n[l + 1], i)), (l = i);
                            c && (n[i + 1] = Rg(n[i + 1])),
                                SD(n, u, i, !0),
                                SD(n, u, i, !1),
                                (function CB(n, e, t, i, r) {
                                    const o = r ? n.residualClasses : n.residualStyles;
                                    null != o && 'string' == typeof e && hs(o, e) >= 0 && (t[i + 1] = Og(t[i + 1]));
                                })(e, u, n, i, o),
                                (s = Dd(a, l)),
                                o ? (e.classBindings = s) : (e.styleBindings = s);
                        })(r, o, e, t, s, i);
                }
            }
            function kg(n, e, t, i, r) {
                let o = null;
                const s = t.directiveEnd;
                let a = t.directiveStylingLast;
                for (-1 === a ? (a = t.directiveStart) : a++; a < s && ((o = e[a]), (i = Fl(i, o.hostAttrs, r)), o !== n); ) a++;
                return null !== n && (t.directiveStylingLast = a), i;
            }
            function Fl(n, e, t) {
                const i = t ? 1 : 2;
                let r = -1;
                if (null !== e)
                    for (let o = 0; o < e.length; o++) {
                        const s = e[o];
                        'number' == typeof s
                            ? (r = s)
                            : r === i && (Array.isArray(n) || (n = void 0 === n ? [] : ['', n]), yn(n, s, !!t || e[++o]));
                    }
                return void 0 === n ? null : n;
            }
            function LB(n, e, t) {
                const i = String(e);
                '' !== i && !i.includes(' ') && yn(n, i, t);
            }
            function BD(n, e, t, i, r, o, s, a) {
                if (!(3 & e.type)) return;
                const l = n.data,
                    c = l[a + 1],
                    u = (function EB(n) {
                        return 1 == (1 & n);
                    })(c)
                        ? jD(l, e, t, r, vo(c), s)
                        : void 0;
                Id(u) ||
                    (Id(o) ||
                        ((function bB(n) {
                            return 2 == (2 & n);
                        })(c) &&
                            (o = jD(l, null, t, r, a, s))),
                    (function tF(n, e, t, i, r) {
                        if (e) r ? n.addClass(t, i) : n.removeClass(t, i);
                        else {
                            let o = -1 === i.indexOf('-') ? void 0 : Er.DashCase;
                            null == r
                                ? n.removeStyle(t, i, o)
                                : ('string' == typeof r && r.endsWith('!important') && ((r = r.slice(0, -10)), (o |= Er.Important)),
                                  n.setStyle(t, i, r, o));
                        }
                    })(i, s, Ka(Ft(), t), r, o));
            }
            function jD(n, e, t, i, r, o) {
                const s = null === e;
                let a;
                for (; r > 0; ) {
                    const l = n[r],
                        c = Array.isArray(l),
                        u = c ? l[1] : l,
                        d = null === u;
                    let h = t[r + 1];
                    h === ae && (h = d ? we : void 0);
                    let f = d ? Em(h, i) : u === i ? h : void 0;
                    if ((c && !Id(f) && (f = Em(l, i)), Id(f) && ((a = f), s))) return a;
                    const m = n[r + 1];
                    r = s ? Sr(m) : vo(m);
                }
                if (null !== e) {
                    let l = o ? e.residualClasses : e.residualStyles;
                    null != l && (a = Em(l, i));
                }
                return a;
            }
            function Id(n) {
                return void 0 !== n;
            }
            function VD(n, e) {
                return 0 != (n.flags & (e ? 8 : 16));
            }
            class KB {
                destroy(e) {}
                updateValue(e, t) {}
                swap(e, t) {
                    const i = Math.min(e, t),
                        r = Math.max(e, t),
                        o = this.detach(r);
                    if (r - i > 1) {
                        const s = this.detach(i);
                        this.attach(i, o), this.attach(r, s);
                    } else this.attach(i, o);
                }
                move(e, t) {
                    this.attach(t, this.detach(e));
                }
            }
            function Fg(n, e, t, i, r) {
                return n === t && Object.is(e, i) ? 1 : Object.is(r(n, e), r(t, i)) ? -1 : 0;
            }
            function Lg(n, e, t, i) {
                return !(void 0 === e || !e.has(i) || (n.attach(t, e.get(i)), e.delete(i), 0));
            }
            function HD(n, e, t, i, r) {
                if (Lg(n, e, i, t(i, r))) n.updateValue(i, r);
                else {
                    const o = n.create(i, r);
                    n.attach(i, o);
                }
            }
            function UD(n, e, t, i) {
                const r = new Set();
                for (let o = e; o <= t; o++) r.add(i(o, n.at(o)));
                return r;
            }
            class zD {
                constructor() {
                    (this.kvMap = new Map()), (this._vMap = void 0);
                }
                has(e) {
                    return this.kvMap.has(e);
                }
                delete(e) {
                    if (!this.has(e)) return !1;
                    const t = this.kvMap.get(e);
                    return (
                        void 0 !== this._vMap && this._vMap.has(t)
                            ? (this.kvMap.set(e, this._vMap.get(t)), this._vMap.delete(t))
                            : this.kvMap.delete(e),
                        !0
                    );
                }
                get(e) {
                    return this.kvMap.get(e);
                }
                set(e, t) {
                    if (this.kvMap.has(e)) {
                        let i = this.kvMap.get(e);
                        void 0 === this._vMap && (this._vMap = new Map());
                        const r = this._vMap;
                        for (; r.has(i); ) i = r.get(i);
                        r.set(i, t);
                    } else this.kvMap.set(e, t);
                }
                forEach(e) {
                    for (let [t, i] of this.kvMap)
                        if ((e(i, t), void 0 !== this._vMap)) {
                            const r = this._vMap;
                            for (; r.has(i); ) (i = r.get(i)), e(i, t);
                        }
                }
            }
            class JB {
                constructor(e, t, i) {
                    (this.lContainer = e), (this.$implicit = t), (this.$index = i);
                }
                get $count() {
                    return this.lContainer.length - lt;
                }
            }
            class nj {
                constructor(e, t, i) {
                    (this.hasEmptyBlock = e), (this.trackByFn = t), (this.liveCollection = i);
                }
            }
            function Bg(n, e, t, i, r, o, s, a, l, c, u, d, h) {
                wr('NgControlFlow');
                const f = void 0 !== l,
                    m = C(),
                    p = a ? s.bind(m[Je][ze]) : s,
                    g = new nj(f, p);
                (m[oe + n] = g), yo(n + 1, e, t, i, r, o), f && yo(n + 2, l, c, u, d, h);
            }
            class ij extends KB {
                constructor(e, t, i) {
                    super(), (this.lContainer = e), (this.hostLView = t), (this.templateTNode = i), (this.needsIndexUpdate = !1);
                }
                get length() {
                    return this.lContainer.length - lt;
                }
                at(e) {
                    return this.getLView(e)[ze].$implicit;
                }
                attach(e, t) {
                    const i = t[Wn];
                    (this.needsIndexUpdate ||= e !== this.length), yl(this.lContainer, t, e, Ps(this.templateTNode, i));
                }
                detach(e) {
                    return (
                        (this.needsIndexUpdate ||= e !== this.length - 1),
                        (function rj(n, e) {
                            return ml(n, e);
                        })(this.lContainer, e)
                    );
                }
                create(e, t) {
                    const i = ks(this.lContainer, this.templateTNode.tView.ssrId);
                    return _l(this.hostLView, this.templateTNode, new JB(this.lContainer, t, e), { dehydratedView: i });
                }
                destroy(e) {
                    Xu(e[O], e);
                }
                updateValue(e, t) {
                    this.getLView(e)[ze].$implicit = t;
                }
                reset() {
                    this.needsIndexUpdate = !1;
                }
                updateIndexes() {
                    if (this.needsIndexUpdate) for (let e = 0; e < this.length; e++) this.getLView(e)[ze].$index = e;
                }
                getLView(e) {
                    return (function oj(n, e) {
                        return (function Nw(n, e) {
                            const t = lt + e;
                            if (t < n.length) return n[t];
                        })(n, e);
                    })(this.lContainer, e);
                }
            }
            function jg(n) {
                const e = Ze(null),
                    t = Ft();
                try {
                    const i = C(),
                        r = i[O],
                        o = i[t];
                    if (void 0 === o.liveCollection) {
                        const a = t + 1,
                            l = Vg(i, a),
                            c = Hg(r, a);
                        o.liveCollection = new ij(l, i, c);
                    } else o.liveCollection.reset();
                    const s = o.liveCollection;
                    if (
                        ((function ZB(n, e, t) {
                            let i,
                                r,
                                o = 0,
                                s = n.length - 1;
                            if (Array.isArray(e)) {
                                let a = e.length - 1;
                                for (; o <= s && o <= a; ) {
                                    const l = n.at(o),
                                        c = e[o],
                                        u = Fg(o, l, o, c, t);
                                    if (0 !== u) {
                                        u < 0 && n.updateValue(o, c), o++;
                                        continue;
                                    }
                                    const d = n.at(s),
                                        h = e[a],
                                        f = Fg(s, d, a, h, t);
                                    if (0 !== f) {
                                        f < 0 && n.updateValue(s, h), s--, a--;
                                        continue;
                                    }
                                    const m = t(o, l),
                                        p = t(s, d),
                                        g = t(o, c);
                                    if (Object.is(g, p)) {
                                        const y = t(a, h);
                                        Object.is(y, m) ? (n.swap(o, s), n.updateValue(s, h), a--, s--) : n.move(s, o),
                                            n.updateValue(o, c),
                                            o++;
                                    } else if (((i ??= new zD()), (r ??= UD(n, o, s, t)), Lg(n, i, o, g))) n.updateValue(o, c), o++, s++;
                                    else if (r.has(g)) i.set(m, n.detach(o)), s--;
                                    else {
                                        const y = n.create(o, e[o]);
                                        n.attach(o, y), o++, s++;
                                    }
                                }
                                for (; o <= a; ) HD(n, i, t, o, e[o]), o++;
                            } else if (null != e) {
                                const a = e[Symbol.iterator]();
                                let l = a.next();
                                for (; !l.done && o <= s; ) {
                                    const c = n.at(o),
                                        u = l.value,
                                        d = Fg(o, c, o, u, t);
                                    if (0 !== d) d < 0 && n.updateValue(o, u), o++, (l = a.next());
                                    else {
                                        (i ??= new zD()), (r ??= UD(n, o, s, t));
                                        const h = t(o, u);
                                        if (Lg(n, i, o, h)) n.updateValue(o, u), o++, s++, (l = a.next());
                                        else if (r.has(h)) {
                                            const f = t(o, c);
                                            i.set(f, n.detach(o)), s--;
                                        } else n.attach(o, n.create(o, u)), o++, s++, (l = a.next());
                                    }
                                }
                                for (; !l.done; ) HD(n, i, t, n.length, l.value), (l = a.next());
                            }
                            for (; o <= s; ) n.destroy(n.detach(s--));
                            i?.forEach((a) => {
                                n.destroy(a);
                            });
                        })(s, n, o.trackByFn),
                        s.updateIndexes(),
                        o.hasEmptyBlock)
                    ) {
                        const a = Yn(),
                            l = 0 === s.length;
                        if (ct(i, a, l)) {
                            const c = t + 2,
                                u = Vg(i, c);
                            if (l) {
                                const d = Hg(r, c),
                                    h = ks(u, d.tView.ssrId);
                                yl(u, _l(i, d, void 0, { dehydratedView: h }), 0, Ps(d, h));
                            } else
                                !(function Wp(n, e) {
                                    const t = ml(n, e);
                                    return void 0 !== t && Xu(t[O], t), t;
                                })(u, 0);
                        }
                    }
                } finally {
                    Ze(e);
                }
            }
            function Vg(n, e) {
                return n[e];
            }
            function Hg(n, e) {
                return Za(n, e);
            }
            function Bt(n, e, t, i) {
                const r = C(),
                    o = ge(),
                    s = oe + n,
                    a = r[re],
                    l = o.firstCreatePass
                        ? (function sj(n, e, t, i, r, o) {
                              const s = e.consts,
                                  l = Ns(e, n, 2, i, di(s, r));
                              return (
                                  jp(e, t, l, di(s, o)),
                                  null !== l.attrs && fd(l, l.attrs, !1),
                                  null !== l.mergedAttrs && fd(l, l.mergedAttrs, !0),
                                  null !== e.queries && e.queries.elementStart(e, l),
                                  l
                              );
                          })(s, o, r, e, t, i)
                        : o.data[s],
                    c = GD(o, r, l, a, e, n);
                r[s] = c;
                const u = ou(l);
                return (
                    hi(l, !0),
                    _w(a, c, l),
                    32 != (32 & l.flags) && lu() && Zu(o, r, c, l),
                    0 ===
                        (function tP() {
                            return te.lFrame.elementDepthCount;
                        })() && Lt(c, r),
                    (function nP() {
                        te.lFrame.elementDepthCount++;
                    })(),
                    u && (Fp(o, r, l), kp(o, l, r)),
                    null !== i && Lp(r, l),
                    Bt
                );
            }
            function an() {
                let n = Ne();
                fm() ? mm() : ((n = n.parent), hi(n, !1));
                const e = n;
                (function rP(n) {
                    return te.skipHydrationRootTNode === n;
                })(e) &&
                    (function lP() {
                        te.skipHydrationRootTNode = null;
                    })(),
                    (function iP() {
                        te.lFrame.elementDepthCount--;
                    })();
                const t = ge();
                return (
                    t.firstCreatePass && (Au(t, n), nm(n) && t.queries.elementEnd(n)),
                    null != e.classesWithoutHost &&
                        (function xk(n) {
                            return 0 != (8 & n.flags);
                        })(e) &&
                        Pg(t, e, C(), e.classesWithoutHost, !0),
                    null != e.stylesWithoutHost &&
                        (function Sk(n) {
                            return 0 != (16 & n.flags);
                        })(e) &&
                        Pg(t, e, C(), e.stylesWithoutHost, !1),
                    an
                );
            }
            function Ei(n, e, t, i) {
                return Bt(n, e, t, i), an(), Ei;
            }
            let GD = (n, e, t, i, r, o) => (
                gr(!0),
                qu(
                    i,
                    r,
                    (function ME() {
                        return te.lFrame.currentNamespace;
                    })(),
                )
            );
            function Gg() {
                return C();
            }
            function Wg(n, e, t) {
                const i = C();
                if (ct(i, Yn(), e)) {
                    const o = ge(),
                        s = Ge();
                    sn(o, s, i, n, e, Ow(gm(o.data), s, i), t, !0);
                }
                return Wg;
            }
            const ta = 'en-US';
            let KD = ta;
            function na(n, e, t, i) {
                const r = C(),
                    o = ge(),
                    s = Ne();
                return Xg(o, r, r[re], s, n, e, i), na;
            }
            function qg(n, e) {
                const t = Ne(),
                    i = C(),
                    r = ge();
                return Xg(r, i, Ow(gm(r.data), t, i), t, n, e), qg;
            }
            function Xg(n, e, t, i, r, o, s) {
                const a = ou(i),
                    c = n.firstCreatePass && Aw(n),
                    u = e[ze],
                    d = Rw(e);
                let h = !0;
                if (3 & i.type || s) {
                    const p = Gt(i, e),
                        g = s ? s(p) : p,
                        y = d.length,
                        _ = s ? (v) => s(Fe(v[i.index])) : i.index;
                    let b = null;
                    if (
                        (!s &&
                            a &&
                            (b = (function lV(n, e, t, i) {
                                const r = n.cleanup;
                                if (null != r)
                                    for (let o = 0; o < r.length - 1; o += 2) {
                                        const s = r[o];
                                        if (s === t && r[o + 1] === i) {
                                            const a = e[rs],
                                                l = r[o + 2];
                                            return a.length > l ? a[l] : null;
                                        }
                                        'string' == typeof s && (o += 2);
                                    }
                                return null;
                            })(n, e, r, i.index)),
                        null !== b)
                    )
                        ((b.__ngLastListenerFn__ || b).__ngNextListenerFn__ = o), (b.__ngLastListenerFn__ = o), (h = !1);
                    else {
                        o = wI(i, e, u, o, !1);
                        const v = t.listen(g, r, o);
                        d.push(o, v), c && c.push(r, _, y, y + 1);
                    }
                } else o = wI(i, e, u, o, !1);
                const f = i.outputs;
                let m;
                if (h && null !== f && (m = f[r])) {
                    const p = m.length;
                    if (p)
                        for (let g = 0; g < p; g += 2) {
                            const E = e[m[g]][m[g + 1]].subscribe(o),
                                R = d.length;
                            d.push(o, E), c && c.push(r, i.index, R, 'function' == typeof E ? R + 1 : -(R + 1));
                        }
                }
            }
            function EI(n, e, t, i) {
                try {
                    return fi(6, e, t), !1 !== t(i);
                } catch (r) {
                    return nd(n, r), !1;
                } finally {
                    fi(7, e, t);
                }
            }
            function wI(n, e, t, i, r) {
                return function o(s) {
                    if (s === Function) return i;
                    vl(n.componentOffset > -1 ? _n(n.index, e) : e);
                    let l = EI(e, t, i, s),
                        c = o.__ngNextListenerFn__;
                    for (; c; ) (l = EI(e, t, c, s) && l), (c = c.__ngNextListenerFn__);
                    return r && !1 === l && s.preventDefault(), l;
                };
            }
            function Rd(n = 1) {
                return (function mP(n) {
                    return (te.lFrame.contextLView = (function _E(n, e) {
                        for (; n > 0; ) (e = e[os]), n--;
                        return e;
                    })(n, te.lFrame.contextLView))[ze];
                })(n);
            }
            function cV(n, e) {
                let t = null;
                const i = (function FN(n) {
                    const e = n.attrs;
                    if (null != e) {
                        const t = e.indexOf(5);
                        if (!(1 & t)) return e[t + 1];
                    }
                    return null;
                })(n);
                for (let r = 0; r < e.length; r++) {
                    const o = e[r];
                    if ('*' !== o) {
                        if (null === i ? nE(n, o, !0) : jN(i, o)) return r;
                    } else t = r;
                }
                return t;
            }
            function Ul(n) {
                const e = C()[Je][Ot];
                if (!e.projection) {
                    const i = (e.projection = (function uu(n, e) {
                            const t = [];
                            for (let i = 0; i < n; i++) t.push(e);
                            return t;
                        })(n ? n.length : 1, null)),
                        r = i.slice();
                    let o = e.child;
                    for (; null !== o; ) {
                        const s = n ? cV(o, n) : 0;
                        null !== s && (r[s] ? (r[s].projectionNext = o) : (i[s] = o), (r[s] = o)), (o = o.next);
                    }
                }
            }
            function zi(n, e = 0, t) {
                const i = C(),
                    r = ge(),
                    o = Ns(r, oe + n, 16, null, t || null);
                null === o.projection && (o.projection = e),
                    mm(),
                    (!i[Wn] || cs()) &&
                        32 != (32 & o.flags) &&
                        (function J1(n, e, t) {
                            pw(e[re], 0, e, t, Rp(n, t, e), cw(t.parent || e[Ot], t, e));
                        })(r, i, o);
            }
            function PI() {
                return (function pg(n, e) {
                    return n[Fi].queries[e].queryList;
                })(C(), _m());
            }
            function Tr(n, e = '') {
                const t = C(),
                    i = ge(),
                    r = n + oe,
                    o = i.firstCreatePass ? Ns(i, r, 1, e, null) : i.data[r],
                    s = GI(i, t, o, e, n);
                (t[r] = s), lu() && Zu(i, t, s, o), hi(o, !1);
            }
            let GI = (n, e, t, i, r) => (
                gr(!0),
                (function Yu(n, e) {
                    return n.createText(e);
                })(e[re], i)
            );
            function Zg(n) {
                return zl('', n, ''), Zg;
            }
            function zl(n, e, t) {
                const i = C(),
                    r = (function Ws(n, e, t, i) {
                        return ct(n, Yn(), t) ? e + se(t) + i : ae;
                    })(i, n, e, t);
                return (
                    r !== ae &&
                        (function Hi(n, e, t) {
                            const i = Ka(e, n);
                            !(function iw(n, e, t) {
                                n.setValue(e, t);
                            })(n[re], i, t);
                        })(i, Ft(), r),
                    zl
                );
            }
            let NV = (() => {
                class n {
                    constructor(t) {
                        (this._injector = t), (this.cachedInjectors = new Map());
                    }
                    getOrCreateStandaloneInjector(t) {
                        if (!t.standalone) return null;
                        if (!this.cachedInjectors.has(t)) {
                            const i = QE(0, t.type),
                                r =
                                    i.length > 0
                                        ? (function j2(n, e, t = null) {
                                              return new qC({ providers: n, parent: e, debugName: t, runEnvironmentInitializers: !0 })
                                                  .injector;
                                          })([i], this._injector, `Standalone[${t.type.name}]`)
                                        : null;
                            this.cachedInjectors.set(t, r);
                        }
                        return this.cachedInjectors.get(t);
                    }
                    ngOnDestroy() {
                        try {
                            for (const t of this.cachedInjectors.values()) null !== t && t.destroy();
                        } finally {
                            this.cachedInjectors.clear();
                        }
                    }
                    static #e = (this.ɵprov = j({ token: n, providedIn: 'environment', factory: () => new n(T(ji)) }));
                }
                return n;
            })();
            function Gi(n) {
                wr('NgStandalone'), (n.getStandaloneInjector = (e) => e.get(NV).getOrCreateStandaloneInjector(n));
            }
            const Px = new L('');
            function d_(n) {
                return !!n && 'function' == typeof n.then;
            }
            function kx(n) {
                return !!n && 'function' == typeof n.subscribe;
            }
            const tU = new L('');
            let h_ = (() => {
                class n {
                    constructor() {
                        (this.initialized = !1),
                            (this.done = !1),
                            (this.donePromise = new Promise((t, i) => {
                                (this.resolve = t), (this.reject = i);
                            })),
                            (this.appInits = $(tU, { optional: !0 }) ?? []);
                    }
                    runInitializers() {
                        if (this.initialized) return;
                        const t = [];
                        for (const r of this.appInits) {
                            const o = r();
                            if (d_(o)) t.push(o);
                            else if (kx(o)) {
                                const s = new Promise((a, l) => {
                                    o.subscribe({ complete: a, error: l });
                                });
                                t.push(s);
                            }
                        }
                        const i = () => {
                            (this.done = !0), this.resolve();
                        };
                        Promise.all(t)
                            .then(() => {
                                i();
                            })
                            .catch((r) => {
                                this.reject(r);
                            }),
                            0 === t.length && i(),
                            (this.initialized = !0);
                    }
                    static #e = (this.ɵfac = function (i) {
                        return new (i || n)();
                    });
                    static #t = (this.ɵprov = j({ token: n, factory: n.ɵfac, providedIn: 'root' }));
                }
                return n;
            })();
            const Fx = new L('');
            let wo = (() => {
                class n {
                    constructor() {
                        (this._bootstrapListeners = []),
                            (this._runningTick = !1),
                            (this._destroyed = !1),
                            (this._destroyListeners = []),
                            (this._views = []),
                            (this.internalErrorHandler = $(T0)),
                            (this.afterRenderEffectManager = $(xl)),
                            (this.componentTypes = []),
                            (this.components = []),
                            (this.isStable = $(_d).hasPendingTasks.pipe(Ut((t) => !t))),
                            (this._injector = $(ji));
                    }
                    get destroyed() {
                        return this._destroyed;
                    }
                    get injector() {
                        return this._injector;
                    }
                    bootstrap(t, i) {
                        const r = t instanceof Xw;
                        if (!this._injector.get(h_).done)
                            throw (
                                (!r &&
                                    (function no(n) {
                                        const e = fe(n) || yt(n) || St(n);
                                        return null !== e && e.standalone;
                                    })(t),
                                new S(405, !1))
                            );
                        let s;
                        (s = r ? t : this._injector.get(Fs).resolveComponentFactory(t)), this.componentTypes.push(s.componentType);
                        const a = (function nU(n) {
                                return n.isBoundToModule;
                            })(s)
                                ? void 0
                                : this._injector.get(go),
                            c = s.create(Mt.NULL, [], i || s.selector, a),
                            u = c.location.nativeElement,
                            d = c.injector.get(Px, null);
                        return (
                            d?.registerApplication(u),
                            c.onDestroy(() => {
                                this.detachView(c.hostView), Fd(this.components, c), d?.unregisterApplication(u);
                            }),
                            this._loadComponent(c),
                            c
                        );
                    }
                    tick() {
                        if (this._runningTick) throw new S(101, !1);
                        try {
                            (this._runningTick = !0), this.detectChangesInAttachedViews();
                        } catch (t) {
                            this.internalErrorHandler(t);
                        } finally {
                            this._runningTick = !1;
                        }
                    }
                    detectChangesInAttachedViews() {
                        let t = 0;
                        do {
                            if (100 === t) throw new S(103, !1);
                            const i = 0 === t;
                            for (let { _lView: r, notifyErrorHandler: o } of this._views)
                                (!i && !Vx(r)) || this.detectChangesInView(r, o, i);
                            this.afterRenderEffectManager.execute(), t++;
                        } while (this._views.some(({ _lView: i }) => Vx(i)));
                    }
                    detectChangesInView(t, i, r) {
                        let o;
                        r ? ((o = 0), (t[G] |= 1024)) : (o = 64 & t[G] ? 0 : 1), id(t, i, o);
                    }
                    attachView(t) {
                        const i = t;
                        this._views.push(i), i.attachToAppRef(this);
                    }
                    detachView(t) {
                        const i = t;
                        Fd(this._views, i), i.detachFromAppRef();
                    }
                    _loadComponent(t) {
                        this.attachView(t.hostView), this.tick(), this.components.push(t);
                        const i = this._injector.get(Fx, []);
                        [...this._bootstrapListeners, ...i].forEach((r) => r(t));
                    }
                    ngOnDestroy() {
                        if (!this._destroyed)
                            try {
                                this._destroyListeners.forEach((t) => t()), this._views.slice().forEach((t) => t.destroy());
                            } finally {
                                (this._destroyed = !0), (this._views = []), (this._bootstrapListeners = []), (this._destroyListeners = []);
                            }
                    }
                    onDestroy(t) {
                        return this._destroyListeners.push(t), () => Fd(this._destroyListeners, t);
                    }
                    destroy() {
                        if (this._destroyed) throw new S(406, !1);
                        const t = this._injector;
                        t.destroy && !t.destroyed && t.destroy();
                    }
                    get viewCount() {
                        return this._views.length;
                    }
                    warnIfDestroyed() {}
                    static #e = (this.ɵfac = function (i) {
                        return new (i || n)();
                    });
                    static #t = (this.ɵprov = j({ token: n, factory: n.ɵfac, providedIn: 'root' }));
                }
                return n;
            })();
            function Fd(n, e) {
                const t = n.indexOf(e);
                t > -1 && n.splice(t, 1);
            }
            function Vx(n) {
                return lm(n);
            }
            let aU = (() => {
                class n {
                    constructor() {
                        (this.zone = $(ce)), (this.applicationRef = $(wo));
                    }
                    initialize() {
                        this._onMicrotaskEmptySubscription ||
                            (this._onMicrotaskEmptySubscription = this.zone.onMicrotaskEmpty.subscribe({
                                next: () => {
                                    this.zone.run(() => {
                                        this.applicationRef.tick();
                                    });
                                },
                            }));
                    }
                    ngOnDestroy() {
                        this._onMicrotaskEmptySubscription?.unsubscribe();
                    }
                    static #e = (this.ɵfac = function (i) {
                        return new (i || n)();
                    });
                    static #t = (this.ɵprov = j({ token: n, factory: n.ɵfac, providedIn: 'root' }));
                }
                return n;
            })();
            function Ux(n) {
                return [
                    { provide: ce, useFactory: n },
                    {
                        provide: ws,
                        multi: !0,
                        useFactory: () => {
                            const e = $(aU, { optional: !0 });
                            return () => e.initialize();
                        },
                    },
                    {
                        provide: ws,
                        multi: !0,
                        useFactory: () => {
                            const e = $(uU);
                            return () => {
                                e.initialize();
                            };
                        },
                    },
                    { provide: T0, useFactory: lU },
                ];
            }
            function lU() {
                const n = $(ce),
                    e = $(Mn);
                return (t) => n.runOutsideAngular(() => e.handleError(t));
            }
            function cU(n) {
                return (function Km(n) {
                    return { ɵproviders: n };
                })([
                    [],
                    Ux(
                        () =>
                            new ce(
                                (function zx(n) {
                                    return {
                                        enableLongStackTrace: !1,
                                        shouldCoalesceEventChangeDetection: n?.eventCoalescing ?? !1,
                                        shouldCoalesceRunChangeDetection: n?.runCoalescing ?? !1,
                                    };
                                })(n),
                            ),
                    ),
                ]);
            }
            let uU = (() => {
                class n {
                    constructor() {
                        (this.subscription = new xt()), (this.initialized = !1), (this.zone = $(ce)), (this.pendingTasks = $(_d));
                    }
                    initialize() {
                        if (this.initialized) return;
                        this.initialized = !0;
                        let t = null;
                        !this.zone.isStable &&
                            !this.zone.hasPendingMacrotasks &&
                            !this.zone.hasPendingMicrotasks &&
                            (t = this.pendingTasks.add()),
                            this.zone.runOutsideAngular(() => {
                                this.subscription.add(
                                    this.zone.onStable.subscribe(() => {
                                        ce.assertNotInAngularZone(),
                                            queueMicrotask(() => {
                                                null !== t &&
                                                    !this.zone.hasPendingMacrotasks &&
                                                    !this.zone.hasPendingMicrotasks &&
                                                    (this.pendingTasks.remove(t), (t = null));
                                            });
                                    }),
                                );
                            }),
                            this.subscription.add(
                                this.zone.onUnstable.subscribe(() => {
                                    ce.assertInAngularZone(), (t ??= this.pendingTasks.add());
                                }),
                            );
                    }
                    ngOnDestroy() {
                        this.subscription.unsubscribe();
                    }
                    static #e = (this.ɵfac = function (i) {
                        return new (i || n)();
                    });
                    static #t = (this.ɵprov = j({ token: n, factory: n.ɵfac, providedIn: 'root' }));
                }
                return n;
            })();
            const wi = new L('', {
                    providedIn: 'root',
                    factory: () =>
                        $(wi, ye.Optional | ye.SkipSelf) ||
                        (function dU() {
                            return (typeof $localize < 'u' && $localize.locale) || ta;
                        })(),
                }),
                f_ = new L('');
            let Mr = null;
            function PU(n) {
                try {
                    const { rootComponent: e, appProviders: t, platformProviders: i } = n,
                        r = (function gU(n = []) {
                            if (Mr) return Mr;
                            const e = (function $x(n = [], e) {
                                return Mt.create({
                                    name: e,
                                    providers: [
                                        { provide: Jm, useValue: 'platform' },
                                        { provide: f_, useValue: new Set([() => (Mr = null)]) },
                                        ...n,
                                    ],
                                });
                            })(n);
                            return (
                                (Mr = e),
                                (function Lx() {
                                    !(function lN(n) {
                                        fr = n;
                                    })(() => {
                                        throw new S(600, !1);
                                    });
                                })(),
                                (function Yx(n) {
                                    n.get(jE, null)?.forEach((t) => t());
                                })(e),
                                e
                            );
                        })(i),
                        o = [cU(), ...(t || [])],
                        a = new qC({ providers: o, parent: r, debugName: '', runEnvironmentInitializers: !1 }).injector,
                        l = a.get(ce);
                    return l.run(() => {
                        a.resolveInjectorInitializers();
                        const c = a.get(Mn, null);
                        let u;
                        l.runOutsideAngular(() => {
                            u = l.onError.subscribe({
                                next: (f) => {
                                    c.handleError(f);
                                },
                            });
                        });
                        const d = () => a.destroy(),
                            h = r.get(f_);
                        return (
                            h.add(d),
                            a.onDestroy(() => {
                                u.unsubscribe(), h.delete(d);
                            }),
                            (function Bx(n, e, t) {
                                try {
                                    const i = t();
                                    return d_(i)
                                        ? i.catch((r) => {
                                              throw (e.runOutsideAngular(() => n.handleError(r)), r);
                                          })
                                        : i;
                                } catch (i) {
                                    throw (e.runOutsideAngular(() => n.handleError(i)), i);
                                }
                            })(c, l, () => {
                                const f = a.get(h_);
                                return (
                                    f.runInitializers(),
                                    f.donePromise.then(() => {
                                        !(function ZD(n) {
                                            'string' == typeof n && (KD = n.toLowerCase().replace(/_/g, '-'));
                                        })(a.get(wi, ta) || ta);
                                        const p = a.get(wo);
                                        return void 0 !== e && p.bootstrap(e), p;
                                    })
                                );
                            })
                        );
                    });
                } catch (e) {
                    return Promise.reject(e);
                }
            }
            function Kl(n) {
                return 'boolean' == typeof n ? n : null != n && 'false' !== n;
            }
            let yS = null;
            function sa() {
                return yS;
            }
            class XU {}
            const De = new L('');
            let bS = (() => {
                    class n {
                        historyGo(t) {
                            throw new Error('');
                        }
                        static #e = (this.ɵfac = function (i) {
                            return new (i || n)();
                        });
                        static #t = (this.ɵprov = j({ token: n, factory: () => $(KU), providedIn: 'platform' }));
                    }
                    return n;
                })(),
                KU = (() => {
                    class n extends bS {
                        constructor() {
                            super(), (this._doc = $(De)), (this._location = window.location), (this._history = window.history);
                        }
                        getBaseHrefFromDOM() {
                            return sa().getBaseHref(this._doc);
                        }
                        onPopState(t) {
                            const i = sa().getGlobalEventTarget(this._doc, 'window');
                            return i.addEventListener('popstate', t, !1), () => i.removeEventListener('popstate', t);
                        }
                        onHashChange(t) {
                            const i = sa().getGlobalEventTarget(this._doc, 'window');
                            return i.addEventListener('hashchange', t, !1), () => i.removeEventListener('hashchange', t);
                        }
                        get href() {
                            return this._location.href;
                        }
                        get protocol() {
                            return this._location.protocol;
                        }
                        get hostname() {
                            return this._location.hostname;
                        }
                        get port() {
                            return this._location.port;
                        }
                        get pathname() {
                            return this._location.pathname;
                        }
                        get search() {
                            return this._location.search;
                        }
                        get hash() {
                            return this._location.hash;
                        }
                        set pathname(t) {
                            this._location.pathname = t;
                        }
                        pushState(t, i, r) {
                            this._history.pushState(t, i, r);
                        }
                        replaceState(t, i, r) {
                            this._history.replaceState(t, i, r);
                        }
                        forward() {
                            this._history.forward();
                        }
                        back() {
                            this._history.back();
                        }
                        historyGo(t = 0) {
                            this._history.go(t);
                        }
                        getState() {
                            return this._history.state;
                        }
                        static #e = (this.ɵfac = function (i) {
                            return new (i || n)();
                        });
                        static #t = (this.ɵprov = j({ token: n, factory: () => new n(), providedIn: 'platform' }));
                    }
                    return n;
                })();
            function vS(n, e) {
                if (0 == n.length) return e;
                if (0 == e.length) return n;
                let t = 0;
                return n.endsWith('/') && t++, e.startsWith('/') && t++, 2 == t ? n + e.substring(1) : 1 == t ? n + e : n + '/' + e;
            }
            function ES(n) {
                const e = n.match(/#|\?|$/),
                    t = (e && e.index) || n.length;
                return n.slice(0, t - ('/' === n[t - 1] ? 1 : 0)) + n.slice(t);
            }
            function Do(n) {
                return n && '?' !== n[0] ? '?' + n : n;
            }
            let E_ = (() => {
                class n {
                    historyGo(t) {
                        throw new Error('');
                    }
                    static #e = (this.ɵfac = function (i) {
                        return new (i || n)();
                    });
                    static #t = (this.ɵprov = j({ token: n, factory: () => $(QU), providedIn: 'root' }));
                }
                return n;
            })();
            const ZU = new L('');
            let QU = (() => {
                    class n extends E_ {
                        constructor(t, i) {
                            super(),
                                (this._platformLocation = t),
                                (this._removeListenerFns = []),
                                (this._baseHref = i ?? this._platformLocation.getBaseHrefFromDOM() ?? $(De).location?.origin ?? '');
                        }
                        ngOnDestroy() {
                            for (; this._removeListenerFns.length; ) this._removeListenerFns.pop()();
                        }
                        onPopState(t) {
                            this._removeListenerFns.push(this._platformLocation.onPopState(t), this._platformLocation.onHashChange(t));
                        }
                        getBaseHref() {
                            return this._baseHref;
                        }
                        prepareExternalUrl(t) {
                            return vS(this._baseHref, t);
                        }
                        path(t = !1) {
                            const i = this._platformLocation.pathname + Do(this._platformLocation.search),
                                r = this._platformLocation.hash;
                            return r && t ? `${i}${r}` : i;
                        }
                        pushState(t, i, r, o) {
                            const s = this.prepareExternalUrl(r + Do(o));
                            this._platformLocation.pushState(t, i, s);
                        }
                        replaceState(t, i, r, o) {
                            const s = this.prepareExternalUrl(r + Do(o));
                            this._platformLocation.replaceState(t, i, s);
                        }
                        forward() {
                            this._platformLocation.forward();
                        }
                        back() {
                            this._platformLocation.back();
                        }
                        getState() {
                            return this._platformLocation.getState();
                        }
                        historyGo(t = 0) {
                            this._platformLocation.historyGo?.(t);
                        }
                        static #e = (this.ɵfac = function (i) {
                            return new (i || n)(T(bS), T(ZU, 8));
                        });
                        static #t = (this.ɵprov = j({ token: n, factory: n.ɵfac, providedIn: 'root' }));
                    }
                    return n;
                })(),
                wS = (() => {
                    class n {
                        constructor(t) {
                            (this._subject = new en()),
                                (this._urlChangeListeners = []),
                                (this._urlChangeSubscription = null),
                                (this._locationStrategy = t);
                            const i = this._locationStrategy.getBaseHref();
                            (this._basePath = (function tz(n) {
                                if (new RegExp('^(https?:)?//').test(n)) {
                                    const [, t] = n.split(/\/\/[^\/]+/);
                                    return t;
                                }
                                return n;
                            })(ES(CS(i)))),
                                this._locationStrategy.onPopState((r) => {
                                    this._subject.emit({ url: this.path(!0), pop: !0, state: r.state, type: r.type });
                                });
                        }
                        ngOnDestroy() {
                            this._urlChangeSubscription?.unsubscribe(), (this._urlChangeListeners = []);
                        }
                        path(t = !1) {
                            return this.normalize(this._locationStrategy.path(t));
                        }
                        getState() {
                            return this._locationStrategy.getState();
                        }
                        isCurrentPathEqualTo(t, i = '') {
                            return this.path() == this.normalize(t + Do(i));
                        }
                        normalize(t) {
                            return n.stripTrailingSlash(
                                (function ez(n, e) {
                                    if (!n || !e.startsWith(n)) return e;
                                    const t = e.substring(n.length);
                                    return '' === t || ['/', ';', '?', '#'].includes(t[0]) ? t : e;
                                })(this._basePath, CS(t)),
                            );
                        }
                        prepareExternalUrl(t) {
                            return t && '/' !== t[0] && (t = '/' + t), this._locationStrategy.prepareExternalUrl(t);
                        }
                        go(t, i = '', r = null) {
                            this._locationStrategy.pushState(r, '', t, i),
                                this._notifyUrlChangeListeners(this.prepareExternalUrl(t + Do(i)), r);
                        }
                        replaceState(t, i = '', r = null) {
                            this._locationStrategy.replaceState(r, '', t, i),
                                this._notifyUrlChangeListeners(this.prepareExternalUrl(t + Do(i)), r);
                        }
                        forward() {
                            this._locationStrategy.forward();
                        }
                        back() {
                            this._locationStrategy.back();
                        }
                        historyGo(t = 0) {
                            this._locationStrategy.historyGo?.(t);
                        }
                        onUrlChange(t) {
                            return (
                                this._urlChangeListeners.push(t),
                                (this._urlChangeSubscription ??= this.subscribe((i) => {
                                    this._notifyUrlChangeListeners(i.url, i.state);
                                })),
                                () => {
                                    const i = this._urlChangeListeners.indexOf(t);
                                    this._urlChangeListeners.splice(i, 1),
                                        0 === this._urlChangeListeners.length &&
                                            (this._urlChangeSubscription?.unsubscribe(), (this._urlChangeSubscription = null));
                                }
                            );
                        }
                        _notifyUrlChangeListeners(t = '', i) {
                            this._urlChangeListeners.forEach((r) => r(t, i));
                        }
                        subscribe(t, i, r) {
                            return this._subject.subscribe({ next: t, error: i, complete: r });
                        }
                        static #e = (this.normalizeQueryParams = Do);
                        static #t = (this.joinWithSlash = vS);
                        static #n = (this.stripTrailingSlash = ES);
                        static #i = (this.ɵfac = function (i) {
                            return new (i || n)(T(E_));
                        });
                        static #r = (this.ɵprov = j({
                            token: n,
                            factory: () =>
                                (function JU() {
                                    return new wS(T(E_));
                                })(),
                            providedIn: 'root',
                        }));
                    }
                    return n;
                })();
            function CS(n) {
                return n.replace(/\/index.html$/, '');
            }
            const BS = 'browser';
            function jS(n) {
                return 'server' === n;
            }
            class KG extends XU {
                constructor() {
                    super(...arguments), (this.supportsDOMEvents = !0);
                }
            }
            class L_ extends KG {
                static makeCurrent() {
                    !(function qU(n) {
                        yS ??= n;
                    })(new L_());
                }
                onAndCancel(e, t, i) {
                    return (
                        e.addEventListener(t, i),
                        () => {
                            e.removeEventListener(t, i);
                        }
                    );
                }
                dispatchEvent(e, t) {
                    e.dispatchEvent(t);
                }
                remove(e) {
                    e.parentNode && e.parentNode.removeChild(e);
                }
                createElement(e, t) {
                    return (t = t || this.getDefaultDocument()).createElement(e);
                }
                createHtmlDocument() {
                    return document.implementation.createHTMLDocument('fakeTitle');
                }
                getDefaultDocument() {
                    return document;
                }
                isElementNode(e) {
                    return e.nodeType === Node.ELEMENT_NODE;
                }
                isShadowRoot(e) {
                    return e instanceof DocumentFragment;
                }
                getGlobalEventTarget(e, t) {
                    return 'window' === t ? window : 'document' === t ? e : 'body' === t ? e.body : null;
                }
                getBaseHref(e) {
                    const t = (function ZG() {
                        return (ec = ec || document.querySelector('base')), ec ? ec.getAttribute('href') : null;
                    })();
                    return null == t
                        ? null
                        : (function QG(n) {
                              return new URL(n, document.baseURI).pathname;
                          })(t);
                }
                resetBaseElement() {
                    ec = null;
                }
                getUserAgent() {
                    return window.navigator.userAgent;
                }
                getCookie(e) {
                    return (function jz(n, e) {
                        e = encodeURIComponent(e);
                        for (const t of n.split(';')) {
                            const i = t.indexOf('='),
                                [r, o] = -1 == i ? [t, ''] : [t.slice(0, i), t.slice(i + 1)];
                            if (r.trim() === e) return decodeURIComponent(o);
                        }
                        return null;
                    })(document.cookie, e);
                }
            }
            let ec = null,
                e3 = (() => {
                    class n {
                        build() {
                            return new XMLHttpRequest();
                        }
                        static #e = (this.ɵfac = function (i) {
                            return new (i || n)();
                        });
                        static #t = (this.ɵprov = j({ token: n, factory: n.ɵfac }));
                    }
                    return n;
                })();
            const B_ = new L('');
            let qS = (() => {
                class n {
                    constructor(t, i) {
                        (this._zone = i),
                            (this._eventNameToPlugin = new Map()),
                            t.forEach((r) => {
                                r.manager = this;
                            }),
                            (this._plugins = t.slice().reverse());
                    }
                    addEventListener(t, i, r) {
                        return this._findPluginFor(i).addEventListener(t, i, r);
                    }
                    getZone() {
                        return this._zone;
                    }
                    _findPluginFor(t) {
                        let i = this._eventNameToPlugin.get(t);
                        if (i) return i;
                        if (((i = this._plugins.find((o) => o.supports(t))), !i)) throw new S(5101, !1);
                        return this._eventNameToPlugin.set(t, i), i;
                    }
                    static #e = (this.ɵfac = function (i) {
                        return new (i || n)(T(B_), T(ce));
                    });
                    static #t = (this.ɵprov = j({ token: n, factory: n.ɵfac }));
                }
                return n;
            })();
            class XS {
                constructor(e) {
                    this._doc = e;
                }
            }
            const j_ = 'ng-app-id';
            let KS = (() => {
                class n {
                    constructor(t, i, r, o = {}) {
                        (this.doc = t),
                            (this.appId = i),
                            (this.nonce = r),
                            (this.platformId = o),
                            (this.styleRef = new Map()),
                            (this.hostNodes = new Set()),
                            (this.styleNodesInDOM = this.collectServerRenderedStyles()),
                            (this.platformIsServer = jS(o)),
                            this.resetHostNodes();
                    }
                    addStyles(t) {
                        for (const i of t) 1 === this.changeUsageCount(i, 1) && this.onStyleAdded(i);
                    }
                    removeStyles(t) {
                        for (const i of t) this.changeUsageCount(i, -1) <= 0 && this.onStyleRemoved(i);
                    }
                    ngOnDestroy() {
                        const t = this.styleNodesInDOM;
                        t && (t.forEach((i) => i.remove()), t.clear());
                        for (const i of this.getAllStyles()) this.onStyleRemoved(i);
                        this.resetHostNodes();
                    }
                    addHost(t) {
                        this.hostNodes.add(t);
                        for (const i of this.getAllStyles()) this.addStyleToHost(t, i);
                    }
                    removeHost(t) {
                        this.hostNodes.delete(t);
                    }
                    getAllStyles() {
                        return this.styleRef.keys();
                    }
                    onStyleAdded(t) {
                        for (const i of this.hostNodes) this.addStyleToHost(i, t);
                    }
                    onStyleRemoved(t) {
                        const i = this.styleRef;
                        i.get(t)?.elements?.forEach((r) => r.remove()), i.delete(t);
                    }
                    collectServerRenderedStyles() {
                        const t = this.doc.head?.querySelectorAll(`style[${j_}="${this.appId}"]`);
                        if (t?.length) {
                            const i = new Map();
                            return (
                                t.forEach((r) => {
                                    null != r.textContent && i.set(r.textContent, r);
                                }),
                                i
                            );
                        }
                        return null;
                    }
                    changeUsageCount(t, i) {
                        const r = this.styleRef;
                        if (r.has(t)) {
                            const o = r.get(t);
                            return (o.usage += i), o.usage;
                        }
                        return r.set(t, { usage: i, elements: [] }), i;
                    }
                    getStyleElement(t, i) {
                        const r = this.styleNodesInDOM,
                            o = r?.get(i);
                        if (o?.parentNode === t) return r.delete(i), o.removeAttribute(j_), o;
                        {
                            const s = this.doc.createElement('style');
                            return (
                                this.nonce && s.setAttribute('nonce', this.nonce),
                                (s.textContent = i),
                                this.platformIsServer && s.setAttribute(j_, this.appId),
                                t.appendChild(s),
                                s
                            );
                        }
                    }
                    addStyleToHost(t, i) {
                        const r = this.getStyleElement(t, i),
                            o = this.styleRef,
                            s = o.get(i)?.elements;
                        s ? s.push(r) : o.set(i, { elements: [r], usage: 1 });
                    }
                    resetHostNodes() {
                        const t = this.hostNodes;
                        t.clear(), t.add(this.doc.head);
                    }
                    static #e = (this.ɵfac = function (i) {
                        return new (i || n)(T(De), T(Im), T(xm, 8), T(ao));
                    });
                    static #t = (this.ɵprov = j({ token: n, factory: n.ɵfac }));
                }
                return n;
            })();
            const V_ = {
                    svg: 'http://www.w3.org/2000/svg',
                    xhtml: 'http://www.w3.org/1999/xhtml',
                    xlink: 'http://www.w3.org/1999/xlink',
                    xml: 'http://www.w3.org/XML/1998/namespace',
                    xmlns: 'http://www.w3.org/2000/xmlns/',
                    math: 'http://www.w3.org/1998/MathML/',
                },
                H_ = /%COMP%/g,
                r3 = new L('', { providedIn: 'root', factory: () => !0 });
            function QS(n, e) {
                return e.map((t) => t.replace(H_, n));
            }
            let U_ = (() => {
                class n {
                    constructor(t, i, r, o, s, a, l, c = null) {
                        (this.eventManager = t),
                            (this.sharedStylesHost = i),
                            (this.appId = r),
                            (this.removeStylesOnCompDestroy = o),
                            (this.doc = s),
                            (this.platformId = a),
                            (this.ngZone = l),
                            (this.nonce = c),
                            (this.rendererByCompId = new Map()),
                            (this.platformIsServer = jS(a)),
                            (this.defaultRenderer = new z_(t, s, l, this.platformIsServer));
                    }
                    createRenderer(t, i) {
                        if (!t || !i) return this.defaultRenderer;
                        this.platformIsServer && i.encapsulation === Un.ShadowDom && (i = { ...i, encapsulation: Un.Emulated });
                        const r = this.getOrCreateRenderer(t, i);
                        return r instanceof eT ? r.applyToHost(t) : r instanceof G_ && r.applyStyles(), r;
                    }
                    getOrCreateRenderer(t, i) {
                        const r = this.rendererByCompId;
                        let o = r.get(i.id);
                        if (!o) {
                            const s = this.doc,
                                a = this.ngZone,
                                l = this.eventManager,
                                c = this.sharedStylesHost,
                                u = this.removeStylesOnCompDestroy,
                                d = this.platformIsServer;
                            switch (i.encapsulation) {
                                case Un.Emulated:
                                    o = new eT(l, c, i, this.appId, u, s, a, d);
                                    break;
                                case Un.ShadowDom:
                                    return new l3(l, c, t, i, s, a, this.nonce, d);
                                default:
                                    o = new G_(l, c, i, u, s, a, d);
                            }
                            r.set(i.id, o);
                        }
                        return o;
                    }
                    ngOnDestroy() {
                        this.rendererByCompId.clear();
                    }
                    static #e = (this.ɵfac = function (i) {
                        return new (i || n)(T(qS), T(KS), T(Im), T(r3), T(De), T(ao), T(ce), T(xm));
                    });
                    static #t = (this.ɵprov = j({ token: n, factory: n.ɵfac }));
                }
                return n;
            })();
            class z_ {
                constructor(e, t, i, r) {
                    (this.eventManager = e),
                        (this.doc = t),
                        (this.ngZone = i),
                        (this.platformIsServer = r),
                        (this.data = Object.create(null)),
                        (this.throwOnSyntheticProps = !0),
                        (this.destroyNode = null);
                }
                destroy() {}
                createElement(e, t) {
                    return t ? this.doc.createElementNS(V_[t] || t, e) : this.doc.createElement(e);
                }
                createComment(e) {
                    return this.doc.createComment(e);
                }
                createText(e) {
                    return this.doc.createTextNode(e);
                }
                appendChild(e, t) {
                    (JS(e) ? e.content : e).appendChild(t);
                }
                insertBefore(e, t, i) {
                    e && (JS(e) ? e.content : e).insertBefore(t, i);
                }
                removeChild(e, t) {
                    e && e.removeChild(t);
                }
                selectRootElement(e, t) {
                    let i = 'string' == typeof e ? this.doc.querySelector(e) : e;
                    if (!i) throw new S(-5104, !1);
                    return t || (i.textContent = ''), i;
                }
                parentNode(e) {
                    return e.parentNode;
                }
                nextSibling(e) {
                    return e.nextSibling;
                }
                setAttribute(e, t, i, r) {
                    if (r) {
                        t = r + ':' + t;
                        const o = V_[r];
                        o ? e.setAttributeNS(o, t, i) : e.setAttribute(t, i);
                    } else e.setAttribute(t, i);
                }
                removeAttribute(e, t, i) {
                    if (i) {
                        const r = V_[i];
                        r ? e.removeAttributeNS(r, t) : e.removeAttribute(`${i}:${t}`);
                    } else e.removeAttribute(t);
                }
                addClass(e, t) {
                    e.classList.add(t);
                }
                removeClass(e, t) {
                    e.classList.remove(t);
                }
                setStyle(e, t, i, r) {
                    r & (Er.DashCase | Er.Important) ? e.style.setProperty(t, i, r & Er.Important ? 'important' : '') : (e.style[t] = i);
                }
                removeStyle(e, t, i) {
                    i & Er.DashCase ? e.style.removeProperty(t) : (e.style[t] = '');
                }
                setProperty(e, t, i) {
                    null != e && (e[t] = i);
                }
                setValue(e, t) {
                    e.nodeValue = t;
                }
                listen(e, t, i) {
                    if ('string' == typeof e && !(e = sa().getGlobalEventTarget(this.doc, e)))
                        throw new Error(`Unsupported event target ${e} for event ${t}`);
                    return this.eventManager.addEventListener(e, t, this.decoratePreventDefault(i));
                }
                decoratePreventDefault(e) {
                    return (t) => {
                        if ('__ngUnwrap__' === t) return e;
                        !1 === (this.platformIsServer ? this.ngZone.runGuarded(() => e(t)) : e(t)) && t.preventDefault();
                    };
                }
            }
            function JS(n) {
                return 'TEMPLATE' === n.tagName && void 0 !== n.content;
            }
            class l3 extends z_ {
                constructor(e, t, i, r, o, s, a, l) {
                    super(e, o, s, l),
                        (this.sharedStylesHost = t),
                        (this.hostEl = i),
                        (this.shadowRoot = i.attachShadow({ mode: 'open' })),
                        this.sharedStylesHost.addHost(this.shadowRoot);
                    const c = QS(r.id, r.styles);
                    for (const u of c) {
                        const d = document.createElement('style');
                        a && d.setAttribute('nonce', a), (d.textContent = u), this.shadowRoot.appendChild(d);
                    }
                }
                nodeOrShadowRoot(e) {
                    return e === this.hostEl ? this.shadowRoot : e;
                }
                appendChild(e, t) {
                    return super.appendChild(this.nodeOrShadowRoot(e), t);
                }
                insertBefore(e, t, i) {
                    return super.insertBefore(this.nodeOrShadowRoot(e), t, i);
                }
                removeChild(e, t) {
                    return super.removeChild(this.nodeOrShadowRoot(e), t);
                }
                parentNode(e) {
                    return this.nodeOrShadowRoot(super.parentNode(this.nodeOrShadowRoot(e)));
                }
                destroy() {
                    this.sharedStylesHost.removeHost(this.shadowRoot);
                }
            }
            class G_ extends z_ {
                constructor(e, t, i, r, o, s, a, l) {
                    super(e, o, s, a),
                        (this.sharedStylesHost = t),
                        (this.removeStylesOnCompDestroy = r),
                        (this.styles = l ? QS(l, i.styles) : i.styles);
                }
                applyStyles() {
                    this.sharedStylesHost.addStyles(this.styles);
                }
                destroy() {
                    this.removeStylesOnCompDestroy && this.sharedStylesHost.removeStyles(this.styles);
                }
            }
            class eT extends G_ {
                constructor(e, t, i, r, o, s, a, l) {
                    const c = r + '-' + i.id;
                    super(e, t, i, o, s, a, l, c),
                        (this.contentAttr = (function o3(n) {
                            return '_ngcontent-%COMP%'.replace(H_, n);
                        })(c)),
                        (this.hostAttr = (function s3(n) {
                            return '_nghost-%COMP%'.replace(H_, n);
                        })(c));
                }
                applyToHost(e) {
                    this.applyStyles(), this.setAttribute(e, this.hostAttr, '');
                }
                createElement(e, t) {
                    const i = super.createElement(e, t);
                    return super.setAttribute(i, this.contentAttr, ''), i;
                }
            }
            const tT = ['alt', 'control', 'meta', 'shift'],
                u3 = {
                    '\b': 'Backspace',
                    '\t': 'Tab',
                    '\x7f': 'Delete',
                    '\x1b': 'Escape',
                    'Del': 'Delete',
                    'Esc': 'Escape',
                    'Left': 'ArrowLeft',
                    'Right': 'ArrowRight',
                    'Up': 'ArrowUp',
                    'Down': 'ArrowDown',
                    'Menu': 'ContextMenu',
                    'Scroll': 'ScrollLock',
                    'Win': 'OS',
                },
                d3 = { alt: (n) => n.altKey, control: (n) => n.ctrlKey, meta: (n) => n.metaKey, shift: (n) => n.shiftKey };
            function nT(n) {
                return { appProviders: [...b3, ...(n?.providers ?? [])], platformProviders: _3 };
            }
            const _3 = [
                    { provide: ao, useValue: BS },
                    {
                        provide: jE,
                        useValue: function m3() {
                            L_.makeCurrent();
                        },
                        multi: !0,
                    },
                    {
                        provide: De,
                        useFactory: function g3() {
                            return (
                                (function CP(n) {
                                    wm = n;
                                })(document),
                                document
                            );
                        },
                        deps: [],
                    },
                ],
                b3 = [
                    { provide: Jm, useValue: 'root' },
                    {
                        provide: Mn,
                        useFactory: function p3() {
                            return new Mn();
                        },
                        deps: [],
                    },
                    {
                        provide: B_,
                        useClass: (() => {
                            class n extends XS {
                                constructor(t) {
                                    super(t);
                                }
                                supports(t) {
                                    return !0;
                                }
                                addEventListener(t, i, r) {
                                    return t.addEventListener(i, r, !1), () => this.removeEventListener(t, i, r);
                                }
                                removeEventListener(t, i, r) {
                                    return t.removeEventListener(i, r);
                                }
                                static #e = (this.ɵfac = function (i) {
                                    return new (i || n)(T(De));
                                });
                                static #t = (this.ɵprov = j({ token: n, factory: n.ɵfac }));
                            }
                            return n;
                        })(),
                        multi: !0,
                        deps: [De, ce, ao],
                    },
                    {
                        provide: B_,
                        useClass: (() => {
                            class n extends XS {
                                constructor(t) {
                                    super(t);
                                }
                                supports(t) {
                                    return null != n.parseEventName(t);
                                }
                                addEventListener(t, i, r) {
                                    const o = n.parseEventName(i),
                                        s = n.eventCallback(o.fullKey, r, this.manager.getZone());
                                    return this.manager.getZone().runOutsideAngular(() => sa().onAndCancel(t, o.domEventName, s));
                                }
                                static parseEventName(t) {
                                    const i = t.toLowerCase().split('.'),
                                        r = i.shift();
                                    if (0 === i.length || ('keydown' !== r && 'keyup' !== r)) return null;
                                    const o = n._normalizeKey(i.pop());
                                    let s = '',
                                        a = i.indexOf('code');
                                    if (
                                        (a > -1 && (i.splice(a, 1), (s = 'code.')),
                                        tT.forEach((c) => {
                                            const u = i.indexOf(c);
                                            u > -1 && (i.splice(u, 1), (s += c + '.'));
                                        }),
                                        (s += o),
                                        0 != i.length || 0 === o.length)
                                    )
                                        return null;
                                    const l = {};
                                    return (l.domEventName = r), (l.fullKey = s), l;
                                }
                                static matchEventFullKeyCode(t, i) {
                                    let r = u3[t.key] || t.key,
                                        o = '';
                                    return (
                                        i.indexOf('code.') > -1 && ((r = t.code), (o = 'code.')),
                                        !(null == r || !r) &&
                                            ((r = r.toLowerCase()),
                                            ' ' === r ? (r = 'space') : '.' === r && (r = 'dot'),
                                            tT.forEach((s) => {
                                                s !== r && (0, d3[s])(t) && (o += s + '.');
                                            }),
                                            (o += r),
                                            o === i)
                                    );
                                }
                                static eventCallback(t, i, r) {
                                    return (o) => {
                                        n.matchEventFullKeyCode(o, t) && r.runGuarded(() => i(o));
                                    };
                                }
                                static _normalizeKey(t) {
                                    return 'esc' === t ? 'escape' : t;
                                }
                                static #e = (this.ɵfac = function (i) {
                                    return new (i || n)(T(De));
                                });
                                static #t = (this.ɵprov = j({ token: n, factory: n.ɵfac }));
                            }
                            return n;
                        })(),
                        multi: !0,
                        deps: [De],
                    },
                    U_,
                    KS,
                    qS,
                    { provide: Jp, useExisting: U_ },
                    { provide: class wG {}, useClass: e3, deps: [] },
                    [],
                ];
            let W_ = (() => {
                    class n {
                        static #e = (this.ɵfac = function (i) {
                            return new (i || n)();
                        });
                        static #t = (this.ɵprov = j({
                            token: n,
                            factory: function (i) {
                                let r = null;
                                return (r = i ? new (i || n)() : T(C3)), r;
                            },
                            providedIn: 'root',
                        }));
                    }
                    return n;
                })(),
                C3 = (() => {
                    class n extends W_ {
                        constructor(t) {
                            super(), (this._doc = t);
                        }
                        sanitize(t, i) {
                            if (null == i) return null;
                            switch (t) {
                                case Rt.NONE:
                                    return i;
                                case Rt.HTML:
                                    return pi(i, 'HTML') ? bn(i) : V0(this._doc, String(i)).toString();
                                case Rt.STYLE:
                                    return pi(i, 'Style') ? bn(i) : i;
                                case Rt.SCRIPT:
                                    if (pi(i, 'Script')) return bn(i);
                                    throw new S(5200, !1);
                                case Rt.URL:
                                    return pi(i, 'URL') ? bn(i) : zu(String(i));
                                case Rt.RESOURCE_URL:
                                    if (pi(i, 'ResourceURL')) return bn(i);
                                    throw new S(5201, !1);
                                default:
                                    throw new S(5202, !1);
                            }
                        }
                        bypassSecurityTrustHtml(t) {
                            return (function Qk(n) {
                                return new $k(n);
                            })(t);
                        }
                        bypassSecurityTrustStyle(t) {
                            return (function Jk(n) {
                                return new Yk(n);
                            })(t);
                        }
                        bypassSecurityTrustScript(t) {
                            return (function e1(n) {
                                return new qk(n);
                            })(t);
                        }
                        bypassSecurityTrustUrl(t) {
                            return (function t1(n) {
                                return new Xk(n);
                            })(t);
                        }
                        bypassSecurityTrustResourceUrl(t) {
                            return (function n1(n) {
                                return new Kk(n);
                            })(t);
                        }
                        static #e = (this.ɵfac = function (i) {
                            return new (i || n)(T(De));
                        });
                        static #t = (this.ɵprov = j({ token: n, factory: n.ɵfac, providedIn: 'root' }));
                    }
                    return n;
                })();
            function sT(n) {
                return n && Te(n.schedule);
            }
            function $_(n) {
                return n[n.length - 1];
            }
            function aT(n) {
                return Te($_(n)) ? n.pop() : void 0;
            }
            function nc(n) {
                return sT($_(n)) ? n.pop() : void 0;
            }
            function Rr(n) {
                return this instanceof Rr ? ((this.v = n), this) : new Rr(n);
            }
            function dT(n) {
                if (!Symbol.asyncIterator) throw new TypeError('Symbol.asyncIterator is not defined.');
                var t,
                    e = n[Symbol.asyncIterator];
                return e
                    ? e.call(n)
                    : ((n = (function K_(n) {
                          var e = 'function' == typeof Symbol && Symbol.iterator,
                              t = e && n[e],
                              i = 0;
                          if (t) return t.call(n);
                          if (n && 'number' == typeof n.length)
                              return {
                                  next: function () {
                                      return n && i >= n.length && (n = void 0), { value: n && n[i++], done: !n };
                                  },
                              };
                          throw new TypeError(e ? 'Object is not iterable.' : 'Symbol.iterator is not defined.');
                      })(n)),
                      (t = {}),
                      i('next'),
                      i('throw'),
                      i('return'),
                      (t[Symbol.asyncIterator] = function () {
                          return this;
                      }),
                      t);
                function i(o) {
                    t[o] =
                        n[o] &&
                        function (s) {
                            return new Promise(function (a, l) {
                                !(function r(o, s, a, l) {
                                    Promise.resolve(l).then(function (c) {
                                        o({ value: c, done: a });
                                    }, s);
                                })(a, l, (s = n[o](s)).done, s.value);
                            });
                        };
                }
            }
            'function' == typeof SuppressedError && SuppressedError;
            const Z_ = (n) => n && 'number' == typeof n.length && 'function' != typeof n;
            function hT(n) {
                return Te(n?.then);
            }
            function fT(n) {
                return Te(n[qf]);
            }
            function mT(n) {
                return Symbol.asyncIterator && Te(n?.[Symbol.asyncIterator]);
            }
            function pT(n) {
                return new TypeError(
                    `You provided ${null !== n && 'object' == typeof n ? 'an invalid object' : `'${n}'`} where a stream was expected. You can provide an Observable, Promise, ReadableStream, Array, AsyncIterable, or Iterable.`,
                );
            }
            const gT = (function $3() {
                return 'function' == typeof Symbol && Symbol.iterator ? Symbol.iterator : '@@iterator';
            })();
            function _T(n) {
                return Te(n?.[gT]);
            }
            function yT(n) {
                return (function uT(n, e, t) {
                    if (!Symbol.asyncIterator) throw new TypeError('Symbol.asyncIterator is not defined.');
                    var r,
                        i = t.apply(n, e || []),
                        o = [];
                    return (
                        (r = {}),
                        s('next'),
                        s('throw'),
                        s('return'),
                        (r[Symbol.asyncIterator] = function () {
                            return this;
                        }),
                        r
                    );
                    function s(h) {
                        i[h] &&
                            (r[h] = function (f) {
                                return new Promise(function (m, p) {
                                    o.push([h, f, m, p]) > 1 || a(h, f);
                                });
                            });
                    }
                    function a(h, f) {
                        try {
                            !(function l(h) {
                                h.value instanceof Rr ? Promise.resolve(h.value.v).then(c, u) : d(o[0][2], h);
                            })(i[h](f));
                        } catch (m) {
                            d(o[0][3], m);
                        }
                    }
                    function c(h) {
                        a('next', h);
                    }
                    function u(h) {
                        a('throw', h);
                    }
                    function d(h, f) {
                        h(f), o.shift(), o.length && a(o[0][0], o[0][1]);
                    }
                })(this, arguments, function* () {
                    const t = n.getReader();
                    try {
                        for (;;) {
                            const { value: i, done: r } = yield Rr(t.read());
                            if (r) return yield Rr(void 0);
                            yield yield Rr(i);
                        }
                    } finally {
                        t.releaseLock();
                    }
                });
            }
            function bT(n) {
                return Te(n?.getReader);
            }
            function cn(n) {
                if (n instanceof ht) return n;
                if (null != n) {
                    if (fT(n))
                        return (function Y3(n) {
                            return new ht((e) => {
                                const t = n[qf]();
                                if (Te(t.subscribe)) return t.subscribe(e);
                                throw new TypeError('Provided object does not correctly implement Symbol.observable');
                            });
                        })(n);
                    if (Z_(n))
                        return (function q3(n) {
                            return new ht((e) => {
                                for (let t = 0; t < n.length && !e.closed; t++) e.next(n[t]);
                                e.complete();
                            });
                        })(n);
                    if (hT(n))
                        return (function X3(n) {
                            return new ht((e) => {
                                n.then(
                                    (t) => {
                                        e.closed || (e.next(t), e.complete());
                                    },
                                    (t) => e.error(t),
                                ).then(null, Vv);
                            });
                        })(n);
                    if (mT(n)) return vT(n);
                    if (_T(n))
                        return (function K3(n) {
                            return new ht((e) => {
                                for (const t of n) if ((e.next(t), e.closed)) return;
                                e.complete();
                            });
                        })(n);
                    if (bT(n))
                        return (function Z3(n) {
                            return vT(yT(n));
                        })(n);
                }
                throw pT(n);
            }
            function vT(n) {
                return new ht((e) => {
                    (function Q3(n, e) {
                        var t, i, r, o;
                        return (function lT(n, e, t, i) {
                            return new (t || (t = Promise))(function (o, s) {
                                function a(u) {
                                    try {
                                        c(i.next(u));
                                    } catch (d) {
                                        s(d);
                                    }
                                }
                                function l(u) {
                                    try {
                                        c(i.throw(u));
                                    } catch (d) {
                                        s(d);
                                    }
                                }
                                function c(u) {
                                    u.done
                                        ? o(u.value)
                                        : (function r(o) {
                                              return o instanceof t
                                                  ? o
                                                  : new t(function (s) {
                                                        s(o);
                                                    });
                                          })(u.value).then(a, l);
                                }
                                c((i = i.apply(n, e || [])).next());
                            });
                        })(this, void 0, void 0, function* () {
                            try {
                                for (t = dT(n); !(i = yield t.next()).done; ) if ((e.next(i.value), e.closed)) return;
                            } catch (s) {
                                r = { error: s };
                            } finally {
                                try {
                                    i && !i.done && (o = t.return) && (yield o.call(t));
                                } finally {
                                    if (r) throw r.error;
                                }
                            }
                            e.complete();
                        });
                    })(n, e).catch((t) => e.error(t));
                });
            }
            function Yi(n, e, t, i = 0, r = !1) {
                const o = e.schedule(function () {
                    t(), r ? n.add(this.schedule(null, i)) : this.unsubscribe();
                }, i);
                if ((n.add(o), !r)) return o;
            }
            function ET(n, e = 0) {
                return Vt((t, i) => {
                    t.subscribe(
                        Ht(
                            i,
                            (r) => Yi(i, n, () => i.next(r), e),
                            () => Yi(i, n, () => i.complete(), e),
                            (r) => Yi(i, n, () => i.error(r), e),
                        ),
                    );
                });
            }
            function wT(n, e = 0) {
                return Vt((t, i) => {
                    i.add(n.schedule(() => t.subscribe(i), e));
                });
            }
            function CT(n, e) {
                if (!n) throw new Error('Iterable cannot be null');
                return new ht((t) => {
                    Yi(t, e, () => {
                        const i = n[Symbol.asyncIterator]();
                        Yi(
                            t,
                            e,
                            () => {
                                i.next().then((r) => {
                                    r.done ? t.complete() : t.next(r.value);
                                });
                            },
                            0,
                            !0,
                        );
                    });
                });
            }
            function ic(n, e) {
                return e
                    ? (function rW(n, e) {
                          if (null != n) {
                              if (fT(n))
                                  return (function J3(n, e) {
                                      return cn(n).pipe(wT(e), ET(e));
                                  })(n, e);
                              if (Z_(n))
                                  return (function tW(n, e) {
                                      return new ht((t) => {
                                          let i = 0;
                                          return e.schedule(function () {
                                              i === n.length ? t.complete() : (t.next(n[i++]), t.closed || this.schedule());
                                          });
                                      });
                                  })(n, e);
                              if (hT(n))
                                  return (function eW(n, e) {
                                      return cn(n).pipe(wT(e), ET(e));
                                  })(n, e);
                              if (mT(n)) return CT(n, e);
                              if (_T(n))
                                  return (function nW(n, e) {
                                      return new ht((t) => {
                                          let i;
                                          return (
                                              Yi(t, e, () => {
                                                  (i = n[gT]()),
                                                      Yi(
                                                          t,
                                                          e,
                                                          () => {
                                                              let r, o;
                                                              try {
                                                                  ({ value: r, done: o } = i.next());
                                                              } catch (s) {
                                                                  return void t.error(s);
                                                              }
                                                              o ? t.complete() : t.next(r);
                                                          },
                                                          0,
                                                          !0,
                                                      );
                                              }),
                                              () => Te(i?.return) && i.return()
                                          );
                                      });
                                  })(n, e);
                              if (bT(n))
                                  return (function iW(n, e) {
                                      return CT(yT(n), e);
                                  })(n, e);
                          }
                          throw pT(n);
                      })(n, e)
                    : cn(n);
            }
            function qi(...n) {
                return ic(n, nc(n));
            }
            const { isArray: sW } = Array,
                { getPrototypeOf: aW, prototype: lW, keys: cW } = Object;
            function DT(n) {
                if (1 === n.length) {
                    const e = n[0];
                    if (sW(e)) return { args: e, keys: null };
                    if (
                        (function uW(n) {
                            return n && 'object' == typeof n && aW(n) === lW;
                        })(e)
                    ) {
                        const t = cW(e);
                        return { args: t.map((i) => e[i]), keys: t };
                    }
                }
                return { args: n, keys: null };
            }
            const { isArray: dW } = Array;
            function Q_(n) {
                return Ut((e) =>
                    (function hW(n, e) {
                        return dW(e) ? n(...e) : n(e);
                    })(n, e),
                );
            }
            function IT(n, e) {
                return n.reduce((t, i, r) => ((t[i] = e[r]), t), {});
            }
            function rh(n, e, t) {
                const i = Te(n) || e || t ? { next: n, error: e, complete: t } : n;
                return i
                    ? Vt((r, o) => {
                          var s;
                          null === (s = i.subscribe) || void 0 === s || s.call(i);
                          let a = !0;
                          r.subscribe(
                              Ht(
                                  o,
                                  (l) => {
                                      var c;
                                      null === (c = i.next) || void 0 === c || c.call(i, l), o.next(l);
                                  },
                                  () => {
                                      var l;
                                      (a = !1), null === (l = i.complete) || void 0 === l || l.call(i), o.complete();
                                  },
                                  (l) => {
                                      var c;
                                      (a = !1), null === (c = i.error) || void 0 === c || c.call(i, l), o.error(l);
                                  },
                                  () => {
                                      var l, c;
                                      a && (null === (l = i.unsubscribe) || void 0 === l || l.call(i)),
                                          null === (c = i.finalize) || void 0 === c || c.call(i);
                                  },
                              ),
                          );
                      })
                    : ns;
            }
            function xT(n) {
                return Vt((e, t) => {
                    let o,
                        i = null,
                        r = !1;
                    (i = e.subscribe(
                        Ht(t, void 0, void 0, (s) => {
                            (o = cn(n(s, xT(n)(e)))), i ? (i.unsubscribe(), (i = null), o.subscribe(t)) : (r = !0);
                        }),
                    )),
                        r && (i.unsubscribe(), (i = null), o.subscribe(t));
                });
            }
            function J_(n, e, ...t) {
                if (!0 === e) return void n();
                if (!1 === e) return;
                const i = new Ua({
                    next: () => {
                        i.unsubscribe(), n();
                    },
                });
                return cn(e(...t)).subscribe(i);
            }
            const ey = new ht((n) => n.complete());
            function Io(n) {
                return n <= 0
                    ? () => ey
                    : Vt((e, t) => {
                          let i = 0;
                          e.subscribe(
                              Ht(t, (r) => {
                                  ++i <= n && (t.next(r), n <= i && t.complete());
                              }),
                          );
                      });
            }
            function rc(n, e, t = 1 / 0) {
                return Te(e)
                    ? rc((i, r) => Ut((o, s) => e(i, o, r, s))(cn(n(i, r))), t)
                    : ('number' == typeof e && (t = e),
                      Vt((i, r) =>
                          (function _W(n, e, t, i, r, o, s, a) {
                              const l = [];
                              let c = 0,
                                  u = 0,
                                  d = !1;
                              const h = () => {
                                      d && !l.length && !c && e.complete();
                                  },
                                  f = (p) => (c < i ? m(p) : l.push(p)),
                                  m = (p) => {
                                      o && e.next(p), c++;
                                      let g = !1;
                                      cn(t(p, u++)).subscribe(
                                          Ht(
                                              e,
                                              (y) => {
                                                  r?.(y), o ? f(y) : e.next(y);
                                              },
                                              () => {
                                                  g = !0;
                                              },
                                              void 0,
                                              () => {
                                                  if (g)
                                                      try {
                                                          for (c--; l.length && c < i; ) {
                                                              const y = l.shift();
                                                              s ? Yi(e, s, () => m(y)) : m(y);
                                                          }
                                                          h();
                                                      } catch (y) {
                                                          e.error(y);
                                                      }
                                              },
                                          ),
                                      );
                                  };
                              return (
                                  n.subscribe(
                                      Ht(e, f, () => {
                                          (d = !0), h();
                                      }),
                                  ),
                                  () => {
                                      a?.();
                                  }
                              );
                          })(i, r, n, t),
                      ));
            }
            function Xi(n, e) {
                return Vt((t, i) => {
                    let r = 0;
                    t.subscribe(Ht(i, (o) => n.call(e, o, r++) && i.next(o)));
                });
            }
            class ty {}
            class Ki {
                constructor(e) {
                    (this.normalizedNames = new Map()),
                        (this.lazyUpdate = null),
                        e
                            ? 'string' == typeof e
                                ? (this.lazyInit = () => {
                                      (this.headers = new Map()),
                                          e.split('\n').forEach((t) => {
                                              const i = t.indexOf(':');
                                              if (i > 0) {
                                                  const r = t.slice(0, i),
                                                      o = r.toLowerCase(),
                                                      s = t.slice(i + 1).trim();
                                                  this.maybeSetNormalizedName(r, o),
                                                      this.headers.has(o) ? this.headers.get(o).push(s) : this.headers.set(o, [s]);
                                              }
                                          });
                                  })
                                : typeof Headers < 'u' && e instanceof Headers
                                  ? ((this.headers = new Map()),
                                    e.forEach((t, i) => {
                                        this.setHeaderEntries(i, t);
                                    }))
                                  : (this.lazyInit = () => {
                                        (this.headers = new Map()),
                                            Object.entries(e).forEach(([t, i]) => {
                                                this.setHeaderEntries(t, i);
                                            });
                                    })
                            : (this.headers = new Map());
                }
                has(e) {
                    return this.init(), this.headers.has(e.toLowerCase());
                }
                get(e) {
                    this.init();
                    const t = this.headers.get(e.toLowerCase());
                    return t && t.length > 0 ? t[0] : null;
                }
                keys() {
                    return this.init(), Array.from(this.normalizedNames.values());
                }
                getAll(e) {
                    return this.init(), this.headers.get(e.toLowerCase()) || null;
                }
                append(e, t) {
                    return this.clone({ name: e, value: t, op: 'a' });
                }
                set(e, t) {
                    return this.clone({ name: e, value: t, op: 's' });
                }
                delete(e, t) {
                    return this.clone({ name: e, value: t, op: 'd' });
                }
                maybeSetNormalizedName(e, t) {
                    this.normalizedNames.has(t) || this.normalizedNames.set(t, e);
                }
                init() {
                    this.lazyInit &&
                        (this.lazyInit instanceof Ki ? this.copyFrom(this.lazyInit) : this.lazyInit(),
                        (this.lazyInit = null),
                        this.lazyUpdate && (this.lazyUpdate.forEach((e) => this.applyUpdate(e)), (this.lazyUpdate = null)));
                }
                copyFrom(e) {
                    e.init(),
                        Array.from(e.headers.keys()).forEach((t) => {
                            this.headers.set(t, e.headers.get(t)), this.normalizedNames.set(t, e.normalizedNames.get(t));
                        });
                }
                clone(e) {
                    const t = new Ki();
                    return (
                        (t.lazyInit = this.lazyInit && this.lazyInit instanceof Ki ? this.lazyInit : this),
                        (t.lazyUpdate = (this.lazyUpdate || []).concat([e])),
                        t
                    );
                }
                applyUpdate(e) {
                    const t = e.name.toLowerCase();
                    switch (e.op) {
                        case 'a':
                        case 's':
                            let i = e.value;
                            if (('string' == typeof i && (i = [i]), 0 === i.length)) return;
                            this.maybeSetNormalizedName(e.name, t);
                            const r = ('a' === e.op ? this.headers.get(t) : void 0) || [];
                            r.push(...i), this.headers.set(t, r);
                            break;
                        case 'd':
                            const o = e.value;
                            if (o) {
                                let s = this.headers.get(t);
                                if (!s) return;
                                (s = s.filter((a) => -1 === o.indexOf(a))),
                                    0 === s.length ? (this.headers.delete(t), this.normalizedNames.delete(t)) : this.headers.set(t, s);
                            } else this.headers.delete(t), this.normalizedNames.delete(t);
                    }
                }
                setHeaderEntries(e, t) {
                    const i = (Array.isArray(t) ? t : [t]).map((o) => o.toString()),
                        r = e.toLowerCase();
                    this.headers.set(r, i), this.maybeSetNormalizedName(e, r);
                }
                forEach(e) {
                    this.init(),
                        Array.from(this.normalizedNames.keys()).forEach((t) => e(this.normalizedNames.get(t), this.headers.get(t)));
                }
            }
            class bW {
                encodeKey(e) {
                    return ST(e);
                }
                encodeValue(e) {
                    return ST(e);
                }
                decodeKey(e) {
                    return decodeURIComponent(e);
                }
                decodeValue(e) {
                    return decodeURIComponent(e);
                }
            }
            const EW = /%(\d[a-f0-9])/gi,
                wW = { '40': '@', '3A': ':', '24': '$', '2C': ',', '3B': ';', '3D': '=', '3F': '?', '2F': '/' };
            function ST(n) {
                return encodeURIComponent(n).replace(EW, (e, t) => wW[t] ?? e);
            }
            function oh(n) {
                return `${n}`;
            }
            class Ar {
                constructor(e = {}) {
                    if (((this.updates = null), (this.cloneFrom = null), (this.encoder = e.encoder || new bW()), e.fromString)) {
                        if (e.fromObject) throw new Error('Cannot specify both fromString and fromObject.');
                        this.map = (function vW(n, e) {
                            const t = new Map();
                            return (
                                n.length > 0 &&
                                    n
                                        .replace(/^\?/, '')
                                        .split('&')
                                        .forEach((r) => {
                                            const o = r.indexOf('='),
                                                [s, a] =
                                                    -1 == o
                                                        ? [e.decodeKey(r), '']
                                                        : [e.decodeKey(r.slice(0, o)), e.decodeValue(r.slice(o + 1))],
                                                l = t.get(s) || [];
                                            l.push(a), t.set(s, l);
                                        }),
                                t
                            );
                        })(e.fromString, this.encoder);
                    } else
                        e.fromObject
                            ? ((this.map = new Map()),
                              Object.keys(e.fromObject).forEach((t) => {
                                  const i = e.fromObject[t],
                                      r = Array.isArray(i) ? i.map(oh) : [oh(i)];
                                  this.map.set(t, r);
                              }))
                            : (this.map = null);
                }
                has(e) {
                    return this.init(), this.map.has(e);
                }
                get(e) {
                    this.init();
                    const t = this.map.get(e);
                    return t ? t[0] : null;
                }
                getAll(e) {
                    return this.init(), this.map.get(e) || null;
                }
                keys() {
                    return this.init(), Array.from(this.map.keys());
                }
                append(e, t) {
                    return this.clone({ param: e, value: t, op: 'a' });
                }
                appendAll(e) {
                    const t = [];
                    return (
                        Object.keys(e).forEach((i) => {
                            const r = e[i];
                            Array.isArray(r)
                                ? r.forEach((o) => {
                                      t.push({ param: i, value: o, op: 'a' });
                                  })
                                : t.push({ param: i, value: r, op: 'a' });
                        }),
                        this.clone(t)
                    );
                }
                set(e, t) {
                    return this.clone({ param: e, value: t, op: 's' });
                }
                delete(e, t) {
                    return this.clone({ param: e, value: t, op: 'd' });
                }
                toString() {
                    return (
                        this.init(),
                        this.keys()
                            .map((e) => {
                                const t = this.encoder.encodeKey(e);
                                return this.map
                                    .get(e)
                                    .map((i) => t + '=' + this.encoder.encodeValue(i))
                                    .join('&');
                            })
                            .filter((e) => '' !== e)
                            .join('&')
                    );
                }
                clone(e) {
                    const t = new Ar({ encoder: this.encoder });
                    return (t.cloneFrom = this.cloneFrom || this), (t.updates = (this.updates || []).concat(e)), t;
                }
                init() {
                    null === this.map && (this.map = new Map()),
                        null !== this.cloneFrom &&
                            (this.cloneFrom.init(),
                            this.cloneFrom.keys().forEach((e) => this.map.set(e, this.cloneFrom.map.get(e))),
                            this.updates.forEach((e) => {
                                switch (e.op) {
                                    case 'a':
                                    case 's':
                                        const t = ('a' === e.op ? this.map.get(e.param) : void 0) || [];
                                        t.push(oh(e.value)), this.map.set(e.param, t);
                                        break;
                                    case 'd':
                                        if (void 0 === e.value) {
                                            this.map.delete(e.param);
                                            break;
                                        }
                                        {
                                            let i = this.map.get(e.param) || [];
                                            const r = i.indexOf(oh(e.value));
                                            -1 !== r && i.splice(r, 1), i.length > 0 ? this.map.set(e.param, i) : this.map.delete(e.param);
                                        }
                                }
                            }),
                            (this.cloneFrom = this.updates = null));
                }
            }
            class CW {
                constructor() {
                    this.map = new Map();
                }
                set(e, t) {
                    return this.map.set(e, t), this;
                }
                get(e) {
                    return this.map.has(e) || this.map.set(e, e.defaultValue()), this.map.get(e);
                }
                delete(e) {
                    return this.map.delete(e), this;
                }
                has(e) {
                    return this.map.has(e);
                }
                keys() {
                    return this.map.keys();
                }
            }
            function TT(n) {
                return typeof ArrayBuffer < 'u' && n instanceof ArrayBuffer;
            }
            function MT(n) {
                return typeof Blob < 'u' && n instanceof Blob;
            }
            function RT(n) {
                return typeof FormData < 'u' && n instanceof FormData;
            }
            class oc {
                constructor(e, t, i, r) {
                    let o;
                    if (
                        ((this.url = t),
                        (this.body = null),
                        (this.reportProgress = !1),
                        (this.withCredentials = !1),
                        (this.responseType = 'json'),
                        (this.method = e.toUpperCase()),
                        (function DW(n) {
                            switch (n) {
                                case 'DELETE':
                                case 'GET':
                                case 'HEAD':
                                case 'OPTIONS':
                                case 'JSONP':
                                    return !1;
                                default:
                                    return !0;
                            }
                        })(this.method) || r
                            ? ((this.body = void 0 !== i ? i : null), (o = r))
                            : (o = i),
                        o &&
                            ((this.reportProgress = !!o.reportProgress),
                            (this.withCredentials = !!o.withCredentials),
                            o.responseType && (this.responseType = o.responseType),
                            o.headers && (this.headers = o.headers),
                            o.context && (this.context = o.context),
                            o.params && (this.params = o.params),
                            (this.transferCache = o.transferCache)),
                        (this.headers ??= new Ki()),
                        (this.context ??= new CW()),
                        this.params)
                    ) {
                        const s = this.params.toString();
                        if (0 === s.length) this.urlWithParams = t;
                        else {
                            const a = t.indexOf('?');
                            this.urlWithParams = t + (-1 === a ? '?' : a < t.length - 1 ? '&' : '') + s;
                        }
                    } else (this.params = new Ar()), (this.urlWithParams = t);
                }
                serializeBody() {
                    return null === this.body
                        ? null
                        : TT(this.body) ||
                            MT(this.body) ||
                            RT(this.body) ||
                            (function IW(n) {
                                return typeof URLSearchParams < 'u' && n instanceof URLSearchParams;
                            })(this.body) ||
                            'string' == typeof this.body
                          ? this.body
                          : this.body instanceof Ar
                            ? this.body.toString()
                            : 'object' == typeof this.body || 'boolean' == typeof this.body || Array.isArray(this.body)
                              ? JSON.stringify(this.body)
                              : this.body.toString();
                }
                detectContentTypeHeader() {
                    return null === this.body || RT(this.body)
                        ? null
                        : MT(this.body)
                          ? this.body.type || null
                          : TT(this.body)
                            ? null
                            : 'string' == typeof this.body
                              ? 'text/plain'
                              : this.body instanceof Ar
                                ? 'application/x-www-form-urlencoded;charset=UTF-8'
                                : 'object' == typeof this.body || 'number' == typeof this.body || 'boolean' == typeof this.body
                                  ? 'application/json'
                                  : null;
                }
                clone(e = {}) {
                    const t = e.method || this.method,
                        i = e.url || this.url,
                        r = e.responseType || this.responseType,
                        o = void 0 !== e.body ? e.body : this.body,
                        s = void 0 !== e.withCredentials ? e.withCredentials : this.withCredentials,
                        a = void 0 !== e.reportProgress ? e.reportProgress : this.reportProgress;
                    let l = e.headers || this.headers,
                        c = e.params || this.params;
                    const u = e.context ?? this.context;
                    return (
                        void 0 !== e.setHeaders && (l = Object.keys(e.setHeaders).reduce((d, h) => d.set(h, e.setHeaders[h]), l)),
                        e.setParams && (c = Object.keys(e.setParams).reduce((d, h) => d.set(h, e.setParams[h]), c)),
                        new oc(t, i, o, { params: c, headers: l, context: u, reportProgress: a, responseType: r, withCredentials: s })
                    );
                }
            }
            var iy = (function (n) {
                return (
                    (n[(n.Sent = 0)] = 'Sent'),
                    (n[(n.UploadProgress = 1)] = 'UploadProgress'),
                    (n[(n.ResponseHeader = 2)] = 'ResponseHeader'),
                    (n[(n.DownloadProgress = 3)] = 'DownloadProgress'),
                    (n[(n.Response = 4)] = 'Response'),
                    (n[(n.User = 5)] = 'User'),
                    n
                );
            })(iy || {});
            class ry {
                constructor(e, t = OT.Ok, i = 'OK') {
                    (this.headers = e.headers || new Ki()),
                        (this.status = void 0 !== e.status ? e.status : t),
                        (this.statusText = e.statusText || i),
                        (this.url = e.url || null),
                        (this.ok = this.status >= 200 && this.status < 300);
                }
            }
            class sc extends ry {
                constructor(e = {}) {
                    super(e), (this.type = iy.Response), (this.body = void 0 !== e.body ? e.body : null);
                }
                clone(e = {}) {
                    return new sc({
                        body: void 0 !== e.body ? e.body : this.body,
                        headers: e.headers || this.headers,
                        status: void 0 !== e.status ? e.status : this.status,
                        statusText: e.statusText || this.statusText,
                        url: e.url || this.url || void 0,
                    });
                }
            }
            var OT = (function (n) {
                return (
                    (n[(n.Continue = 100)] = 'Continue'),
                    (n[(n.SwitchingProtocols = 101)] = 'SwitchingProtocols'),
                    (n[(n.Processing = 102)] = 'Processing'),
                    (n[(n.EarlyHints = 103)] = 'EarlyHints'),
                    (n[(n.Ok = 200)] = 'Ok'),
                    (n[(n.Created = 201)] = 'Created'),
                    (n[(n.Accepted = 202)] = 'Accepted'),
                    (n[(n.NonAuthoritativeInformation = 203)] = 'NonAuthoritativeInformation'),
                    (n[(n.NoContent = 204)] = 'NoContent'),
                    (n[(n.ResetContent = 205)] = 'ResetContent'),
                    (n[(n.PartialContent = 206)] = 'PartialContent'),
                    (n[(n.MultiStatus = 207)] = 'MultiStatus'),
                    (n[(n.AlreadyReported = 208)] = 'AlreadyReported'),
                    (n[(n.ImUsed = 226)] = 'ImUsed'),
                    (n[(n.MultipleChoices = 300)] = 'MultipleChoices'),
                    (n[(n.MovedPermanently = 301)] = 'MovedPermanently'),
                    (n[(n.Found = 302)] = 'Found'),
                    (n[(n.SeeOther = 303)] = 'SeeOther'),
                    (n[(n.NotModified = 304)] = 'NotModified'),
                    (n[(n.UseProxy = 305)] = 'UseProxy'),
                    (n[(n.Unused = 306)] = 'Unused'),
                    (n[(n.TemporaryRedirect = 307)] = 'TemporaryRedirect'),
                    (n[(n.PermanentRedirect = 308)] = 'PermanentRedirect'),
                    (n[(n.BadRequest = 400)] = 'BadRequest'),
                    (n[(n.Unauthorized = 401)] = 'Unauthorized'),
                    (n[(n.PaymentRequired = 402)] = 'PaymentRequired'),
                    (n[(n.Forbidden = 403)] = 'Forbidden'),
                    (n[(n.NotFound = 404)] = 'NotFound'),
                    (n[(n.MethodNotAllowed = 405)] = 'MethodNotAllowed'),
                    (n[(n.NotAcceptable = 406)] = 'NotAcceptable'),
                    (n[(n.ProxyAuthenticationRequired = 407)] = 'ProxyAuthenticationRequired'),
                    (n[(n.RequestTimeout = 408)] = 'RequestTimeout'),
                    (n[(n.Conflict = 409)] = 'Conflict'),
                    (n[(n.Gone = 410)] = 'Gone'),
                    (n[(n.LengthRequired = 411)] = 'LengthRequired'),
                    (n[(n.PreconditionFailed = 412)] = 'PreconditionFailed'),
                    (n[(n.PayloadTooLarge = 413)] = 'PayloadTooLarge'),
                    (n[(n.UriTooLong = 414)] = 'UriTooLong'),
                    (n[(n.UnsupportedMediaType = 415)] = 'UnsupportedMediaType'),
                    (n[(n.RangeNotSatisfiable = 416)] = 'RangeNotSatisfiable'),
                    (n[(n.ExpectationFailed = 417)] = 'ExpectationFailed'),
                    (n[(n.ImATeapot = 418)] = 'ImATeapot'),
                    (n[(n.MisdirectedRequest = 421)] = 'MisdirectedRequest'),
                    (n[(n.UnprocessableEntity = 422)] = 'UnprocessableEntity'),
                    (n[(n.Locked = 423)] = 'Locked'),
                    (n[(n.FailedDependency = 424)] = 'FailedDependency'),
                    (n[(n.TooEarly = 425)] = 'TooEarly'),
                    (n[(n.UpgradeRequired = 426)] = 'UpgradeRequired'),
                    (n[(n.PreconditionRequired = 428)] = 'PreconditionRequired'),
                    (n[(n.TooManyRequests = 429)] = 'TooManyRequests'),
                    (n[(n.RequestHeaderFieldsTooLarge = 431)] = 'RequestHeaderFieldsTooLarge'),
                    (n[(n.UnavailableForLegalReasons = 451)] = 'UnavailableForLegalReasons'),
                    (n[(n.InternalServerError = 500)] = 'InternalServerError'),
                    (n[(n.NotImplemented = 501)] = 'NotImplemented'),
                    (n[(n.BadGateway = 502)] = 'BadGateway'),
                    (n[(n.ServiceUnavailable = 503)] = 'ServiceUnavailable'),
                    (n[(n.GatewayTimeout = 504)] = 'GatewayTimeout'),
                    (n[(n.HttpVersionNotSupported = 505)] = 'HttpVersionNotSupported'),
                    (n[(n.VariantAlsoNegotiates = 506)] = 'VariantAlsoNegotiates'),
                    (n[(n.InsufficientStorage = 507)] = 'InsufficientStorage'),
                    (n[(n.LoopDetected = 508)] = 'LoopDetected'),
                    (n[(n.NotExtended = 510)] = 'NotExtended'),
                    (n[(n.NetworkAuthenticationRequired = 511)] = 'NetworkAuthenticationRequired'),
                    n
                );
            })(OT || {});
            function oy(n, e) {
                return {
                    body: e,
                    headers: n.headers,
                    context: n.context,
                    observe: n.observe,
                    params: n.params,
                    reportProgress: n.reportProgress,
                    responseType: n.responseType,
                    withCredentials: n.withCredentials,
                    transferCache: n.transferCache,
                };
            }
            let sy = (() => {
                class n {
                    constructor(t) {
                        this.handler = t;
                    }
                    request(t, i, r = {}) {
                        let o;
                        if (t instanceof oc) o = t;
                        else {
                            let l, c;
                            (l = r.headers instanceof Ki ? r.headers : new Ki(r.headers)),
                                r.params && (c = r.params instanceof Ar ? r.params : new Ar({ fromObject: r.params })),
                                (o = new oc(t, i, void 0 !== r.body ? r.body : null, {
                                    headers: l,
                                    context: r.context,
                                    params: c,
                                    reportProgress: r.reportProgress,
                                    responseType: r.responseType || 'json',
                                    withCredentials: r.withCredentials,
                                    transferCache: r.transferCache,
                                }));
                        }
                        const s = qi(o).pipe(
                            (function yW(n, e) {
                                return Te(e) ? rc(n, e, 1) : rc(n, 1);
                            })((l) => this.handler.handle(l)),
                        );
                        if (t instanceof oc || 'events' === r.observe) return s;
                        const a = s.pipe(Xi((l) => l instanceof sc));
                        switch (r.observe || 'body') {
                            case 'body':
                                switch (o.responseType) {
                                    case 'arraybuffer':
                                        return a.pipe(
                                            Ut((l) => {
                                                if (null !== l.body && !(l.body instanceof ArrayBuffer))
                                                    throw new Error('Response is not an ArrayBuffer.');
                                                return l.body;
                                            }),
                                        );
                                    case 'blob':
                                        return a.pipe(
                                            Ut((l) => {
                                                if (null !== l.body && !(l.body instanceof Blob))
                                                    throw new Error('Response is not a Blob.');
                                                return l.body;
                                            }),
                                        );
                                    case 'text':
                                        return a.pipe(
                                            Ut((l) => {
                                                if (null !== l.body && 'string' != typeof l.body)
                                                    throw new Error('Response is not a string.');
                                                return l.body;
                                            }),
                                        );
                                    default:
                                        return a.pipe(Ut((l) => l.body));
                                }
                            case 'response':
                                return a;
                            default:
                                throw new Error(`Unreachable: unhandled observe type ${r.observe}}`);
                        }
                    }
                    delete(t, i = {}) {
                        return this.request('DELETE', t, i);
                    }
                    get(t, i = {}) {
                        return this.request('GET', t, i);
                    }
                    head(t, i = {}) {
                        return this.request('HEAD', t, i);
                    }
                    jsonp(t, i) {
                        return this.request('JSONP', t, {
                            params: new Ar().append(i, 'JSONP_CALLBACK'),
                            observe: 'body',
                            responseType: 'json',
                        });
                    }
                    options(t, i = {}) {
                        return this.request('OPTIONS', t, i);
                    }
                    patch(t, i, r = {}) {
                        return this.request('PATCH', t, oy(r, i));
                    }
                    post(t, i, r = {}) {
                        return this.request('POST', t, oy(r, i));
                    }
                    put(t, i, r = {}) {
                        return this.request('PUT', t, oy(r, i));
                    }
                    static #e = (this.ɵfac = function (i) {
                        return new (i || n)(T(ty));
                    });
                    static #t = (this.ɵprov = j({ token: n, factory: n.ɵfac }));
                }
                return n;
            })();
            const YW = ['*'];
            let lh;
            function ac(n) {
                return (
                    (function qW() {
                        if (void 0 === lh && ((lh = null), typeof window < 'u')) {
                            const n = window;
                            void 0 !== n.trustedTypes && (lh = n.trustedTypes.createPolicy('angular#components', { createHTML: (e) => e }));
                        }
                        return lh;
                    })()?.createHTML(n) || n
                );
            }
            function $T(n) {
                return Error(`Unable to find icon with the name "${n}"`);
            }
            function YT(n) {
                return Error(
                    `The URL provided to MatIconRegistry was not trusted as a resource URL via Angular's DomSanitizer. Attempted URL was "${n}".`,
                );
            }
            function qT(n) {
                return Error(
                    `The literal provided to MatIconRegistry was not trusted as safe HTML by Angular's DomSanitizer. Attempted literal was "${n}".`,
                );
            }
            class So {
                constructor(e, t, i) {
                    (this.url = e), (this.svgText = t), (this.options = i);
                }
            }
            let ch = (() => {
                class n {
                    constructor(t, i, r, o) {
                        (this._httpClient = t),
                            (this._sanitizer = i),
                            (this._errorHandler = o),
                            (this._svgIconConfigs = new Map()),
                            (this._iconSetConfigs = new Map()),
                            (this._cachedIconsByUrl = new Map()),
                            (this._inProgressUrlFetches = new Map()),
                            (this._fontCssClassesByAlias = new Map()),
                            (this._resolvers = []),
                            (this._defaultFontSetClass = ['material-icons', 'mat-ligature-font']),
                            (this._document = r);
                    }
                    addSvgIcon(t, i, r) {
                        return this.addSvgIconInNamespace('', t, i, r);
                    }
                    addSvgIconLiteral(t, i, r) {
                        return this.addSvgIconLiteralInNamespace('', t, i, r);
                    }
                    addSvgIconInNamespace(t, i, r, o) {
                        return this._addSvgIconConfig(t, i, new So(r, null, o));
                    }
                    addSvgIconResolver(t) {
                        return this._resolvers.push(t), this;
                    }
                    addSvgIconLiteralInNamespace(t, i, r, o) {
                        const s = this._sanitizer.sanitize(Rt.HTML, r);
                        if (!s) throw qT(r);
                        const a = ac(s);
                        return this._addSvgIconConfig(t, i, new So('', a, o));
                    }
                    addSvgIconSet(t, i) {
                        return this.addSvgIconSetInNamespace('', t, i);
                    }
                    addSvgIconSetLiteral(t, i) {
                        return this.addSvgIconSetLiteralInNamespace('', t, i);
                    }
                    addSvgIconSetInNamespace(t, i, r) {
                        return this._addSvgIconSetConfig(t, new So(i, null, r));
                    }
                    addSvgIconSetLiteralInNamespace(t, i, r) {
                        const o = this._sanitizer.sanitize(Rt.HTML, i);
                        if (!o) throw qT(i);
                        const s = ac(o);
                        return this._addSvgIconSetConfig(t, new So('', s, r));
                    }
                    registerFontClassAlias(t, i = t) {
                        return this._fontCssClassesByAlias.set(t, i), this;
                    }
                    classNameForFontAlias(t) {
                        return this._fontCssClassesByAlias.get(t) || t;
                    }
                    setDefaultFontSetClass(...t) {
                        return (this._defaultFontSetClass = t), this;
                    }
                    getDefaultFontSetClass() {
                        return this._defaultFontSetClass;
                    }
                    getSvgIconFromUrl(t) {
                        const i = this._sanitizer.sanitize(Rt.RESOURCE_URL, t);
                        if (!i) throw YT(t);
                        const r = this._cachedIconsByUrl.get(i);
                        return r
                            ? qi(uh(r))
                            : this._loadSvgIconFromConfig(new So(t, null)).pipe(
                                  rh((o) => this._cachedIconsByUrl.set(i, o)),
                                  Ut((o) => uh(o)),
                              );
                    }
                    getNamedSvgIcon(t, i = '') {
                        const r = XT(i, t);
                        let o = this._svgIconConfigs.get(r);
                        if (o) return this._getSvgFromConfig(o);
                        if (((o = this._getIconConfigFromResolvers(i, t)), o))
                            return this._svgIconConfigs.set(r, o), this._getSvgFromConfig(o);
                        const s = this._iconSetConfigs.get(i);
                        return s
                            ? this._getSvgFromIconSetConfigs(t, s)
                            : (function oW(n, e) {
                                  const t = Te(n) ? n : () => n,
                                      i = (r) => r.error(t());
                                  return new ht(e ? (r) => e.schedule(i, 0, r) : i);
                              })($T(r));
                    }
                    ngOnDestroy() {
                        (this._resolvers = []), this._svgIconConfigs.clear(), this._iconSetConfigs.clear(), this._cachedIconsByUrl.clear();
                    }
                    _getSvgFromConfig(t) {
                        return t.svgText ? qi(uh(this._svgElementFromConfig(t))) : this._loadSvgIconFromConfig(t).pipe(Ut((i) => uh(i)));
                    }
                    _getSvgFromIconSetConfigs(t, i) {
                        const r = this._extractIconWithNameFromAnySet(t, i);
                        return r
                            ? qi(r)
                            : (function fW(...n) {
                                  const e = aT(n),
                                      { args: t, keys: i } = DT(n),
                                      r = new ht((o) => {
                                          const { length: s } = t;
                                          if (!s) return void o.complete();
                                          const a = new Array(s);
                                          let l = s,
                                              c = s;
                                          for (let u = 0; u < s; u++) {
                                              let d = !1;
                                              cn(t[u]).subscribe(
                                                  Ht(
                                                      o,
                                                      (h) => {
                                                          d || ((d = !0), c--), (a[u] = h);
                                                      },
                                                      () => l--,
                                                      void 0,
                                                      () => {
                                                          (!l || !d) && (c || o.next(i ? IT(i, a) : a), o.complete());
                                                      },
                                                  ),
                                              );
                                          }
                                      });
                                  return e ? r.pipe(Q_(e)) : r;
                              })(
                                  i
                                      .filter((s) => !s.svgText)
                                      .map((s) =>
                                          this._loadSvgIconSetFromConfig(s).pipe(
                                              xT((a) => {
                                                  const c = `Loading icon set URL: ${this._sanitizer.sanitize(Rt.RESOURCE_URL, s.url)} failed: ${a.message}`;
                                                  return this._errorHandler.handleError(new Error(c)), qi(null);
                                              }),
                                          ),
                                      ),
                              ).pipe(
                                  Ut(() => {
                                      const s = this._extractIconWithNameFromAnySet(t, i);
                                      if (!s) throw $T(t);
                                      return s;
                                  }),
                              );
                    }
                    _extractIconWithNameFromAnySet(t, i) {
                        for (let r = i.length - 1; r >= 0; r--) {
                            const o = i[r];
                            if (o.svgText && o.svgText.toString().indexOf(t) > -1) {
                                const s = this._svgElementFromConfig(o),
                                    a = this._extractSvgIconFromSet(s, t, o.options);
                                if (a) return a;
                            }
                        }
                        return null;
                    }
                    _loadSvgIconFromConfig(t) {
                        return this._fetchIcon(t).pipe(
                            rh((i) => (t.svgText = i)),
                            Ut(() => this._svgElementFromConfig(t)),
                        );
                    }
                    _loadSvgIconSetFromConfig(t) {
                        return t.svgText ? qi(null) : this._fetchIcon(t).pipe(rh((i) => (t.svgText = i)));
                    }
                    _extractSvgIconFromSet(t, i, r) {
                        const o = t.querySelector(`[id="${i}"]`);
                        if (!o) return null;
                        const s = o.cloneNode(!0);
                        if ((s.removeAttribute('id'), 'svg' === s.nodeName.toLowerCase())) return this._setSvgAttributes(s, r);
                        if ('symbol' === s.nodeName.toLowerCase()) return this._setSvgAttributes(this._toSvgElement(s), r);
                        const a = this._svgElementFromString(ac('<svg></svg>'));
                        return a.appendChild(s), this._setSvgAttributes(a, r);
                    }
                    _svgElementFromString(t) {
                        const i = this._document.createElement('DIV');
                        i.innerHTML = t;
                        const r = i.querySelector('svg');
                        if (!r) throw Error('<svg> tag not found');
                        return r;
                    }
                    _toSvgElement(t) {
                        const i = this._svgElementFromString(ac('<svg></svg>')),
                            r = t.attributes;
                        for (let o = 0; o < r.length; o++) {
                            const { name: s, value: a } = r[o];
                            'id' !== s && i.setAttribute(s, a);
                        }
                        for (let o = 0; o < t.childNodes.length; o++)
                            t.childNodes[o].nodeType === this._document.ELEMENT_NODE && i.appendChild(t.childNodes[o].cloneNode(!0));
                        return i;
                    }
                    _setSvgAttributes(t, i) {
                        return (
                            t.setAttribute('fit', ''),
                            t.setAttribute('height', '100%'),
                            t.setAttribute('width', '100%'),
                            t.setAttribute('preserveAspectRatio', 'xMidYMid meet'),
                            t.setAttribute('focusable', 'false'),
                            i && i.viewBox && t.setAttribute('viewBox', i.viewBox),
                            t
                        );
                    }
                    _fetchIcon(t) {
                        const { url: i, options: r } = t,
                            o = r?.withCredentials ?? !1;
                        if (!this._httpClient)
                            throw (function XW() {
                                return Error(
                                    'Could not find HttpClient provider for use with Angular Material icons. Please include the HttpClientModule from @angular/common/http in your app imports.',
                                );
                            })();
                        if (null == i) throw Error(`Cannot fetch icon from URL "${i}".`);
                        const s = this._sanitizer.sanitize(Rt.RESOURCE_URL, i);
                        if (!s) throw YT(i);
                        const a = this._inProgressUrlFetches.get(s);
                        if (a) return a;
                        const l = this._httpClient.get(s, { responseType: 'text', withCredentials: o }).pipe(
                            Ut((c) => ac(c)),
                            (function mW(n) {
                                return Vt((e, t) => {
                                    try {
                                        e.subscribe(t);
                                    } finally {
                                        t.add(n);
                                    }
                                });
                            })(() => this._inProgressUrlFetches.delete(s)),
                            (function pW(n = {}) {
                                const {
                                    connector: e = () => new et(),
                                    resetOnError: t = !0,
                                    resetOnComplete: i = !0,
                                    resetOnRefCountZero: r = !0,
                                } = n;
                                return (o) => {
                                    let s,
                                        a,
                                        l,
                                        c = 0,
                                        u = !1,
                                        d = !1;
                                    const h = () => {
                                            a?.unsubscribe(), (a = void 0);
                                        },
                                        f = () => {
                                            h(), (s = l = void 0), (u = d = !1);
                                        },
                                        m = () => {
                                            const p = s;
                                            f(), p?.unsubscribe();
                                        };
                                    return Vt((p, g) => {
                                        c++, !d && !u && h();
                                        const y = (l = l ?? e());
                                        g.add(() => {
                                            c--, 0 === c && !d && !u && (a = J_(m, r));
                                        }),
                                            y.subscribe(g),
                                            !s &&
                                                c > 0 &&
                                                ((s = new Ua({
                                                    next: (_) => y.next(_),
                                                    error: (_) => {
                                                        (d = !0), h(), (a = J_(f, t, _)), y.error(_);
                                                    },
                                                    complete: () => {
                                                        (u = !0), h(), (a = J_(f, i)), y.complete();
                                                    },
                                                })),
                                                cn(p).subscribe(s));
                                    })(o);
                                };
                            })(),
                        );
                        return this._inProgressUrlFetches.set(s, l), l;
                    }
                    _addSvgIconConfig(t, i, r) {
                        return this._svgIconConfigs.set(XT(t, i), r), this;
                    }
                    _addSvgIconSetConfig(t, i) {
                        const r = this._iconSetConfigs.get(t);
                        return r ? r.push(i) : this._iconSetConfigs.set(t, [i]), this;
                    }
                    _svgElementFromConfig(t) {
                        if (!t.svgElement) {
                            const i = this._svgElementFromString(t.svgText);
                            this._setSvgAttributes(i, t.options), (t.svgElement = i);
                        }
                        return t.svgElement;
                    }
                    _getIconConfigFromResolvers(t, i) {
                        for (let r = 0; r < this._resolvers.length; r++) {
                            const o = this._resolvers[r](i, t);
                            if (o) return ZW(o) ? new So(o.url, null, o.options) : new So(o, null);
                        }
                    }
                    static #e = (this.ɵfac = function (i) {
                        return new (i || n)(T(sy, 8), T(W_), T(De, 8), T(Mn));
                    });
                    static #t = (this.ɵprov = j({ token: n, factory: n.ɵfac, providedIn: 'root' }));
                }
                return n;
            })();
            function uh(n) {
                return n.cloneNode(!0);
            }
            function XT(n, e) {
                return n + ':' + e;
            }
            function ZW(n) {
                return !(!n.url || !n.options);
            }
            const QW = new L('MAT_ICON_DEFAULT_OPTIONS'),
                JW = new L('mat-icon-location', {
                    providedIn: 'root',
                    factory: function e$() {
                        const n = $(De),
                            e = n ? n.location : null;
                        return { getPathname: () => (e ? e.pathname + e.search : '') };
                    },
                }),
                KT = [
                    'clip-path',
                    'color-profile',
                    'src',
                    'cursor',
                    'fill',
                    'filter',
                    'marker',
                    'marker-start',
                    'marker-mid',
                    'marker-end',
                    'mask',
                    'stroke',
                ],
                t$ = KT.map((n) => `[${n}]`).join(', '),
                n$ = /^url\(['"]?#(.*?)['"]?\)$/;
            let cy,
                ZT = (() => {
                    class n {
                        get color() {
                            return this._color || this._defaultColor;
                        }
                        set color(t) {
                            this._color = t;
                        }
                        get svgIcon() {
                            return this._svgIcon;
                        }
                        set svgIcon(t) {
                            t !== this._svgIcon &&
                                (t ? this._updateSvgIcon(t) : this._svgIcon && this._clearSvgElement(), (this._svgIcon = t));
                        }
                        get fontSet() {
                            return this._fontSet;
                        }
                        set fontSet(t) {
                            const i = this._cleanupFontValue(t);
                            i !== this._fontSet && ((this._fontSet = i), this._updateFontIconClasses());
                        }
                        get fontIcon() {
                            return this._fontIcon;
                        }
                        set fontIcon(t) {
                            const i = this._cleanupFontValue(t);
                            i !== this._fontIcon && ((this._fontIcon = i), this._updateFontIconClasses());
                        }
                        constructor(t, i, r, o, s, a) {
                            (this._elementRef = t),
                                (this._iconRegistry = i),
                                (this._location = o),
                                (this._errorHandler = s),
                                (this.inline = !1),
                                (this._previousFontSetClass = []),
                                (this._currentIconFetch = xt.EMPTY),
                                a && (a.color && (this.color = this._defaultColor = a.color), a.fontSet && (this.fontSet = a.fontSet)),
                                r || t.nativeElement.setAttribute('aria-hidden', 'true');
                        }
                        _splitIconName(t) {
                            if (!t) return ['', ''];
                            const i = t.split(':');
                            switch (i.length) {
                                case 1:
                                    return ['', i[0]];
                                case 2:
                                    return i;
                                default:
                                    throw Error(`Invalid icon name: "${t}"`);
                            }
                        }
                        ngOnInit() {
                            this._updateFontIconClasses();
                        }
                        ngAfterViewChecked() {
                            const t = this._elementsWithExternalReferences;
                            if (t && t.size) {
                                const i = this._location.getPathname();
                                i !== this._previousPath && ((this._previousPath = i), this._prependPathToReferences(i));
                            }
                        }
                        ngOnDestroy() {
                            this._currentIconFetch.unsubscribe(),
                                this._elementsWithExternalReferences && this._elementsWithExternalReferences.clear();
                        }
                        _usingFontIcon() {
                            return !this.svgIcon;
                        }
                        _setSvgElement(t) {
                            this._clearSvgElement();
                            const i = this._location.getPathname();
                            (this._previousPath = i),
                                this._cacheChildrenWithExternalReferences(t),
                                this._prependPathToReferences(i),
                                this._elementRef.nativeElement.appendChild(t);
                        }
                        _clearSvgElement() {
                            const t = this._elementRef.nativeElement;
                            let i = t.childNodes.length;
                            for (this._elementsWithExternalReferences && this._elementsWithExternalReferences.clear(); i--; ) {
                                const r = t.childNodes[i];
                                (1 !== r.nodeType || 'svg' === r.nodeName.toLowerCase()) && r.remove();
                            }
                        }
                        _updateFontIconClasses() {
                            if (!this._usingFontIcon()) return;
                            const t = this._elementRef.nativeElement,
                                i = (
                                    this.fontSet
                                        ? this._iconRegistry.classNameForFontAlias(this.fontSet).split(/ +/)
                                        : this._iconRegistry.getDefaultFontSetClass()
                                ).filter((r) => r.length > 0);
                            this._previousFontSetClass.forEach((r) => t.classList.remove(r)),
                                i.forEach((r) => t.classList.add(r)),
                                (this._previousFontSetClass = i),
                                this.fontIcon !== this._previousFontIconClass &&
                                    !i.includes('mat-ligature-font') &&
                                    (this._previousFontIconClass && t.classList.remove(this._previousFontIconClass),
                                    this.fontIcon && t.classList.add(this.fontIcon),
                                    (this._previousFontIconClass = this.fontIcon));
                        }
                        _cleanupFontValue(t) {
                            return 'string' == typeof t ? t.trim().split(' ')[0] : t;
                        }
                        _prependPathToReferences(t) {
                            const i = this._elementsWithExternalReferences;
                            i &&
                                i.forEach((r, o) => {
                                    r.forEach((s) => {
                                        o.setAttribute(s.name, `url('${t}#${s.value}')`);
                                    });
                                });
                        }
                        _cacheChildrenWithExternalReferences(t) {
                            const i = t.querySelectorAll(t$),
                                r = (this._elementsWithExternalReferences = this._elementsWithExternalReferences || new Map());
                            for (let o = 0; o < i.length; o++)
                                KT.forEach((s) => {
                                    const a = i[o],
                                        l = a.getAttribute(s),
                                        c = l ? l.match(n$) : null;
                                    if (c) {
                                        let u = r.get(a);
                                        u || ((u = []), r.set(a, u)), u.push({ name: s, value: c[1] });
                                    }
                                });
                        }
                        _updateSvgIcon(t) {
                            if (((this._svgNamespace = null), (this._svgName = null), this._currentIconFetch.unsubscribe(), t)) {
                                const [i, r] = this._splitIconName(t);
                                i && (this._svgNamespace = i),
                                    r && (this._svgName = r),
                                    (this._currentIconFetch = this._iconRegistry
                                        .getNamedSvgIcon(r, i)
                                        .pipe(Io(1))
                                        .subscribe(
                                            (o) => this._setSvgElement(o),
                                            (o) => {
                                                this._errorHandler.handleError(new Error(`Error retrieving icon ${i}:${r}! ${o.message}`));
                                            },
                                        ));
                            }
                        }
                        static #e = (this.ɵfac = function (i) {
                            return new (i || n)(
                                P(Tt),
                                P(ch),
                                (function Bu(n) {
                                    return (function Ak(n, e) {
                                        if ('class' === e) return n.classes;
                                        if ('style' === e) return n.styles;
                                        const t = n.attrs;
                                        if (t) {
                                            const i = t.length;
                                            let r = 0;
                                            for (; r < i; ) {
                                                const o = t[r];
                                                if (Zv(o)) break;
                                                if (0 === o) r += 2;
                                                else if ('number' == typeof o) for (r++; r < i && 'string' == typeof t[r]; ) r++;
                                                else {
                                                    if (o === e) return t[r + 1];
                                                    r += 2;
                                                }
                                            }
                                        }
                                        return null;
                                    })(Ne(), n);
                                })('aria-hidden'),
                                P(JW),
                                P(Mn),
                                P(QW, 8),
                            );
                        });
                        static #t = (this.ɵcmp = Pi({
                            type: n,
                            selectors: [['mat-icon']],
                            hostAttrs: ['role', 'img', 1, 'mat-icon', 'notranslate'],
                            hostVars: 10,
                            hostBindings: function (i, r) {
                                2 & i &&
                                    (xr('data-mat-icon-type', r._usingFontIcon() ? 'font' : 'svg')(
                                        'data-mat-icon-name',
                                        r._svgName || r.fontIcon,
                                    )('data-mat-icon-namespace', r._svgNamespace || r.fontSet)(
                                        'fontIcon',
                                        r._usingFontIcon() ? r.fontIcon : null,
                                    ),
                                    kl(r.color ? 'mat-' + r.color : ''),
                                    Ui('mat-icon-inline', r.inline)(
                                        'mat-icon-no-color',
                                        'primary' !== r.color && 'accent' !== r.color && 'warn' !== r.color,
                                    ));
                            },
                            inputs: {
                                color: 'color',
                                inline: [st.HasDecoratorInputTransform, 'inline', 'inline', Kl],
                                svgIcon: 'svgIcon',
                                fontSet: 'fontSet',
                                fontIcon: 'fontIcon',
                            },
                            exportAs: ['matIcon'],
                            standalone: !0,
                            features: [yg, Gi],
                            ngContentSelectors: YW,
                            decls: 1,
                            vars: 0,
                            template: function (i, r) {
                                1 & i && (Ul(), zi(0));
                            },
                            styles: [
                                'mat-icon,mat-icon.mat-primary,mat-icon.mat-accent,mat-icon.mat-warn{color:var(--mat-icon-color)}.mat-icon{-webkit-user-select:none;user-select:none;background-repeat:no-repeat;display:inline-block;fill:currentColor;height:24px;width:24px;overflow:hidden}.mat-icon.mat-icon-inline{font-size:inherit;height:inherit;line-height:inherit;width:inherit}.mat-icon.mat-ligature-font[fontIcon]::before{content:attr(fontIcon)}[dir=rtl] .mat-icon-rtl-mirror{transform:scale(-1, 1)}.mat-form-field:not(.mat-form-field-appearance-legacy) .mat-form-field-prefix .mat-icon,.mat-form-field:not(.mat-form-field-appearance-legacy) .mat-form-field-suffix .mat-icon{display:block}.mat-form-field:not(.mat-form-field-appearance-legacy) .mat-form-field-prefix .mat-icon-button .mat-icon,.mat-form-field:not(.mat-form-field-appearance-legacy) .mat-form-field-suffix .mat-icon-button .mat-icon{margin:auto}',
                            ],
                            encapsulation: 2,
                            changeDetection: 0,
                        }));
                    }
                    return n;
                })();
            try {
                cy = typeof Intl < 'u' && Intl.v8BreakIterator;
            } catch {
                cy = !1;
            }
            let lc,
                To,
                uy,
                Xt = (() => {
                    class n {
                        constructor(t) {
                            (this._platformId = t),
                                (this.isBrowser = this._platformId
                                    ? (function vG(n) {
                                          return n === BS;
                                      })(this._platformId)
                                    : 'object' == typeof document && !!document),
                                (this.EDGE = this.isBrowser && /(edge)/i.test(navigator.userAgent)),
                                (this.TRIDENT = this.isBrowser && /(msie|trident)/i.test(navigator.userAgent)),
                                (this.BLINK =
                                    this.isBrowser && !(!window.chrome && !cy) && typeof CSS < 'u' && !this.EDGE && !this.TRIDENT),
                                (this.WEBKIT =
                                    this.isBrowser &&
                                    /AppleWebKit/i.test(navigator.userAgent) &&
                                    !this.BLINK &&
                                    !this.EDGE &&
                                    !this.TRIDENT),
                                (this.IOS = this.isBrowser && /iPad|iPhone|iPod/.test(navigator.userAgent) && !('MSStream' in window)),
                                (this.FIREFOX = this.isBrowser && /(firefox|minefield)/i.test(navigator.userAgent)),
                                (this.ANDROID = this.isBrowser && /android/i.test(navigator.userAgent) && !this.TRIDENT),
                                (this.SAFARI = this.isBrowser && /safari/i.test(navigator.userAgent) && this.WEBKIT);
                        }
                        static #e = (this.ɵfac = function (i) {
                            return new (i || n)(T(ao));
                        });
                        static #t = (this.ɵprov = j({ token: n, factory: n.ɵfac, providedIn: 'root' }));
                    }
                    return n;
                })();
            function dh(n) {
                return (function i$() {
                    if (null == lc && typeof window < 'u')
                        try {
                            window.addEventListener('test', null, Object.defineProperty({}, 'passive', { get: () => (lc = !0) }));
                        } finally {
                            lc = lc || !1;
                        }
                    return lc;
                })()
                    ? n
                    : !!n.capture;
            }
            function r$() {
                if (null == To) {
                    if ('object' != typeof document || !document || 'function' != typeof Element || !Element) return (To = !1), To;
                    if ('scrollBehavior' in document.documentElement.style) To = !0;
                    else {
                        const n = Element.prototype.scrollTo;
                        To = !!n && !/\{\s*\[native code\]\s*\}/.test(n.toString());
                    }
                }
                return To;
            }
            function dy() {
                let n = typeof document < 'u' && document ? document.activeElement : null;
                for (; n && n.shadowRoot; ) {
                    const e = n.shadowRoot.activeElement;
                    if (e === n) break;
                    n = e;
                }
                return n;
            }
            function Nr(n) {
                return n.composedPath ? n.composedPath()[0] : n.target;
            }
            function JT() {
                return (
                    (typeof __karma__ < 'u' && !!__karma__) ||
                    (typeof jasmine < 'u' && !!jasmine) ||
                    (typeof jest < 'u' && !!jest) ||
                    (typeof Mocha < 'u' && !!Mocha)
                );
            }
            function hy(n, ...e) {
                return e.length ? e.some((t) => n[t]) : n.altKey || n.shiftKey || n.ctrlKey || n.metaKey;
            }
            class I$ extends xt {
                constructor(e, t) {
                    super();
                }
                schedule(e, t = 0) {
                    return this;
                }
            }
            const fh = {
                setInterval(n, e, ...t) {
                    const { delegate: i } = fh;
                    return i?.setInterval ? i.setInterval(n, e, ...t) : setInterval(n, e, ...t);
                },
                clearInterval(n) {
                    const { delegate: e } = fh;
                    return (e?.clearInterval || clearInterval)(n);
                },
                delegate: void 0,
            };
            class fy extends I$ {
                constructor(e, t) {
                    super(e, t), (this.scheduler = e), (this.work = t), (this.pending = !1);
                }
                schedule(e, t = 0) {
                    var i;
                    if (this.closed) return this;
                    this.state = e;
                    const r = this.id,
                        o = this.scheduler;
                    return (
                        null != r && (this.id = this.recycleAsyncId(o, r, t)),
                        (this.pending = !0),
                        (this.delay = t),
                        (this.id = null !== (i = this.id) && void 0 !== i ? i : this.requestAsyncId(o, this.id, t)),
                        this
                    );
                }
                requestAsyncId(e, t, i = 0) {
                    return fh.setInterval(e.flush.bind(e, this), i);
                }
                recycleAsyncId(e, t, i = 0) {
                    if (null != i && this.delay === i && !1 === this.pending) return t;
                    null != t && fh.clearInterval(t);
                }
                execute(e, t) {
                    if (this.closed) return new Error('executing a cancelled action');
                    this.pending = !1;
                    const i = this._execute(e, t);
                    if (i) return i;
                    !1 === this.pending && null != this.id && (this.id = this.recycleAsyncId(this.scheduler, this.id, null));
                }
                _execute(e, t) {
                    let r,
                        i = !1;
                    try {
                        this.work(e);
                    } catch (o) {
                        (i = !0), (r = o || new Error('Scheduled action threw falsy error'));
                    }
                    if (i) return this.unsubscribe(), r;
                }
                unsubscribe() {
                    if (!this.closed) {
                        const { id: e, scheduler: t } = this,
                            { actions: i } = t;
                        (this.work = this.state = this.scheduler = null),
                            (this.pending = !1),
                            Kc(i, this),
                            null != e && (this.id = this.recycleAsyncId(t, e, null)),
                            (this.delay = null),
                            super.unsubscribe();
                    }
                }
            }
            const tM = { now: () => (tM.delegate || Date).now(), delegate: void 0 };
            class uc {
                constructor(e, t = uc.now) {
                    (this.schedulerActionCtor = e), (this.now = t);
                }
                schedule(e, t = 0, i) {
                    return new this.schedulerActionCtor(this, e).schedule(i, t);
                }
            }
            uc.now = tM.now;
            class my extends uc {
                constructor(e, t = uc.now) {
                    super(e, t), (this.actions = []), (this._active = !1);
                }
                flush(e) {
                    const { actions: t } = this;
                    if (this._active) return void t.push(e);
                    let i;
                    this._active = !0;
                    do {
                        if ((i = e.execute(e.state, e.delay))) break;
                    } while ((e = t.shift()));
                    if (((this._active = !1), i)) {
                        for (; (e = t.shift()); ) e.unsubscribe();
                        throw i;
                    }
                }
            }
            const py = new my(fy),
                x$ = py;
            function iM(n) {
                return Xi((e, t) => n <= t);
            }
            function T$(n, e) {
                return n === e;
            }
            function gy(n) {
                return Vt((e, t) => {
                    cn(n).subscribe(Ht(t, () => t.complete(), zf)), !t.closed && e.subscribe(t);
                });
            }
            function mh(n) {
                return Array.isArray(n) ? n : [n];
            }
            function pt(n) {
                return null == n ? '' : 'string' == typeof n ? n : `${n}px`;
            }
            function ca(n) {
                return n instanceof Tt ? n.nativeElement : n;
            }
            let _y = (() => {
                class n {
                    constructor(t) {
                        this._platform = t;
                    }
                    isDisabled(t) {
                        return t.hasAttribute('disabled');
                    }
                    isVisible(t) {
                        return (
                            (function P$(n) {
                                return !!(
                                    n.offsetWidth ||
                                    n.offsetHeight ||
                                    ('function' == typeof n.getClientRects && n.getClientRects().length)
                                );
                            })(t) && 'visible' === getComputedStyle(t).visibility
                        );
                    }
                    isTabbable(t) {
                        if (!this._platform.isBrowser) return !1;
                        const i = (function N$(n) {
                            try {
                                return n.frameElement;
                            } catch {
                                return null;
                            }
                        })(
                            (function U$(n) {
                                return (n.ownerDocument && n.ownerDocument.defaultView) || window;
                            })(t),
                        );
                        if (i && (-1 === aM(i) || !this.isVisible(i))) return !1;
                        let r = t.nodeName.toLowerCase(),
                            o = aM(t);
                        return t.hasAttribute('contenteditable')
                            ? -1 !== o
                            : !(
                                  'iframe' === r ||
                                  'object' === r ||
                                  (this._platform.WEBKIT &&
                                      this._platform.IOS &&
                                      !(function V$(n) {
                                          let e = n.nodeName.toLowerCase(),
                                              t = 'input' === e && n.type;
                                          return 'text' === t || 'password' === t || 'select' === e || 'textarea' === e;
                                      })(t))
                              ) &&
                                  ('audio' === r
                                      ? !!t.hasAttribute('controls') && -1 !== o
                                      : 'video' === r
                                        ? -1 !== o && (null !== o || this._platform.FIREFOX || t.hasAttribute('controls'))
                                        : t.tabIndex >= 0);
                    }
                    isFocusable(t, i) {
                        return (
                            (function H$(n) {
                                return (
                                    !(function F$(n) {
                                        return (
                                            (function B$(n) {
                                                return 'input' == n.nodeName.toLowerCase();
                                            })(n) && 'hidden' == n.type
                                        );
                                    })(n) &&
                                    ((function k$(n) {
                                        let e = n.nodeName.toLowerCase();
                                        return 'input' === e || 'select' === e || 'button' === e || 'textarea' === e;
                                    })(n) ||
                                        (function L$(n) {
                                            return (
                                                (function j$(n) {
                                                    return 'a' == n.nodeName.toLowerCase();
                                                })(n) && n.hasAttribute('href')
                                            );
                                        })(n) ||
                                        n.hasAttribute('contenteditable') ||
                                        sM(n))
                                );
                            })(t) &&
                            !this.isDisabled(t) &&
                            (i?.ignoreVisibility || this.isVisible(t))
                        );
                    }
                    static #e = (this.ɵfac = function (i) {
                        return new (i || n)(T(Xt));
                    });
                    static #t = (this.ɵprov = j({ token: n, factory: n.ɵfac, providedIn: 'root' }));
                }
                return n;
            })();
            function sM(n) {
                if (!n.hasAttribute('tabindex') || void 0 === n.tabIndex) return !1;
                let e = n.getAttribute('tabindex');
                return !(!e || isNaN(parseInt(e, 10)));
            }
            function aM(n) {
                if (!sM(n)) return null;
                const e = parseInt(n.getAttribute('tabindex') || '', 10);
                return isNaN(e) ? -1 : e;
            }
            class lM {
                get enabled() {
                    return this._enabled;
                }
                set enabled(e) {
                    (this._enabled = e),
                        this._startAnchor &&
                            this._endAnchor &&
                            (this._toggleAnchorTabIndex(e, this._startAnchor), this._toggleAnchorTabIndex(e, this._endAnchor));
                }
                constructor(e, t, i, r, o = !1) {
                    (this._element = e),
                        (this._checker = t),
                        (this._ngZone = i),
                        (this._document = r),
                        (this._hasAttached = !1),
                        (this.startAnchorListener = () => this.focusLastTabbableElement()),
                        (this.endAnchorListener = () => this.focusFirstTabbableElement()),
                        (this._enabled = !0),
                        o || this.attachAnchors();
                }
                destroy() {
                    const e = this._startAnchor,
                        t = this._endAnchor;
                    e && (e.removeEventListener('focus', this.startAnchorListener), e.remove()),
                        t && (t.removeEventListener('focus', this.endAnchorListener), t.remove()),
                        (this._startAnchor = this._endAnchor = null),
                        (this._hasAttached = !1);
                }
                attachAnchors() {
                    return (
                        !!this._hasAttached ||
                        (this._ngZone.runOutsideAngular(() => {
                            this._startAnchor ||
                                ((this._startAnchor = this._createAnchor()),
                                this._startAnchor.addEventListener('focus', this.startAnchorListener)),
                                this._endAnchor ||
                                    ((this._endAnchor = this._createAnchor()),
                                    this._endAnchor.addEventListener('focus', this.endAnchorListener));
                        }),
                        this._element.parentNode &&
                            (this._element.parentNode.insertBefore(this._startAnchor, this._element),
                            this._element.parentNode.insertBefore(this._endAnchor, this._element.nextSibling),
                            (this._hasAttached = !0)),
                        this._hasAttached)
                    );
                }
                focusInitialElementWhenReady(e) {
                    return new Promise((t) => {
                        this._executeOnStable(() => t(this.focusInitialElement(e)));
                    });
                }
                focusFirstTabbableElementWhenReady(e) {
                    return new Promise((t) => {
                        this._executeOnStable(() => t(this.focusFirstTabbableElement(e)));
                    });
                }
                focusLastTabbableElementWhenReady(e) {
                    return new Promise((t) => {
                        this._executeOnStable(() => t(this.focusLastTabbableElement(e)));
                    });
                }
                _getRegionBoundary(e) {
                    const t = this._element.querySelectorAll(`[cdk-focus-region-${e}], [cdkFocusRegion${e}], [cdk-focus-${e}]`);
                    return 'start' == e
                        ? t.length
                            ? t[0]
                            : this._getFirstTabbableElement(this._element)
                        : t.length
                          ? t[t.length - 1]
                          : this._getLastTabbableElement(this._element);
                }
                focusInitialElement(e) {
                    const t = this._element.querySelector('[cdk-focus-initial], [cdkFocusInitial]');
                    if (t) {
                        if (!this._checker.isFocusable(t)) {
                            const i = this._getFirstTabbableElement(t);
                            return i?.focus(e), !!i;
                        }
                        return t.focus(e), !0;
                    }
                    return this.focusFirstTabbableElement(e);
                }
                focusFirstTabbableElement(e) {
                    const t = this._getRegionBoundary('start');
                    return t && t.focus(e), !!t;
                }
                focusLastTabbableElement(e) {
                    const t = this._getRegionBoundary('end');
                    return t && t.focus(e), !!t;
                }
                hasAttached() {
                    return this._hasAttached;
                }
                _getFirstTabbableElement(e) {
                    if (this._checker.isFocusable(e) && this._checker.isTabbable(e)) return e;
                    const t = e.children;
                    for (let i = 0; i < t.length; i++) {
                        const r = t[i].nodeType === this._document.ELEMENT_NODE ? this._getFirstTabbableElement(t[i]) : null;
                        if (r) return r;
                    }
                    return null;
                }
                _getLastTabbableElement(e) {
                    if (this._checker.isFocusable(e) && this._checker.isTabbable(e)) return e;
                    const t = e.children;
                    for (let i = t.length - 1; i >= 0; i--) {
                        const r = t[i].nodeType === this._document.ELEMENT_NODE ? this._getLastTabbableElement(t[i]) : null;
                        if (r) return r;
                    }
                    return null;
                }
                _createAnchor() {
                    const e = this._document.createElement('div');
                    return (
                        this._toggleAnchorTabIndex(this._enabled, e),
                        e.classList.add('cdk-visually-hidden'),
                        e.classList.add('cdk-focus-trap-anchor'),
                        e.setAttribute('aria-hidden', 'true'),
                        e
                    );
                }
                _toggleAnchorTabIndex(e, t) {
                    e ? t.setAttribute('tabindex', '0') : t.removeAttribute('tabindex');
                }
                toggleAnchors(e) {
                    this._startAnchor &&
                        this._endAnchor &&
                        (this._toggleAnchorTabIndex(e, this._startAnchor), this._toggleAnchorTabIndex(e, this._endAnchor));
                }
                _executeOnStable(e) {
                    this._ngZone.isStable ? e() : this._ngZone.onStable.pipe(Io(1)).subscribe(e);
                }
            }
            let cM = (() => {
                class n {
                    constructor(t, i, r) {
                        (this._checker = t), (this._ngZone = i), (this._document = r);
                    }
                    create(t, i = !1) {
                        return new lM(t, this._checker, this._ngZone, this._document, i);
                    }
                    static #e = (this.ɵfac = function (i) {
                        return new (i || n)(T(_y), T(ce), T(De));
                    });
                    static #t = (this.ɵprov = j({ token: n, factory: n.ɵfac, providedIn: 'root' }));
                }
                return n;
            })();
            function uM(n) {
                return 0 === n.buttons || 0 === n.detail;
            }
            function dM(n) {
                const e = (n.touches && n.touches[0]) || (n.changedTouches && n.changedTouches[0]);
                return !(!e || -1 !== e.identifier || (null != e.radiusX && 1 !== e.radiusX) || (null != e.radiusY && 1 !== e.radiusY));
            }
            const z$ = new L('cdk-input-modality-detector-options'),
                G$ = { ignoreKeys: [18, 17, 224, 91, 16] },
                ua = dh({ passive: !0, capture: !0 });
            let W$ = (() => {
                class n {
                    get mostRecentModality() {
                        return this._modality.value;
                    }
                    constructor(t, i, r, o) {
                        (this._platform = t),
                            (this._mostRecentTarget = null),
                            (this._modality = new Gv(null)),
                            (this._lastTouchMs = 0),
                            (this._onKeydown = (s) => {
                                this._options?.ignoreKeys?.some((a) => a === s.keyCode) ||
                                    (this._modality.next('keyboard'), (this._mostRecentTarget = Nr(s)));
                            }),
                            (this._onMousedown = (s) => {
                                Date.now() - this._lastTouchMs < 650 ||
                                    (this._modality.next(uM(s) ? 'keyboard' : 'mouse'), (this._mostRecentTarget = Nr(s)));
                            }),
                            (this._onTouchstart = (s) => {
                                dM(s)
                                    ? this._modality.next('keyboard')
                                    : ((this._lastTouchMs = Date.now()), this._modality.next('touch'), (this._mostRecentTarget = Nr(s)));
                            }),
                            (this._options = { ...G$, ...o }),
                            (this.modalityDetected = this._modality.pipe(iM(1))),
                            (this.modalityChanged = this.modalityDetected.pipe(
                                (function S$(n, e = ns) {
                                    return (
                                        (n = n ?? T$),
                                        Vt((t, i) => {
                                            let r,
                                                o = !0;
                                            t.subscribe(
                                                Ht(i, (s) => {
                                                    const a = e(s);
                                                    (o || !n(r, a)) && ((o = !1), (r = a), i.next(s));
                                                }),
                                            );
                                        })
                                    );
                                })(),
                            )),
                            t.isBrowser &&
                                i.runOutsideAngular(() => {
                                    r.addEventListener('keydown', this._onKeydown, ua),
                                        r.addEventListener('mousedown', this._onMousedown, ua),
                                        r.addEventListener('touchstart', this._onTouchstart, ua);
                                });
                    }
                    ngOnDestroy() {
                        this._modality.complete(),
                            this._platform.isBrowser &&
                                (document.removeEventListener('keydown', this._onKeydown, ua),
                                document.removeEventListener('mousedown', this._onMousedown, ua),
                                document.removeEventListener('touchstart', this._onTouchstart, ua));
                    }
                    static #e = (this.ɵfac = function (i) {
                        return new (i || n)(T(Xt), T(ce), T(De), T(z$, 8));
                    });
                    static #t = (this.ɵprov = j({ token: n, factory: n.ɵfac, providedIn: 'root' }));
                }
                return n;
            })();
            var ph = (function (n) {
                return (n[(n.IMMEDIATE = 0)] = 'IMMEDIATE'), (n[(n.EVENTUAL = 1)] = 'EVENTUAL'), n;
            })(ph || {});
            const Y$ = new L('cdk-focus-monitor-default-options'),
                gh = dh({ passive: !0, capture: !0 });
            let yy = (() => {
                    class n {
                        constructor(t, i, r, o, s) {
                            (this._ngZone = t),
                                (this._platform = i),
                                (this._inputModalityDetector = r),
                                (this._origin = null),
                                (this._windowFocused = !1),
                                (this._originFromTouchInteraction = !1),
                                (this._elementInfo = new Map()),
                                (this._monitoredElementCount = 0),
                                (this._rootNodeFocusListenerCount = new Map()),
                                (this._windowFocusListener = () => {
                                    (this._windowFocused = !0),
                                        (this._windowFocusTimeoutId = window.setTimeout(() => (this._windowFocused = !1)));
                                }),
                                (this._stopInputModalityDetector = new et()),
                                (this._rootNodeFocusAndBlurListener = (a) => {
                                    for (let c = Nr(a); c; c = c.parentElement)
                                        'focus' === a.type ? this._onFocus(a, c) : this._onBlur(a, c);
                                }),
                                (this._document = o),
                                (this._detectionMode = s?.detectionMode || ph.IMMEDIATE);
                        }
                        monitor(t, i = !1) {
                            const r = ca(t);
                            if (!this._platform.isBrowser || 1 !== r.nodeType) return qi();
                            const o =
                                    (function s$(n) {
                                        if (
                                            (function o$() {
                                                if (null == uy) {
                                                    const n = typeof document < 'u' ? document.head : null;
                                                    uy = !(!n || (!n.createShadowRoot && !n.attachShadow));
                                                }
                                                return uy;
                                            })()
                                        ) {
                                            const e = n.getRootNode ? n.getRootNode() : null;
                                            if (typeof ShadowRoot < 'u' && ShadowRoot && e instanceof ShadowRoot) return e;
                                        }
                                        return null;
                                    })(r) || this._getDocument(),
                                s = this._elementInfo.get(r);
                            if (s) return i && (s.checkChildren = !0), s.subject;
                            const a = { checkChildren: i, subject: new et(), rootNode: o };
                            return this._elementInfo.set(r, a), this._registerGlobalListeners(a), a.subject;
                        }
                        stopMonitoring(t) {
                            const i = ca(t),
                                r = this._elementInfo.get(i);
                            r && (r.subject.complete(), this._setClasses(i), this._elementInfo.delete(i), this._removeGlobalListeners(r));
                        }
                        focusVia(t, i, r) {
                            const o = ca(t);
                            o === this._getDocument().activeElement
                                ? this._getClosestElementsInfo(o).forEach(([a, l]) => this._originChanged(a, i, l))
                                : (this._setOrigin(i), 'function' == typeof o.focus && o.focus(r));
                        }
                        ngOnDestroy() {
                            this._elementInfo.forEach((t, i) => this.stopMonitoring(i));
                        }
                        _getDocument() {
                            return this._document || document;
                        }
                        _getWindow() {
                            return this._getDocument().defaultView || window;
                        }
                        _getFocusOrigin(t) {
                            return this._origin
                                ? this._originFromTouchInteraction
                                    ? this._shouldBeAttributedToTouch(t)
                                        ? 'touch'
                                        : 'program'
                                    : this._origin
                                : this._windowFocused && this._lastFocusOrigin
                                  ? this._lastFocusOrigin
                                  : t && this._isLastInteractionFromInputLabel(t)
                                    ? 'mouse'
                                    : 'program';
                        }
                        _shouldBeAttributedToTouch(t) {
                            return this._detectionMode === ph.EVENTUAL || !!t?.contains(this._inputModalityDetector._mostRecentTarget);
                        }
                        _setClasses(t, i) {
                            t.classList.toggle('cdk-focused', !!i),
                                t.classList.toggle('cdk-touch-focused', 'touch' === i),
                                t.classList.toggle('cdk-keyboard-focused', 'keyboard' === i),
                                t.classList.toggle('cdk-mouse-focused', 'mouse' === i),
                                t.classList.toggle('cdk-program-focused', 'program' === i);
                        }
                        _setOrigin(t, i = !1) {
                            this._ngZone.runOutsideAngular(() => {
                                (this._origin = t),
                                    (this._originFromTouchInteraction = 'touch' === t && i),
                                    this._detectionMode === ph.IMMEDIATE &&
                                        (clearTimeout(this._originTimeoutId),
                                        (this._originTimeoutId = setTimeout(
                                            () => (this._origin = null),
                                            this._originFromTouchInteraction ? 650 : 1,
                                        )));
                            });
                        }
                        _onFocus(t, i) {
                            const r = this._elementInfo.get(i),
                                o = Nr(t);
                            !r || (!r.checkChildren && i !== o) || this._originChanged(i, this._getFocusOrigin(o), r);
                        }
                        _onBlur(t, i) {
                            const r = this._elementInfo.get(i);
                            !r ||
                                (r.checkChildren && t.relatedTarget instanceof Node && i.contains(t.relatedTarget)) ||
                                (this._setClasses(i), this._emitOrigin(r, null));
                        }
                        _emitOrigin(t, i) {
                            t.subject.observers.length && this._ngZone.run(() => t.subject.next(i));
                        }
                        _registerGlobalListeners(t) {
                            if (!this._platform.isBrowser) return;
                            const i = t.rootNode,
                                r = this._rootNodeFocusListenerCount.get(i) || 0;
                            r ||
                                this._ngZone.runOutsideAngular(() => {
                                    i.addEventListener('focus', this._rootNodeFocusAndBlurListener, gh),
                                        i.addEventListener('blur', this._rootNodeFocusAndBlurListener, gh);
                                }),
                                this._rootNodeFocusListenerCount.set(i, r + 1),
                                1 == ++this._monitoredElementCount &&
                                    (this._ngZone.runOutsideAngular(() => {
                                        this._getWindow().addEventListener('focus', this._windowFocusListener);
                                    }),
                                    this._inputModalityDetector.modalityDetected
                                        .pipe(gy(this._stopInputModalityDetector))
                                        .subscribe((o) => {
                                            this._setOrigin(o, !0);
                                        }));
                        }
                        _removeGlobalListeners(t) {
                            const i = t.rootNode;
                            if (this._rootNodeFocusListenerCount.has(i)) {
                                const r = this._rootNodeFocusListenerCount.get(i);
                                r > 1
                                    ? this._rootNodeFocusListenerCount.set(i, r - 1)
                                    : (i.removeEventListener('focus', this._rootNodeFocusAndBlurListener, gh),
                                      i.removeEventListener('blur', this._rootNodeFocusAndBlurListener, gh),
                                      this._rootNodeFocusListenerCount.delete(i));
                            }
                            --this._monitoredElementCount ||
                                (this._getWindow().removeEventListener('focus', this._windowFocusListener),
                                this._stopInputModalityDetector.next(),
                                clearTimeout(this._windowFocusTimeoutId),
                                clearTimeout(this._originTimeoutId));
                        }
                        _originChanged(t, i, r) {
                            this._setClasses(t, i), this._emitOrigin(r, i), (this._lastFocusOrigin = i);
                        }
                        _getClosestElementsInfo(t) {
                            const i = [];
                            return (
                                this._elementInfo.forEach((r, o) => {
                                    (o === t || (r.checkChildren && o.contains(t))) && i.push([o, r]);
                                }),
                                i
                            );
                        }
                        _isLastInteractionFromInputLabel(t) {
                            const { _mostRecentTarget: i, mostRecentModality: r } = this._inputModalityDetector;
                            if ('mouse' !== r || !i || i === t || ('INPUT' !== t.nodeName && 'TEXTAREA' !== t.nodeName) || t.disabled)
                                return !1;
                            const o = t.labels;
                            if (o) for (let s = 0; s < o.length; s++) if (o[s].contains(i)) return !0;
                            return !1;
                        }
                        static #e = (this.ɵfac = function (i) {
                            return new (i || n)(T(ce), T(Xt), T(W$), T(De, 8), T(Y$, 8));
                        });
                        static #t = (this.ɵprov = j({ token: n, factory: n.ɵfac, providedIn: 'root' }));
                    }
                    return n;
                })(),
                mM = (() => {
                    class n {
                        static #e = (this.STANDARD_CURVE = 'cubic-bezier(0.4,0.0,0.2,1)');
                        static #t = (this.DECELERATION_CURVE = 'cubic-bezier(0.0,0.0,0.2,1)');
                        static #n = (this.ACCELERATION_CURVE = 'cubic-bezier(0.4,0.0,1,1)');
                        static #i = (this.SHARP_CURVE = 'cubic-bezier(0.4,0.0,0.6,1)');
                    }
                    return n;
                })(),
                pM = (() => {
                    class n {
                        static #e = (this.COMPLEX = '375ms');
                        static #t = (this.ENTERING = '225ms');
                        static #n = (this.EXITING = '195ms');
                    }
                    return n;
                })();
            var Pn = (function (n) {
                return (
                    (n[(n.FADING_IN = 0)] = 'FADING_IN'),
                    (n[(n.VISIBLE = 1)] = 'VISIBLE'),
                    (n[(n.FADING_OUT = 2)] = 'FADING_OUT'),
                    (n[(n.HIDDEN = 3)] = 'HIDDEN'),
                    n
                );
            })(Pn || {});
            class n8 {
                constructor(e, t, i, r = !1) {
                    (this._renderer = e),
                        (this.element = t),
                        (this.config = i),
                        (this._animationForciblyDisabledThroughCss = r),
                        (this.state = Pn.HIDDEN);
                }
                fadeOut() {
                    this._renderer.fadeOutRipple(this);
                }
            }
            const gM = dh({ passive: !0, capture: !0 });
            class i8 {
                constructor() {
                    (this._events = new Map()),
                        (this._delegateEventHandler = (e) => {
                            const t = Nr(e);
                            t &&
                                this._events.get(e.type)?.forEach((i, r) => {
                                    (r === t || r.contains(t)) && i.forEach((o) => o.handleEvent(e));
                                });
                        });
                }
                addHandler(e, t, i, r) {
                    const o = this._events.get(t);
                    if (o) {
                        const s = o.get(i);
                        s ? s.add(r) : o.set(i, new Set([r]));
                    } else
                        this._events.set(t, new Map([[i, new Set([r])]])),
                            e.runOutsideAngular(() => {
                                document.addEventListener(t, this._delegateEventHandler, gM);
                            });
                }
                removeHandler(e, t, i) {
                    const r = this._events.get(e);
                    if (!r) return;
                    const o = r.get(t);
                    o &&
                        (o.delete(i),
                        0 === o.size && r.delete(t),
                        0 === r.size && (this._events.delete(e), document.removeEventListener(e, this._delegateEventHandler, gM)));
                }
            }
            const _M = { enterDuration: 225, exitDuration: 150 },
                yM = dh({ passive: !0, capture: !0 }),
                bM = ['mousedown', 'touchstart'],
                vM = ['mouseup', 'mouseleave', 'touchend', 'touchcancel'];
            class _h {
                static #e = (this._eventManager = new i8());
                constructor(e, t, i, r) {
                    (this._target = e),
                        (this._ngZone = t),
                        (this._platform = r),
                        (this._isPointerDown = !1),
                        (this._activeRipples = new Map()),
                        (this._pointerUpEventsRegistered = !1),
                        r.isBrowser && (this._containerElement = ca(i));
                }
                fadeInRipple(e, t, i = {}) {
                    const r = (this._containerRect = this._containerRect || this._containerElement.getBoundingClientRect()),
                        o = { ..._M, ...i.animation };
                    i.centered && ((e = r.left + r.width / 2), (t = r.top + r.height / 2));
                    const s =
                            i.radius ||
                            (function o8(n, e, t) {
                                const i = Math.max(Math.abs(n - t.left), Math.abs(n - t.right)),
                                    r = Math.max(Math.abs(e - t.top), Math.abs(e - t.bottom));
                                return Math.sqrt(i * i + r * r);
                            })(e, t, r),
                        a = e - r.left,
                        l = t - r.top,
                        c = o.enterDuration,
                        u = document.createElement('div');
                    u.classList.add('mat-ripple-element'),
                        (u.style.left = a - s + 'px'),
                        (u.style.top = l - s + 'px'),
                        (u.style.height = 2 * s + 'px'),
                        (u.style.width = 2 * s + 'px'),
                        null != i.color && (u.style.backgroundColor = i.color),
                        (u.style.transitionDuration = `${c}ms`),
                        this._containerElement.appendChild(u);
                    const d = window.getComputedStyle(u),
                        f = d.transitionDuration,
                        m = 'none' === d.transitionProperty || '0s' === f || '0s, 0s' === f || (0 === r.width && 0 === r.height),
                        p = new n8(this, u, i, m);
                    (u.style.transform = 'scale3d(1, 1, 1)'),
                        (p.state = Pn.FADING_IN),
                        i.persistent || (this._mostRecentTransientRipple = p);
                    let g = null;
                    return (
                        !m &&
                            (c || o.exitDuration) &&
                            this._ngZone.runOutsideAngular(() => {
                                const y = () => this._finishRippleTransition(p),
                                    _ = () => this._destroyRipple(p);
                                u.addEventListener('transitionend', y),
                                    u.addEventListener('transitioncancel', _),
                                    (g = { onTransitionEnd: y, onTransitionCancel: _ });
                            }),
                        this._activeRipples.set(p, g),
                        (m || !c) && this._finishRippleTransition(p),
                        p
                    );
                }
                fadeOutRipple(e) {
                    if (e.state === Pn.FADING_OUT || e.state === Pn.HIDDEN) return;
                    const t = e.element,
                        i = { ..._M, ...e.config.animation };
                    (t.style.transitionDuration = `${i.exitDuration}ms`),
                        (t.style.opacity = '0'),
                        (e.state = Pn.FADING_OUT),
                        (e._animationForciblyDisabledThroughCss || !i.exitDuration) && this._finishRippleTransition(e);
                }
                fadeOutAll() {
                    this._getActiveRipples().forEach((e) => e.fadeOut());
                }
                fadeOutAllNonPersistent() {
                    this._getActiveRipples().forEach((e) => {
                        e.config.persistent || e.fadeOut();
                    });
                }
                setupTriggerEvents(e) {
                    const t = ca(e);
                    !this._platform.isBrowser ||
                        !t ||
                        t === this._triggerElement ||
                        (this._removeTriggerEvents(),
                        (this._triggerElement = t),
                        bM.forEach((i) => {
                            _h._eventManager.addHandler(this._ngZone, i, t, this);
                        }));
                }
                handleEvent(e) {
                    'mousedown' === e.type ? this._onMousedown(e) : 'touchstart' === e.type ? this._onTouchStart(e) : this._onPointerUp(),
                        this._pointerUpEventsRegistered ||
                            (this._ngZone.runOutsideAngular(() => {
                                vM.forEach((t) => {
                                    this._triggerElement.addEventListener(t, this, yM);
                                });
                            }),
                            (this._pointerUpEventsRegistered = !0));
                }
                _finishRippleTransition(e) {
                    e.state === Pn.FADING_IN ? this._startFadeOutTransition(e) : e.state === Pn.FADING_OUT && this._destroyRipple(e);
                }
                _startFadeOutTransition(e) {
                    const t = e === this._mostRecentTransientRipple,
                        { persistent: i } = e.config;
                    (e.state = Pn.VISIBLE), !i && (!t || !this._isPointerDown) && e.fadeOut();
                }
                _destroyRipple(e) {
                    const t = this._activeRipples.get(e) ?? null;
                    this._activeRipples.delete(e),
                        this._activeRipples.size || (this._containerRect = null),
                        e === this._mostRecentTransientRipple && (this._mostRecentTransientRipple = null),
                        (e.state = Pn.HIDDEN),
                        null !== t &&
                            (e.element.removeEventListener('transitionend', t.onTransitionEnd),
                            e.element.removeEventListener('transitioncancel', t.onTransitionCancel)),
                        e.element.remove();
                }
                _onMousedown(e) {
                    const t = uM(e),
                        i = this._lastTouchStartEvent && Date.now() < this._lastTouchStartEvent + 800;
                    !this._target.rippleDisabled &&
                        !t &&
                        !i &&
                        ((this._isPointerDown = !0), this.fadeInRipple(e.clientX, e.clientY, this._target.rippleConfig));
                }
                _onTouchStart(e) {
                    if (!this._target.rippleDisabled && !dM(e)) {
                        (this._lastTouchStartEvent = Date.now()), (this._isPointerDown = !0);
                        const t = e.changedTouches;
                        if (t) for (let i = 0; i < t.length; i++) this.fadeInRipple(t[i].clientX, t[i].clientY, this._target.rippleConfig);
                    }
                }
                _onPointerUp() {
                    this._isPointerDown &&
                        ((this._isPointerDown = !1),
                        this._getActiveRipples().forEach((e) => {
                            !e.config.persistent &&
                                (e.state === Pn.VISIBLE || (e.config.terminateOnPointerUp && e.state === Pn.FADING_IN)) &&
                                e.fadeOut();
                        }));
                }
                _getActiveRipples() {
                    return Array.from(this._activeRipples.keys());
                }
                _removeTriggerEvents() {
                    const e = this._triggerElement;
                    e &&
                        (bM.forEach((t) => _h._eventManager.removeHandler(t, e, this)),
                        this._pointerUpEventsRegistered && vM.forEach((t) => e.removeEventListener(t, this, yM)));
                }
            }
            const EM = new L('mat-ripple-global-options');
            let s8 = (() => {
                class n {
                    get disabled() {
                        return this._disabled;
                    }
                    set disabled(t) {
                        t && this.fadeOutAllNonPersistent(), (this._disabled = t), this._setupTriggerEventsIfEnabled();
                    }
                    get trigger() {
                        return this._trigger || this._elementRef.nativeElement;
                    }
                    set trigger(t) {
                        (this._trigger = t), this._setupTriggerEventsIfEnabled();
                    }
                    constructor(t, i, r, o, s) {
                        (this._elementRef = t),
                            (this._animationMode = s),
                            (this.radius = 0),
                            (this._disabled = !1),
                            (this._isInitialized = !1),
                            (this._globalOptions = o || {}),
                            (this._rippleRenderer = new _h(this, i, t, r));
                    }
                    ngOnInit() {
                        (this._isInitialized = !0), this._setupTriggerEventsIfEnabled();
                    }
                    ngOnDestroy() {
                        this._rippleRenderer._removeTriggerEvents();
                    }
                    fadeOutAll() {
                        this._rippleRenderer.fadeOutAll();
                    }
                    fadeOutAllNonPersistent() {
                        this._rippleRenderer.fadeOutAllNonPersistent();
                    }
                    get rippleConfig() {
                        return {
                            centered: this.centered,
                            radius: this.radius,
                            color: this.color,
                            animation: {
                                ...this._globalOptions.animation,
                                ...('NoopAnimations' === this._animationMode ? { enterDuration: 0, exitDuration: 0 } : {}),
                                ...this.animation,
                            },
                            terminateOnPointerUp: this._globalOptions.terminateOnPointerUp,
                        };
                    }
                    get rippleDisabled() {
                        return this.disabled || !!this._globalOptions.disabled;
                    }
                    _setupTriggerEventsIfEnabled() {
                        !this.disabled && this._isInitialized && this._rippleRenderer.setupTriggerEvents(this.trigger);
                    }
                    launch(t, i = 0, r) {
                        return 'number' == typeof t
                            ? this._rippleRenderer.fadeInRipple(t, i, { ...this.rippleConfig, ...r })
                            : this._rippleRenderer.fadeInRipple(0, 0, { ...this.rippleConfig, ...t });
                    }
                    static #e = (this.ɵfac = function (i) {
                        return new (i || n)(P(Tt), P(ce), P(Xt), P(EM, 8), P(yr, 8));
                    });
                    static #t = (this.ɵdir = zt({
                        type: n,
                        selectors: [
                            ['', 'mat-ripple', ''],
                            ['', 'matRipple', ''],
                        ],
                        hostAttrs: [1, 'mat-ripple'],
                        hostVars: 2,
                        hostBindings: function (i, r) {
                            2 & i && Ui('mat-ripple-unbounded', r.unbounded);
                        },
                        inputs: {
                            color: [st.None, 'matRippleColor', 'color'],
                            unbounded: [st.None, 'matRippleUnbounded', 'unbounded'],
                            centered: [st.None, 'matRippleCentered', 'centered'],
                            radius: [st.None, 'matRippleRadius', 'radius'],
                            animation: [st.None, 'matRippleAnimation', 'animation'],
                            disabled: [st.None, 'matRippleDisabled', 'disabled'],
                            trigger: [st.None, 'matRippleTrigger', 'trigger'],
                        },
                        exportAs: ['matRipple'],
                        standalone: !0,
                    }));
                }
                return n;
            })();
            const wM = { capture: !0 },
                CM = ['focus', 'click', 'mouseenter', 'touchstart'],
                by = 'mat-ripple-loader-uninitialized',
                vy = 'mat-ripple-loader-class-name',
                DM = 'mat-ripple-loader-centered',
                yh = 'mat-ripple-loader-disabled';
            let a8 = (() => {
                class n {
                    constructor() {
                        (this._document = $(De, { optional: !0 })),
                            (this._animationMode = $(yr, { optional: !0 })),
                            (this._globalRippleOptions = $(EM, { optional: !0 })),
                            (this._platform = $(Xt)),
                            (this._ngZone = $(ce)),
                            (this._hosts = new Map()),
                            (this._onInteraction = (t) => {
                                if (!(t.target instanceof HTMLElement)) return;
                                const r = t.target.closest(`[${by}]`);
                                r && this._createRipple(r);
                            }),
                            this._ngZone.runOutsideAngular(() => {
                                for (const t of CM) this._document?.addEventListener(t, this._onInteraction, wM);
                            });
                    }
                    ngOnDestroy() {
                        const t = this._hosts.keys();
                        for (const i of t) this.destroyRipple(i);
                        for (const i of CM) this._document?.removeEventListener(i, this._onInteraction, wM);
                    }
                    configureRipple(t, i) {
                        t.setAttribute(by, ''),
                            (i.className || !t.hasAttribute(vy)) && t.setAttribute(vy, i.className || ''),
                            i.centered && t.setAttribute(DM, ''),
                            i.disabled && t.setAttribute(yh, '');
                    }
                    getRipple(t) {
                        return this._hosts.get(t) || this._createRipple(t);
                    }
                    setDisabled(t, i) {
                        const r = this._hosts.get(t);
                        r ? (r.disabled = i) : i ? t.setAttribute(yh, '') : t.removeAttribute(yh);
                    }
                    _createRipple(t) {
                        if (!this._document) return;
                        const i = this._hosts.get(t);
                        if (i) return i;
                        t.querySelector('.mat-ripple')?.remove();
                        const r = this._document.createElement('span');
                        r.classList.add('mat-ripple', t.getAttribute(vy)), t.append(r);
                        const o = new s8(
                            new Tt(r),
                            this._ngZone,
                            this._platform,
                            this._globalRippleOptions ? this._globalRippleOptions : void 0,
                            this._animationMode ? this._animationMode : void 0,
                        );
                        return (
                            (o._isInitialized = !0),
                            (o.trigger = t),
                            (o.centered = t.hasAttribute(DM)),
                            (o.disabled = t.hasAttribute(yh)),
                            this.attachRipple(t, o),
                            o
                        );
                    }
                    attachRipple(t, i) {
                        t.removeAttribute(by), this._hosts.set(t, i);
                    }
                    destroyRipple(t) {
                        const i = this._hosts.get(t);
                        i && (i.ngOnDestroy(), this._hosts.delete(t));
                    }
                    static #e = (this.ɵfac = function (i) {
                        return new (i || n)();
                    });
                    static #t = (this.ɵprov = j({ token: n, factory: n.ɵfac, providedIn: 'root' }));
                }
                return n;
            })();
            const l8 = ['mat-button', ''],
                IM = [
                    [
                        ['', 8, 'material-icons', 3, 'iconPositionEnd', ''],
                        ['mat-icon', 3, 'iconPositionEnd', ''],
                        ['', 'matButtonIcon', '', 3, 'iconPositionEnd', ''],
                    ],
                    '*',
                    [
                        ['', 'iconPositionEnd', '', 8, 'material-icons'],
                        ['mat-icon', 'iconPositionEnd', ''],
                        ['', 'matButtonIcon', '', 'iconPositionEnd', ''],
                    ],
                ],
                xM = [
                    '.material-icons:not([iconPositionEnd]), mat-icon:not([iconPositionEnd]), [matButtonIcon]:not([iconPositionEnd])',
                    '*',
                    '.material-icons[iconPositionEnd], mat-icon[iconPositionEnd], [matButtonIcon][iconPositionEnd]',
                ],
                u8 = ['mat-mini-fab', ''],
                h8 = ['mat-icon-button', ''],
                f8 = ['*'],
                m8 = new L('MAT_BUTTON_CONFIG'),
                p8 = [
                    { attribute: 'mat-button', mdcClasses: ['mdc-button', 'mat-mdc-button'] },
                    { attribute: 'mat-flat-button', mdcClasses: ['mdc-button', 'mdc-button--unelevated', 'mat-mdc-unelevated-button'] },
                    { attribute: 'mat-raised-button', mdcClasses: ['mdc-button', 'mdc-button--raised', 'mat-mdc-raised-button'] },
                    { attribute: 'mat-stroked-button', mdcClasses: ['mdc-button', 'mdc-button--outlined', 'mat-mdc-outlined-button'] },
                    { attribute: 'mat-fab', mdcClasses: ['mdc-fab', 'mat-mdc-fab'] },
                    { attribute: 'mat-mini-fab', mdcClasses: ['mdc-fab', 'mdc-fab--mini', 'mat-mdc-mini-fab'] },
                    { attribute: 'mat-icon-button', mdcClasses: ['mdc-icon-button', 'mat-mdc-icon-button'] },
                ];
            let Ey = (() => {
                    class n {
                        get ripple() {
                            return this._rippleLoader?.getRipple(this._elementRef.nativeElement);
                        }
                        set ripple(t) {
                            this._rippleLoader?.attachRipple(this._elementRef.nativeElement, t);
                        }
                        get disableRipple() {
                            return this._disableRipple;
                        }
                        set disableRipple(t) {
                            (this._disableRipple = t), this._updateRippleDisabled();
                        }
                        get disabled() {
                            return this._disabled;
                        }
                        set disabled(t) {
                            (this._disabled = t), this._updateRippleDisabled();
                        }
                        constructor(t, i, r, o) {
                            (this._elementRef = t),
                                (this._platform = i),
                                (this._ngZone = r),
                                (this._animationMode = o),
                                (this._focusMonitor = $(yy)),
                                (this._rippleLoader = $(a8)),
                                (this._isFab = !1),
                                (this._disableRipple = !1),
                                (this._disabled = !1);
                            const s = $(m8, { optional: !0 }),
                                a = t.nativeElement,
                                l = a.classList;
                            (this.disabledInteractive = s?.disabledInteractive ?? !1),
                                this._rippleLoader?.configureRipple(a, { className: 'mat-mdc-button-ripple' });
                            for (const { attribute: c, mdcClasses: u } of p8) a.hasAttribute(c) && l.add(...u);
                        }
                        ngAfterViewInit() {
                            this._focusMonitor.monitor(this._elementRef, !0);
                        }
                        ngOnDestroy() {
                            this._focusMonitor.stopMonitoring(this._elementRef),
                                this._rippleLoader?.destroyRipple(this._elementRef.nativeElement);
                        }
                        focus(t = 'program', i) {
                            t ? this._focusMonitor.focusVia(this._elementRef.nativeElement, t, i) : this._elementRef.nativeElement.focus(i);
                        }
                        _getAriaDisabled() {
                            return null != this.ariaDisabled ? this.ariaDisabled : !(!this.disabled || !this.disabledInteractive) || null;
                        }
                        _getDisabledAttribute() {
                            return !(this.disabledInteractive || !this.disabled) || null;
                        }
                        _updateRippleDisabled() {
                            this._rippleLoader?.setDisabled(this._elementRef.nativeElement, this.disableRipple || this.disabled);
                        }
                        static #e = (this.ɵfac = function (i) {
                            !(function bw() {
                                throw new Error('invalid');
                            })();
                        });
                        static #t = (this.ɵdir = zt({
                            type: n,
                            inputs: {
                                color: 'color',
                                disableRipple: [st.HasDecoratorInputTransform, 'disableRipple', 'disableRipple', Kl],
                                disabled: [st.HasDecoratorInputTransform, 'disabled', 'disabled', Kl],
                                ariaDisabled: [st.HasDecoratorInputTransform, 'aria-disabled', 'ariaDisabled', Kl],
                                disabledInteractive: [st.HasDecoratorInputTransform, 'disabledInteractive', 'disabledInteractive', Kl],
                            },
                            features: [yg],
                        }));
                    }
                    return n;
                })(),
                g8 = (() => {
                    class n extends Ey {
                        constructor(t, i, r, o) {
                            super(t, i, r, o);
                        }
                        static #e = (this.ɵfac = function (i) {
                            return new (i || n)(P(Tt), P(Xt), P(ce), P(yr, 8));
                        });
                        static #t = (this.ɵcmp = Pi({
                            type: n,
                            selectors: [
                                ['button', 'mat-button', ''],
                                ['button', 'mat-raised-button', ''],
                                ['button', 'mat-flat-button', ''],
                                ['button', 'mat-stroked-button', ''],
                            ],
                            hostVars: 14,
                            hostBindings: function (i, r) {
                                2 & i &&
                                    (xr('disabled', r._getDisabledAttribute())('aria-disabled', r._getAriaDisabled()),
                                    kl(r.color ? 'mat-' + r.color : ''),
                                    Ui('mat-mdc-button-disabled', r.disabled)('mat-mdc-button-disabled-interactive', r.disabledInteractive)(
                                        '_mat-animation-noopable',
                                        'NoopAnimations' === r._animationMode,
                                    )('mat-unthemed', !r.color)('mat-mdc-button-base', !0));
                            },
                            exportAs: ['matButton'],
                            standalone: !0,
                            features: [Dr, Gi],
                            attrs: l8,
                            ngContentSelectors: xM,
                            decls: 7,
                            vars: 4,
                            consts: [
                                [1, 'mat-mdc-button-persistent-ripple'],
                                [1, 'mdc-button__label'],
                                [1, 'mat-mdc-focus-indicator'],
                                [1, 'mat-mdc-button-touch-target'],
                            ],
                            template: function (i, r) {
                                1 & i &&
                                    (Ul(IM),
                                    Ei(0, 'span', 0),
                                    zi(1),
                                    Bt(2, 'span', 1),
                                    zi(3, 1),
                                    an(),
                                    zi(4, 2),
                                    Ei(5, 'span', 2)(6, 'span', 3)),
                                    2 & i && Ui('mdc-button__ripple', !r._isFab)('mdc-fab__ripple', r._isFab);
                            },
                            styles: [
                                '.mdc-touch-target-wrapper{display:inline}.mdc-elevation-overlay{position:absolute;border-radius:inherit;pointer-events:none;opacity:var(--mdc-elevation-overlay-opacity, 0);transition:opacity 280ms cubic-bezier(0.4, 0, 0.2, 1)}.mdc-button{position:relative;display:inline-flex;align-items:center;justify-content:center;box-sizing:border-box;min-width:64px;border:none;outline:none;line-height:inherit;user-select:none;-webkit-appearance:none;overflow:visible;vertical-align:middle;background:rgba(0,0,0,0)}.mdc-button .mdc-elevation-overlay{width:100%;height:100%;top:0;left:0}.mdc-button::-moz-focus-inner{padding:0;border:0}.mdc-button:active{outline:none}.mdc-button:hover{cursor:pointer}.mdc-button:disabled{cursor:default;pointer-events:none}.mdc-button[hidden]{display:none}.mdc-button .mdc-button__icon{margin-left:0;margin-right:8px;display:inline-block;position:relative;vertical-align:top}[dir=rtl] .mdc-button .mdc-button__icon,.mdc-button .mdc-button__icon[dir=rtl]{margin-left:8px;margin-right:0}.mdc-button .mdc-button__progress-indicator{font-size:0;position:absolute;transform:translate(-50%, -50%);top:50%;left:50%;line-height:initial}.mdc-button .mdc-button__label{position:relative}.mdc-button .mdc-button__focus-ring{pointer-events:none;border:2px solid rgba(0,0,0,0);border-radius:6px;box-sizing:content-box;position:absolute;top:50%;left:50%;transform:translate(-50%, -50%);height:calc(100% + 4px);width:calc(100% + 4px);display:none}@media screen and (forced-colors: active){.mdc-button .mdc-button__focus-ring{border-color:CanvasText}}.mdc-button .mdc-button__focus-ring::after{content:"";border:2px solid rgba(0,0,0,0);border-radius:8px;display:block;position:absolute;top:50%;left:50%;transform:translate(-50%, -50%);height:calc(100% + 4px);width:calc(100% + 4px)}@media screen and (forced-colors: active){.mdc-button .mdc-button__focus-ring::after{border-color:CanvasText}}@media screen and (forced-colors: active){.mdc-button.mdc-ripple-upgraded--background-focused .mdc-button__focus-ring,.mdc-button:not(.mdc-ripple-upgraded):focus .mdc-button__focus-ring{display:block}}.mdc-button .mdc-button__touch{position:absolute;top:50%;height:48px;left:0;right:0;transform:translateY(-50%)}.mdc-button__label+.mdc-button__icon{margin-left:8px;margin-right:0}[dir=rtl] .mdc-button__label+.mdc-button__icon,.mdc-button__label+.mdc-button__icon[dir=rtl]{margin-left:0;margin-right:8px}svg.mdc-button__icon{fill:currentColor}.mdc-button--touch{margin-top:6px;margin-bottom:6px}.mdc-button{padding:0 8px 0 8px}.mdc-button--unelevated{transition:box-shadow 280ms cubic-bezier(0.4, 0, 0.2, 1);padding:0 16px 0 16px}.mdc-button--unelevated.mdc-button--icon-trailing{padding:0 12px 0 16px}.mdc-button--unelevated.mdc-button--icon-leading{padding:0 16px 0 12px}.mdc-button--raised{transition:box-shadow 280ms cubic-bezier(0.4, 0, 0.2, 1);padding:0 16px 0 16px}.mdc-button--raised.mdc-button--icon-trailing{padding:0 12px 0 16px}.mdc-button--raised.mdc-button--icon-leading{padding:0 16px 0 12px}.mdc-button--outlined{border-style:solid;transition:border 280ms cubic-bezier(0.4, 0, 0.2, 1)}.mdc-button--outlined .mdc-button__ripple{border-style:solid;border-color:rgba(0,0,0,0)}.mat-mdc-button{font-family:var(--mdc-text-button-label-text-font);font-size:var(--mdc-text-button-label-text-size);letter-spacing:var(--mdc-text-button-label-text-tracking);font-weight:var(--mdc-text-button-label-text-weight);text-transform:var(--mdc-text-button-label-text-transform);height:var(--mdc-text-button-container-height);border-radius:var(--mdc-text-button-container-shape);padding:0 var(--mat-text-button-horizontal-padding, 8px)}.mat-mdc-button:not(:disabled){color:var(--mdc-text-button-label-text-color)}.mat-mdc-button:disabled{color:var(--mdc-text-button-disabled-label-text-color)}.mat-mdc-button .mdc-button__ripple{border-radius:var(--mdc-text-button-container-shape)}.mat-mdc-button:has(.material-icons,mat-icon,[matButtonIcon]){padding:0 var(--mat-text-button-with-icon-horizontal-padding, 8px)}.mat-mdc-button>.mat-icon{margin-right:var(--mat-text-button-icon-spacing, 8px);margin-left:var(--mat-text-button-icon-offset, 0)}[dir=rtl] .mat-mdc-button>.mat-icon{margin-right:var(--mat-text-button-icon-offset, 0);margin-left:var(--mat-text-button-icon-spacing, 8px)}.mat-mdc-button .mdc-button__label+.mat-icon{margin-right:var(--mat-text-button-icon-offset, 0);margin-left:var(--mat-text-button-icon-spacing, 8px)}[dir=rtl] .mat-mdc-button .mdc-button__label+.mat-icon{margin-right:var(--mat-text-button-icon-spacing, 8px);margin-left:var(--mat-text-button-icon-offset, 0)}.mat-mdc-button .mat-ripple-element{background-color:var(--mat-text-button-ripple-color)}.mat-mdc-button .mat-mdc-button-persistent-ripple::before{background-color:var(--mat-text-button-state-layer-color)}.mat-mdc-button.mat-mdc-button-disabled .mat-mdc-button-persistent-ripple::before{background-color:var(--mat-text-button-disabled-state-layer-color)}.mat-mdc-button:hover .mat-mdc-button-persistent-ripple::before{opacity:var(--mat-text-button-hover-state-layer-opacity)}.mat-mdc-button.cdk-program-focused .mat-mdc-button-persistent-ripple::before,.mat-mdc-button.cdk-keyboard-focused .mat-mdc-button-persistent-ripple::before,.mat-mdc-button.mat-mdc-button-disabled-interactive:focus .mat-mdc-button-persistent-ripple::before{opacity:var(--mat-text-button-focus-state-layer-opacity)}.mat-mdc-button:active .mat-mdc-button-persistent-ripple::before{opacity:var(--mat-text-button-pressed-state-layer-opacity)}.mat-mdc-button .mat-mdc-button-touch-target{position:absolute;top:50%;height:48px;left:0;right:0;transform:translateY(-50%);display:var(--mat-text-button-touch-target-display)}.mat-mdc-button[disabled],.mat-mdc-button.mat-mdc-button-disabled{cursor:default;pointer-events:none;color:var(--mdc-text-button-disabled-label-text-color)}.mat-mdc-button.mat-mdc-button-disabled-interactive{pointer-events:auto}.mat-mdc-unelevated-button{font-family:var(--mdc-filled-button-label-text-font);font-size:var(--mdc-filled-button-label-text-size);letter-spacing:var(--mdc-filled-button-label-text-tracking);font-weight:var(--mdc-filled-button-label-text-weight);text-transform:var(--mdc-filled-button-label-text-transform);height:var(--mdc-filled-button-container-height);border-radius:var(--mdc-filled-button-container-shape);padding:0 var(--mat-filled-button-horizontal-padding, 16px)}.mat-mdc-unelevated-button:not(:disabled){background-color:var(--mdc-filled-button-container-color)}.mat-mdc-unelevated-button:disabled{background-color:var(--mdc-filled-button-disabled-container-color)}.mat-mdc-unelevated-button:not(:disabled){color:var(--mdc-filled-button-label-text-color)}.mat-mdc-unelevated-button:disabled{color:var(--mdc-filled-button-disabled-label-text-color)}.mat-mdc-unelevated-button .mdc-button__ripple{border-radius:var(--mdc-filled-button-container-shape)}.mat-mdc-unelevated-button>.mat-icon{margin-right:var(--mat-filled-button-icon-spacing, 8px);margin-left:var(--mat-filled-button-icon-offset, -4px)}[dir=rtl] .mat-mdc-unelevated-button>.mat-icon{margin-right:var(--mat-filled-button-icon-offset, -4px);margin-left:var(--mat-filled-button-icon-spacing, 8px)}.mat-mdc-unelevated-button .mdc-button__label+.mat-icon{margin-right:var(--mat-filled-button-icon-offset, -4px);margin-left:var(--mat-filled-button-icon-spacing, 8px)}[dir=rtl] .mat-mdc-unelevated-button .mdc-button__label+.mat-icon{margin-right:var(--mat-filled-button-icon-spacing, 8px);margin-left:var(--mat-filled-button-icon-offset, -4px)}.mat-mdc-unelevated-button .mat-ripple-element{background-color:var(--mat-filled-button-ripple-color)}.mat-mdc-unelevated-button .mat-mdc-button-persistent-ripple::before{background-color:var(--mat-filled-button-state-layer-color)}.mat-mdc-unelevated-button.mat-mdc-button-disabled .mat-mdc-button-persistent-ripple::before{background-color:var(--mat-filled-button-disabled-state-layer-color)}.mat-mdc-unelevated-button:hover .mat-mdc-button-persistent-ripple::before{opacity:var(--mat-filled-button-hover-state-layer-opacity)}.mat-mdc-unelevated-button.cdk-program-focused .mat-mdc-button-persistent-ripple::before,.mat-mdc-unelevated-button.cdk-keyboard-focused .mat-mdc-button-persistent-ripple::before,.mat-mdc-unelevated-button.mat-mdc-button-disabled-interactive:focus .mat-mdc-button-persistent-ripple::before{opacity:var(--mat-filled-button-focus-state-layer-opacity)}.mat-mdc-unelevated-button:active .mat-mdc-button-persistent-ripple::before{opacity:var(--mat-filled-button-pressed-state-layer-opacity)}.mat-mdc-unelevated-button .mat-mdc-button-touch-target{position:absolute;top:50%;height:48px;left:0;right:0;transform:translateY(-50%);display:var(--mat-filled-button-touch-target-display)}.mat-mdc-unelevated-button[disabled],.mat-mdc-unelevated-button.mat-mdc-button-disabled{cursor:default;pointer-events:none;color:var(--mdc-filled-button-disabled-label-text-color);background-color:var(--mdc-filled-button-disabled-container-color)}.mat-mdc-unelevated-button.mat-mdc-button-disabled-interactive{pointer-events:auto}.mat-mdc-raised-button{font-family:var(--mdc-protected-button-label-text-font);font-size:var(--mdc-protected-button-label-text-size);letter-spacing:var(--mdc-protected-button-label-text-tracking);font-weight:var(--mdc-protected-button-label-text-weight);text-transform:var(--mdc-protected-button-label-text-transform);height:var(--mdc-protected-button-container-height);border-radius:var(--mdc-protected-button-container-shape);padding:0 var(--mat-protected-button-horizontal-padding, 16px);box-shadow:var(--mdc-protected-button-container-elevation-shadow)}.mat-mdc-raised-button:not(:disabled){background-color:var(--mdc-protected-button-container-color)}.mat-mdc-raised-button:disabled{background-color:var(--mdc-protected-button-disabled-container-color)}.mat-mdc-raised-button:not(:disabled){color:var(--mdc-protected-button-label-text-color)}.mat-mdc-raised-button:disabled{color:var(--mdc-protected-button-disabled-label-text-color)}.mat-mdc-raised-button .mdc-button__ripple{border-radius:var(--mdc-protected-button-container-shape)}.mat-mdc-raised-button>.mat-icon{margin-right:var(--mat-protected-button-icon-spacing, 8px);margin-left:var(--mat-protected-button-icon-offset, -4px)}[dir=rtl] .mat-mdc-raised-button>.mat-icon{margin-right:var(--mat-protected-button-icon-offset, -4px);margin-left:var(--mat-protected-button-icon-spacing, 8px)}.mat-mdc-raised-button .mdc-button__label+.mat-icon{margin-right:var(--mat-protected-button-icon-offset, -4px);margin-left:var(--mat-protected-button-icon-spacing, 8px)}[dir=rtl] .mat-mdc-raised-button .mdc-button__label+.mat-icon{margin-right:var(--mat-protected-button-icon-spacing, 8px);margin-left:var(--mat-protected-button-icon-offset, -4px)}.mat-mdc-raised-button .mat-ripple-element{background-color:var(--mat-protected-button-ripple-color)}.mat-mdc-raised-button .mat-mdc-button-persistent-ripple::before{background-color:var(--mat-protected-button-state-layer-color)}.mat-mdc-raised-button.mat-mdc-button-disabled .mat-mdc-button-persistent-ripple::before{background-color:var(--mat-protected-button-disabled-state-layer-color)}.mat-mdc-raised-button:hover .mat-mdc-button-persistent-ripple::before{opacity:var(--mat-protected-button-hover-state-layer-opacity)}.mat-mdc-raised-button.cdk-program-focused .mat-mdc-button-persistent-ripple::before,.mat-mdc-raised-button.cdk-keyboard-focused .mat-mdc-button-persistent-ripple::before,.mat-mdc-raised-button.mat-mdc-button-disabled-interactive:focus .mat-mdc-button-persistent-ripple::before{opacity:var(--mat-protected-button-focus-state-layer-opacity)}.mat-mdc-raised-button:active .mat-mdc-button-persistent-ripple::before{opacity:var(--mat-protected-button-pressed-state-layer-opacity)}.mat-mdc-raised-button .mat-mdc-button-touch-target{position:absolute;top:50%;height:48px;left:0;right:0;transform:translateY(-50%);display:var(--mat-protected-button-touch-target-display)}.mat-mdc-raised-button:hover{box-shadow:var(--mdc-protected-button-hover-container-elevation-shadow)}.mat-mdc-raised-button:focus{box-shadow:var(--mdc-protected-button-focus-container-elevation-shadow)}.mat-mdc-raised-button:active,.mat-mdc-raised-button:focus:active{box-shadow:var(--mdc-protected-button-pressed-container-elevation-shadow)}.mat-mdc-raised-button[disabled],.mat-mdc-raised-button.mat-mdc-button-disabled{cursor:default;pointer-events:none;color:var(--mdc-protected-button-disabled-label-text-color);background-color:var(--mdc-protected-button-disabled-container-color)}.mat-mdc-raised-button[disabled].mat-mdc-button-disabled,.mat-mdc-raised-button.mat-mdc-button-disabled.mat-mdc-button-disabled{box-shadow:var(--mdc-protected-button-disabled-container-elevation-shadow)}.mat-mdc-raised-button.mat-mdc-button-disabled-interactive{pointer-events:auto}.mat-mdc-outlined-button{font-family:var(--mdc-outlined-button-label-text-font);font-size:var(--mdc-outlined-button-label-text-size);letter-spacing:var(--mdc-outlined-button-label-text-tracking);font-weight:var(--mdc-outlined-button-label-text-weight);text-transform:var(--mdc-outlined-button-label-text-transform);height:var(--mdc-outlined-button-container-height);border-radius:var(--mdc-outlined-button-container-shape);padding:0 15px 0 15px;border-width:var(--mdc-outlined-button-outline-width);padding:0 var(--mat-outlined-button-horizontal-padding, 15px)}.mat-mdc-outlined-button:not(:disabled){color:var(--mdc-outlined-button-label-text-color)}.mat-mdc-outlined-button:disabled{color:var(--mdc-outlined-button-disabled-label-text-color)}.mat-mdc-outlined-button .mdc-button__ripple{border-radius:var(--mdc-outlined-button-container-shape)}.mat-mdc-outlined-button:not(:disabled){border-color:var(--mdc-outlined-button-outline-color)}.mat-mdc-outlined-button:disabled{border-color:var(--mdc-outlined-button-disabled-outline-color)}.mat-mdc-outlined-button.mdc-button--icon-trailing{padding:0 11px 0 15px}.mat-mdc-outlined-button.mdc-button--icon-leading{padding:0 15px 0 11px}.mat-mdc-outlined-button .mdc-button__ripple{top:-1px;left:-1px;bottom:-1px;right:-1px;border-width:var(--mdc-outlined-button-outline-width)}.mat-mdc-outlined-button .mdc-button__touch{left:calc(-1 * var(--mdc-outlined-button-outline-width));width:calc(100% + 2 * var(--mdc-outlined-button-outline-width))}.mat-mdc-outlined-button>.mat-icon{margin-right:var(--mat-outlined-button-icon-spacing, 8px);margin-left:var(--mat-outlined-button-icon-offset, -4px)}[dir=rtl] .mat-mdc-outlined-button>.mat-icon{margin-right:var(--mat-outlined-button-icon-offset, -4px);margin-left:var(--mat-outlined-button-icon-spacing, 8px)}.mat-mdc-outlined-button .mdc-button__label+.mat-icon{margin-right:var(--mat-outlined-button-icon-offset, -4px);margin-left:var(--mat-outlined-button-icon-spacing, 8px)}[dir=rtl] .mat-mdc-outlined-button .mdc-button__label+.mat-icon{margin-right:var(--mat-outlined-button-icon-spacing, 8px);margin-left:var(--mat-outlined-button-icon-offset, -4px)}.mat-mdc-outlined-button .mat-ripple-element{background-color:var(--mat-outlined-button-ripple-color)}.mat-mdc-outlined-button .mat-mdc-button-persistent-ripple::before{background-color:var(--mat-outlined-button-state-layer-color)}.mat-mdc-outlined-button.mat-mdc-button-disabled .mat-mdc-button-persistent-ripple::before{background-color:var(--mat-outlined-button-disabled-state-layer-color)}.mat-mdc-outlined-button:hover .mat-mdc-button-persistent-ripple::before{opacity:var(--mat-outlined-button-hover-state-layer-opacity)}.mat-mdc-outlined-button.cdk-program-focused .mat-mdc-button-persistent-ripple::before,.mat-mdc-outlined-button.cdk-keyboard-focused .mat-mdc-button-persistent-ripple::before,.mat-mdc-outlined-button.mat-mdc-button-disabled-interactive:focus .mat-mdc-button-persistent-ripple::before{opacity:var(--mat-outlined-button-focus-state-layer-opacity)}.mat-mdc-outlined-button:active .mat-mdc-button-persistent-ripple::before{opacity:var(--mat-outlined-button-pressed-state-layer-opacity)}.mat-mdc-outlined-button .mat-mdc-button-touch-target{position:absolute;top:50%;height:48px;left:0;right:0;transform:translateY(-50%);display:var(--mat-outlined-button-touch-target-display)}.mat-mdc-outlined-button[disabled],.mat-mdc-outlined-button.mat-mdc-button-disabled{cursor:default;pointer-events:none;color:var(--mdc-outlined-button-disabled-label-text-color);border-color:var(--mdc-outlined-button-disabled-outline-color)}.mat-mdc-outlined-button.mat-mdc-button-disabled-interactive{pointer-events:auto}.mat-mdc-button-base{text-decoration:none}.mat-mdc-button,.mat-mdc-unelevated-button,.mat-mdc-raised-button,.mat-mdc-outlined-button{-webkit-tap-highlight-color:rgba(0,0,0,0)}.mat-mdc-button .mat-mdc-button-ripple,.mat-mdc-button .mat-mdc-button-persistent-ripple,.mat-mdc-button .mat-mdc-button-persistent-ripple::before,.mat-mdc-unelevated-button .mat-mdc-button-ripple,.mat-mdc-unelevated-button .mat-mdc-button-persistent-ripple,.mat-mdc-unelevated-button .mat-mdc-button-persistent-ripple::before,.mat-mdc-raised-button .mat-mdc-button-ripple,.mat-mdc-raised-button .mat-mdc-button-persistent-ripple,.mat-mdc-raised-button .mat-mdc-button-persistent-ripple::before,.mat-mdc-outlined-button .mat-mdc-button-ripple,.mat-mdc-outlined-button .mat-mdc-button-persistent-ripple,.mat-mdc-outlined-button .mat-mdc-button-persistent-ripple::before{top:0;left:0;right:0;bottom:0;position:absolute;pointer-events:none;border-radius:inherit}.mat-mdc-button .mat-mdc-button-ripple,.mat-mdc-unelevated-button .mat-mdc-button-ripple,.mat-mdc-raised-button .mat-mdc-button-ripple,.mat-mdc-outlined-button .mat-mdc-button-ripple{overflow:hidden}.mat-mdc-button .mat-mdc-button-persistent-ripple::before,.mat-mdc-unelevated-button .mat-mdc-button-persistent-ripple::before,.mat-mdc-raised-button .mat-mdc-button-persistent-ripple::before,.mat-mdc-outlined-button .mat-mdc-button-persistent-ripple::before{content:"";opacity:0}.mat-mdc-button .mdc-button__label,.mat-mdc-unelevated-button .mdc-button__label,.mat-mdc-raised-button .mdc-button__label,.mat-mdc-outlined-button .mdc-button__label{z-index:1}.mat-mdc-button .mat-mdc-focus-indicator,.mat-mdc-unelevated-button .mat-mdc-focus-indicator,.mat-mdc-raised-button .mat-mdc-focus-indicator,.mat-mdc-outlined-button .mat-mdc-focus-indicator{top:0;left:0;right:0;bottom:0;position:absolute}.mat-mdc-button:focus .mat-mdc-focus-indicator::before,.mat-mdc-unelevated-button:focus .mat-mdc-focus-indicator::before,.mat-mdc-raised-button:focus .mat-mdc-focus-indicator::before,.mat-mdc-outlined-button:focus .mat-mdc-focus-indicator::before{content:""}.mat-mdc-button._mat-animation-noopable,.mat-mdc-unelevated-button._mat-animation-noopable,.mat-mdc-raised-button._mat-animation-noopable,.mat-mdc-outlined-button._mat-animation-noopable{transition:none !important;animation:none !important}.mat-mdc-button>.mat-icon,.mat-mdc-unelevated-button>.mat-icon,.mat-mdc-raised-button>.mat-icon,.mat-mdc-outlined-button>.mat-icon{display:inline-block;position:relative;vertical-align:top;font-size:1.125rem;height:1.125rem;width:1.125rem}.mat-mdc-outlined-button .mat-mdc-button-ripple,.mat-mdc-outlined-button .mdc-button__ripple{top:-1px;left:-1px;bottom:-1px;right:-1px;border-width:-1px}.mat-mdc-unelevated-button .mat-mdc-focus-indicator::before,.mat-mdc-raised-button .mat-mdc-focus-indicator::before{margin:calc(calc(var(--mat-mdc-focus-indicator-border-width, 3px) + 2px)*-1)}.mat-mdc-outlined-button .mat-mdc-focus-indicator::before{margin:calc(calc(var(--mat-mdc-focus-indicator-border-width, 3px) + 3px)*-1)}',
                                '.cdk-high-contrast-active .mat-mdc-button:not(.mdc-button--outlined),.cdk-high-contrast-active .mat-mdc-unelevated-button:not(.mdc-button--outlined),.cdk-high-contrast-active .mat-mdc-raised-button:not(.mdc-button--outlined),.cdk-high-contrast-active .mat-mdc-outlined-button:not(.mdc-button--outlined),.cdk-high-contrast-active .mat-mdc-icon-button{outline:solid 1px}',
                            ],
                            encapsulation: 2,
                            changeDetection: 0,
                        }));
                    }
                    return n;
                })();
            const _8 = new L('mat-mdc-fab-default-options', { providedIn: 'root', factory: SM });
            function SM() {
                return { color: 'accent' };
            }
            const TM = SM();
            let y8 = (() => {
                    class n extends Ey {
                        constructor(t, i, r, o, s) {
                            super(t, i, r, o),
                                (this._options = s),
                                (this._isFab = !0),
                                (this._options = this._options || TM),
                                (this.color = this._options.color || TM.color);
                        }
                        static #e = (this.ɵfac = function (i) {
                            return new (i || n)(P(Tt), P(Xt), P(ce), P(yr, 8), P(_8, 8));
                        });
                        static #t = (this.ɵcmp = Pi({
                            type: n,
                            selectors: [['button', 'mat-mini-fab', '']],
                            hostVars: 14,
                            hostBindings: function (i, r) {
                                2 & i &&
                                    (xr('disabled', r._getDisabledAttribute())('aria-disabled', r._getAriaDisabled()),
                                    kl(r.color ? 'mat-' + r.color : ''),
                                    Ui('mat-mdc-button-disabled', r.disabled)('mat-mdc-button-disabled-interactive', r.disabledInteractive)(
                                        '_mat-animation-noopable',
                                        'NoopAnimations' === r._animationMode,
                                    )('mat-unthemed', !r.color)('mat-mdc-button-base', !0));
                            },
                            exportAs: ['matButton'],
                            standalone: !0,
                            features: [Dr, Gi],
                            attrs: u8,
                            ngContentSelectors: xM,
                            decls: 7,
                            vars: 4,
                            consts: [
                                [1, 'mat-mdc-button-persistent-ripple'],
                                [1, 'mdc-button__label'],
                                [1, 'mat-mdc-focus-indicator'],
                                [1, 'mat-mdc-button-touch-target'],
                            ],
                            template: function (i, r) {
                                1 & i &&
                                    (Ul(IM),
                                    Ei(0, 'span', 0),
                                    zi(1),
                                    Bt(2, 'span', 1),
                                    zi(3, 1),
                                    an(),
                                    zi(4, 2),
                                    Ei(5, 'span', 2)(6, 'span', 3)),
                                    2 & i && Ui('mdc-button__ripple', !r._isFab)('mdc-fab__ripple', r._isFab);
                            },
                            styles: [
                                '.mdc-touch-target-wrapper{display:inline}.mdc-elevation-overlay{position:absolute;border-radius:inherit;pointer-events:none;opacity:var(--mdc-elevation-overlay-opacity);transition:opacity 280ms cubic-bezier(0.4, 0, 0.2, 1)}.mdc-fab{position:relative;display:inline-flex;position:relative;align-items:center;justify-content:center;box-sizing:border-box;width:56px;height:56px;padding:0;border:none;fill:currentColor;text-decoration:none;cursor:pointer;user-select:none;-moz-appearance:none;-webkit-appearance:none;overflow:visible;transition:box-shadow 280ms cubic-bezier(0.4, 0, 0.2, 1),opacity 15ms linear 30ms,transform 270ms 0ms cubic-bezier(0, 0, 0.2, 1)}.mdc-fab .mdc-elevation-overlay{width:100%;height:100%;top:0;left:0}.mdc-fab[hidden]{display:none}.mdc-fab::-moz-focus-inner{padding:0;border:0}.mdc-fab .mdc-fab__focus-ring{position:absolute}.mdc-fab.mdc-ripple-upgraded--background-focused .mdc-fab__focus-ring,.mdc-fab:not(.mdc-ripple-upgraded):focus .mdc-fab__focus-ring{pointer-events:none;border:2px solid rgba(0,0,0,0);border-radius:6px;box-sizing:content-box;position:absolute;top:50%;left:50%;transform:translate(-50%, -50%);height:calc(100% + 4px);width:calc(100% + 4px)}@media screen and (forced-colors: active){.mdc-fab.mdc-ripple-upgraded--background-focused .mdc-fab__focus-ring,.mdc-fab:not(.mdc-ripple-upgraded):focus .mdc-fab__focus-ring{border-color:CanvasText}}.mdc-fab.mdc-ripple-upgraded--background-focused .mdc-fab__focus-ring::after,.mdc-fab:not(.mdc-ripple-upgraded):focus .mdc-fab__focus-ring::after{content:"";border:2px solid rgba(0,0,0,0);border-radius:8px;display:block;position:absolute;top:50%;left:50%;transform:translate(-50%, -50%);height:calc(100% + 4px);width:calc(100% + 4px)}@media screen and (forced-colors: active){.mdc-fab.mdc-ripple-upgraded--background-focused .mdc-fab__focus-ring::after,.mdc-fab:not(.mdc-ripple-upgraded):focus .mdc-fab__focus-ring::after{border-color:CanvasText}}.mdc-fab:active,.mdc-fab:focus{outline:none}.mdc-fab:hover{cursor:pointer}.mdc-fab>svg{width:100%}.mdc-fab--mini{width:40px;height:40px}.mdc-fab--extended{border-radius:24px;padding-left:20px;padding-right:20px;width:auto;max-width:100%;height:48px;line-height:normal}.mdc-fab--extended .mdc-fab__ripple{border-radius:24px}.mdc-fab--extended .mdc-fab__icon{margin-left:calc(12px - 20px);margin-right:12px}[dir=rtl] .mdc-fab--extended .mdc-fab__icon,.mdc-fab--extended .mdc-fab__icon[dir=rtl]{margin-left:12px;margin-right:calc(12px - 20px)}.mdc-fab--extended .mdc-fab__label+.mdc-fab__icon{margin-left:12px;margin-right:calc(12px - 20px)}[dir=rtl] .mdc-fab--extended .mdc-fab__label+.mdc-fab__icon,.mdc-fab--extended .mdc-fab__label+.mdc-fab__icon[dir=rtl]{margin-left:calc(12px - 20px);margin-right:12px}.mdc-fab--touch{margin-top:4px;margin-bottom:4px;margin-right:4px;margin-left:4px}.mdc-fab--touch .mdc-fab__touch{position:absolute;top:50%;height:48px;left:50%;width:48px;transform:translate(-50%, -50%)}.mdc-fab::before{position:absolute;box-sizing:border-box;width:100%;height:100%;top:0;left:0;border:1px solid rgba(0,0,0,0);border-radius:inherit;content:"";pointer-events:none}@media screen and (forced-colors: active){.mdc-fab::before{border-color:CanvasText}}.mdc-fab__label{justify-content:flex-start;text-overflow:ellipsis;white-space:nowrap;overflow-x:hidden;overflow-y:visible}.mdc-fab__icon{transition:transform 180ms 90ms cubic-bezier(0, 0, 0.2, 1);fill:currentColor;will-change:transform}.mdc-fab .mdc-fab__icon{display:inline-flex;align-items:center;justify-content:center}.mdc-fab--exited{transform:scale(0);opacity:0;transition:opacity 15ms linear 150ms,transform 180ms 0ms cubic-bezier(0.4, 0, 1, 1)}.mdc-fab--exited .mdc-fab__icon{transform:scale(0);transition:transform 135ms 0ms cubic-bezier(0.4, 0, 1, 1)}.mat-mdc-fab{background-color:var(--mdc-fab-container-color)}.mat-mdc-fab .mdc-fab__icon{width:var(--mdc-fab-icon-size);height:var(--mdc-fab-icon-size);font-size:var(--mdc-fab-icon-size)}.mat-mdc-fab:not(.mdc-fab--extended){border-radius:var(--mdc-fab-container-shape)}.mat-mdc-fab:not(.mdc-fab--extended) .mdc-fab__ripple{border-radius:var(--mdc-fab-container-shape)}.mat-mdc-mini-fab{background-color:var(--mdc-fab-small-container-color)}.mat-mdc-mini-fab .mdc-fab__icon{width:var(--mdc-fab-small-icon-size);height:var(--mdc-fab-small-icon-size);font-size:var(--mdc-fab-small-icon-size)}.mat-mdc-mini-fab:not(.mdc-fab--extended){border-radius:var(--mdc-fab-small-container-shape)}.mat-mdc-mini-fab:not(.mdc-fab--extended) .mdc-fab__ripple{border-radius:var(--mdc-fab-small-container-shape)}.mat-mdc-extended-fab{-moz-osx-font-smoothing:grayscale;-webkit-font-smoothing:antialiased;height:var(--mdc-extended-fab-container-height);border-radius:var(--mdc-extended-fab-container-shape);font-family:var(--mdc-extended-fab-label-text-font);font-size:var(--mdc-extended-fab-label-text-size);font-weight:var(--mdc-extended-fab-label-text-weight);letter-spacing:var(--mdc-extended-fab-label-text-tracking)}.mat-mdc-extended-fab .mdc-fab__ripple{border-radius:var(--mdc-extended-fab-container-shape)}.mat-mdc-fab,.mat-mdc-mini-fab{-webkit-tap-highlight-color:rgba(0,0,0,0);flex-shrink:0}.mat-mdc-fab .mat-mdc-button-ripple,.mat-mdc-fab .mat-mdc-button-persistent-ripple,.mat-mdc-fab .mat-mdc-button-persistent-ripple::before,.mat-mdc-mini-fab .mat-mdc-button-ripple,.mat-mdc-mini-fab .mat-mdc-button-persistent-ripple,.mat-mdc-mini-fab .mat-mdc-button-persistent-ripple::before{top:0;left:0;right:0;bottom:0;position:absolute;pointer-events:none;border-radius:inherit}.mat-mdc-fab .mat-mdc-button-ripple,.mat-mdc-mini-fab .mat-mdc-button-ripple{overflow:hidden}.mat-mdc-fab .mat-mdc-button-persistent-ripple::before,.mat-mdc-mini-fab .mat-mdc-button-persistent-ripple::before{content:"";opacity:0}.mat-mdc-fab .mdc-button__label,.mat-mdc-mini-fab .mdc-button__label{z-index:1}.mat-mdc-fab .mat-mdc-focus-indicator,.mat-mdc-mini-fab .mat-mdc-focus-indicator{top:0;left:0;right:0;bottom:0;position:absolute}.mat-mdc-fab:focus .mat-mdc-focus-indicator::before,.mat-mdc-mini-fab:focus .mat-mdc-focus-indicator::before{content:""}.mat-mdc-fab._mat-animation-noopable,.mat-mdc-mini-fab._mat-animation-noopable{transition:none !important;animation:none !important}.mat-mdc-fab:not(.mdc-ripple-upgraded):focus::before,.mat-mdc-mini-fab:not(.mdc-ripple-upgraded):focus::before{background:rgba(0,0,0,0);opacity:1}.mat-mdc-fab .mat-icon,.mat-mdc-fab .material-icons,.mat-mdc-mini-fab .mat-icon,.mat-mdc-mini-fab .material-icons{transition:transform 180ms 90ms cubic-bezier(0, 0, 0.2, 1);fill:currentColor;will-change:transform}.mat-mdc-fab .mat-mdc-focus-indicator::before,.mat-mdc-mini-fab .mat-mdc-focus-indicator::before{margin:calc(calc(var(--mat-mdc-focus-indicator-border-width, 3px) + 2px)*-1)}.mat-mdc-fab[disabled],.mat-mdc-fab.mat-mdc-button-disabled,.mat-mdc-mini-fab[disabled],.mat-mdc-mini-fab.mat-mdc-button-disabled{cursor:default;pointer-events:none}.mat-mdc-fab[disabled],.mat-mdc-fab[disabled]:focus,.mat-mdc-fab.mat-mdc-button-disabled,.mat-mdc-fab.mat-mdc-button-disabled:focus,.mat-mdc-mini-fab[disabled],.mat-mdc-mini-fab[disabled]:focus,.mat-mdc-mini-fab.mat-mdc-button-disabled,.mat-mdc-mini-fab.mat-mdc-button-disabled:focus{box-shadow:none}.mat-mdc-fab.mat-mdc-button-disabled-interactive,.mat-mdc-mini-fab.mat-mdc-button-disabled-interactive{pointer-events:auto}.mat-mdc-fab{color:var(--mat-fab-foreground-color, inherit);box-shadow:var(--mdc-fab-container-elevation-shadow)}.mat-mdc-fab .mat-mdc-button-touch-target{position:absolute;top:50%;height:48px;left:50%;width:48px;transform:translate(-50%, -50%);display:var(--mat-fab-touch-target-display)}.mat-mdc-fab .mat-ripple-element{background-color:var(--mat-fab-ripple-color)}.mat-mdc-fab .mat-mdc-button-persistent-ripple::before{background-color:var(--mat-fab-state-layer-color)}.mat-mdc-fab.mat-mdc-button-disabled .mat-mdc-button-persistent-ripple::before{background-color:var(--mat-fab-disabled-state-layer-color)}.mat-mdc-fab:hover .mat-mdc-button-persistent-ripple::before{opacity:var(--mat-fab-hover-state-layer-opacity)}.mat-mdc-fab.cdk-program-focused .mat-mdc-button-persistent-ripple::before,.mat-mdc-fab.cdk-keyboard-focused .mat-mdc-button-persistent-ripple::before,.mat-mdc-fab.mat-mdc-button-disabled-interactive:focus .mat-mdc-button-persistent-ripple::before{opacity:var(--mat-fab-focus-state-layer-opacity)}.mat-mdc-fab:active .mat-mdc-button-persistent-ripple::before{opacity:var(--mat-fab-pressed-state-layer-opacity)}.mat-mdc-fab:hover{box-shadow:var(--mdc-fab-hover-container-elevation-shadow)}.mat-mdc-fab:focus{box-shadow:var(--mdc-fab-focus-container-elevation-shadow)}.mat-mdc-fab:active,.mat-mdc-fab:focus:active{box-shadow:var(--mdc-fab-pressed-container-elevation-shadow)}.mat-mdc-fab[disabled],.mat-mdc-fab.mat-mdc-button-disabled{cursor:default;pointer-events:none;color:var(--mat-fab-disabled-state-foreground-color);background-color:var(--mat-fab-disabled-state-container-color)}.mat-mdc-fab.mat-mdc-button-disabled-interactive{pointer-events:auto}.mat-mdc-mini-fab{color:var(--mat-fab-small-foreground-color, inherit);box-shadow:var(--mdc-fab-small-container-elevation-shadow)}.mat-mdc-mini-fab .mat-mdc-button-touch-target{position:absolute;top:50%;height:48px;left:50%;width:48px;transform:translate(-50%, -50%);display:var(--mat-fab-small-touch-target-display)}.mat-mdc-mini-fab .mat-ripple-element{background-color:var(--mat-fab-small-ripple-color)}.mat-mdc-mini-fab .mat-mdc-button-persistent-ripple::before{background-color:var(--mat-fab-small-state-layer-color)}.mat-mdc-mini-fab.mat-mdc-button-disabled .mat-mdc-button-persistent-ripple::before{background-color:var(--mat-fab-small-disabled-state-layer-color)}.mat-mdc-mini-fab:hover .mat-mdc-button-persistent-ripple::before{opacity:var(--mat-fab-small-hover-state-layer-opacity)}.mat-mdc-mini-fab.cdk-program-focused .mat-mdc-button-persistent-ripple::before,.mat-mdc-mini-fab.cdk-keyboard-focused .mat-mdc-button-persistent-ripple::before,.mat-mdc-mini-fab.mat-mdc-button-disabled-interactive:focus .mat-mdc-button-persistent-ripple::before{opacity:var(--mat-fab-small-focus-state-layer-opacity)}.mat-mdc-mini-fab:active .mat-mdc-button-persistent-ripple::before{opacity:var(--mat-fab-small-pressed-state-layer-opacity)}.mat-mdc-mini-fab:hover{box-shadow:var(--mdc-fab-small-hover-container-elevation-shadow)}.mat-mdc-mini-fab:focus{box-shadow:var(--mdc-fab-small-focus-container-elevation-shadow)}.mat-mdc-mini-fab:active,.mat-mdc-mini-fab:focus:active{box-shadow:var(--mdc-fab-small-pressed-container-elevation-shadow)}.mat-mdc-mini-fab[disabled],.mat-mdc-mini-fab.mat-mdc-button-disabled{cursor:default;pointer-events:none;color:var(--mat-fab-small-disabled-state-foreground-color);background-color:var(--mat-fab-small-disabled-state-container-color)}.mat-mdc-mini-fab.mat-mdc-button-disabled-interactive{pointer-events:auto}.mat-mdc-extended-fab{box-shadow:var(--mdc-extended-fab-container-elevation-shadow)}.mat-mdc-extended-fab:hover{box-shadow:var(--mdc-extended-fab-hover-container-elevation-shadow)}.mat-mdc-extended-fab:focus{box-shadow:var(--mdc-extended-fab-focus-container-elevation-shadow)}.mat-mdc-extended-fab:active,.mat-mdc-extended-fab:focus:active{box-shadow:var(--mdc-extended-fab-pressed-container-elevation-shadow)}.mat-mdc-extended-fab[disabled],.mat-mdc-extended-fab.mat-mdc-button-disabled{cursor:default;pointer-events:none}.mat-mdc-extended-fab[disabled],.mat-mdc-extended-fab[disabled]:focus,.mat-mdc-extended-fab.mat-mdc-button-disabled,.mat-mdc-extended-fab.mat-mdc-button-disabled:focus{box-shadow:none}.mat-mdc-extended-fab.mat-mdc-button-disabled-interactive{pointer-events:auto}.mat-mdc-extended-fab>.mat-icon,.mat-mdc-extended-fab>.material-icons{margin-left:calc(12px - 20px);margin-right:12px}[dir=rtl] .mat-mdc-extended-fab>.mat-icon,[dir=rtl] .mat-mdc-extended-fab>.material-icons,.mat-mdc-extended-fab>.mat-icon[dir=rtl],.mat-mdc-extended-fab>.material-icons[dir=rtl]{margin-left:12px;margin-right:calc(12px - 20px)}.mat-mdc-extended-fab .mat-mdc-button-touch-target{width:100%}.mat-mdc-extended-fab .mdc-button__label+.mat-icon,.mat-mdc-extended-fab .mdc-button__label+.material-icons{margin-left:12px;margin-right:calc(12px - 20px)}[dir=rtl] .mat-mdc-extended-fab .mdc-button__label+.mat-icon,[dir=rtl] .mat-mdc-extended-fab .mdc-button__label+.material-icons,.mat-mdc-extended-fab .mdc-button__label+.mat-icon[dir=rtl],.mat-mdc-extended-fab .mdc-button__label+.material-icons[dir=rtl]{margin-left:calc(12px - 20px);margin-right:12px}',
                            ],
                            encapsulation: 2,
                            changeDetection: 0,
                        }));
                    }
                    return n;
                })(),
                b8 = (() => {
                    class n extends Ey {
                        constructor(t, i, r, o) {
                            super(t, i, r, o), this._rippleLoader.configureRipple(this._elementRef.nativeElement, { centered: !0 });
                        }
                        static #e = (this.ɵfac = function (i) {
                            return new (i || n)(P(Tt), P(Xt), P(ce), P(yr, 8));
                        });
                        static #t = (this.ɵcmp = Pi({
                            type: n,
                            selectors: [['button', 'mat-icon-button', '']],
                            hostVars: 14,
                            hostBindings: function (i, r) {
                                2 & i &&
                                    (xr('disabled', r._getDisabledAttribute())('aria-disabled', r._getAriaDisabled()),
                                    kl(r.color ? 'mat-' + r.color : ''),
                                    Ui('mat-mdc-button-disabled', r.disabled)('mat-mdc-button-disabled-interactive', r.disabledInteractive)(
                                        '_mat-animation-noopable',
                                        'NoopAnimations' === r._animationMode,
                                    )('mat-unthemed', !r.color)('mat-mdc-button-base', !0));
                            },
                            exportAs: ['matButton'],
                            standalone: !0,
                            features: [Dr, Gi],
                            attrs: h8,
                            ngContentSelectors: f8,
                            decls: 4,
                            vars: 0,
                            consts: [
                                [1, 'mat-mdc-button-persistent-ripple', 'mdc-icon-button__ripple'],
                                [1, 'mat-mdc-focus-indicator'],
                                [1, 'mat-mdc-button-touch-target'],
                            ],
                            template: function (i, r) {
                                1 & i && (Ul(), Ei(0, 'span', 0), zi(1), Ei(2, 'span', 1)(3, 'span', 2));
                            },
                            styles: [
                                '.mdc-icon-button{display:inline-block;position:relative;box-sizing:border-box;border:none;outline:none;background-color:rgba(0,0,0,0);fill:currentColor;color:inherit;text-decoration:none;cursor:pointer;user-select:none;z-index:0;overflow:visible}.mdc-icon-button .mdc-icon-button__touch{position:absolute;top:50%;height:48px;left:50%;width:48px;transform:translate(-50%, -50%)}@media screen and (forced-colors: active){.mdc-icon-button.mdc-ripple-upgraded--background-focused .mdc-icon-button__focus-ring,.mdc-icon-button:not(.mdc-ripple-upgraded):focus .mdc-icon-button__focus-ring{display:block}}.mdc-icon-button:disabled{cursor:default;pointer-events:none}.mdc-icon-button[hidden]{display:none}.mdc-icon-button--display-flex{align-items:center;display:inline-flex;justify-content:center}.mdc-icon-button__focus-ring{pointer-events:none;border:2px solid rgba(0,0,0,0);border-radius:6px;box-sizing:content-box;position:absolute;top:50%;left:50%;transform:translate(-50%, -50%);height:100%;width:100%;display:none}@media screen and (forced-colors: active){.mdc-icon-button__focus-ring{border-color:CanvasText}}.mdc-icon-button__focus-ring::after{content:"";border:2px solid rgba(0,0,0,0);border-radius:8px;display:block;position:absolute;top:50%;left:50%;transform:translate(-50%, -50%);height:calc(100% + 4px);width:calc(100% + 4px)}@media screen and (forced-colors: active){.mdc-icon-button__focus-ring::after{border-color:CanvasText}}.mdc-icon-button__icon{display:inline-block}.mdc-icon-button__icon.mdc-icon-button__icon--on{display:none}.mdc-icon-button--on .mdc-icon-button__icon{display:none}.mdc-icon-button--on .mdc-icon-button__icon.mdc-icon-button__icon--on{display:inline-block}.mdc-icon-button__link{height:100%;left:0;outline:none;position:absolute;top:0;width:100%}.mat-mdc-icon-button{color:var(--mdc-icon-button-icon-color)}.mat-mdc-icon-button .mdc-button__icon{font-size:var(--mdc-icon-button-icon-size)}.mat-mdc-icon-button svg,.mat-mdc-icon-button img{width:var(--mdc-icon-button-icon-size);height:var(--mdc-icon-button-icon-size)}.mat-mdc-icon-button:disabled{color:var(--mdc-icon-button-disabled-icon-color)}.mat-mdc-icon-button{border-radius:50%;flex-shrink:0;text-align:center;width:var(--mdc-icon-button-state-layer-size, 48px);height:var(--mdc-icon-button-state-layer-size, 48px);padding:calc(calc(var(--mdc-icon-button-state-layer-size, 48px) - var(--mdc-icon-button-icon-size, 24px)) / 2);font-size:var(--mdc-icon-button-icon-size);-webkit-tap-highlight-color:rgba(0,0,0,0)}.mat-mdc-icon-button svg{vertical-align:baseline}.mat-mdc-icon-button[disabled],.mat-mdc-icon-button.mat-mdc-button-disabled{cursor:default;pointer-events:none;color:var(--mdc-icon-button-disabled-icon-color)}.mat-mdc-icon-button.mat-mdc-button-disabled-interactive{pointer-events:auto}.mat-mdc-icon-button .mat-mdc-button-ripple,.mat-mdc-icon-button .mat-mdc-button-persistent-ripple,.mat-mdc-icon-button .mat-mdc-button-persistent-ripple::before{top:0;left:0;right:0;bottom:0;position:absolute;pointer-events:none;border-radius:inherit}.mat-mdc-icon-button .mat-mdc-button-ripple{overflow:hidden}.mat-mdc-icon-button .mat-mdc-button-persistent-ripple::before{content:"";opacity:0}.mat-mdc-icon-button .mdc-button__label{z-index:1}.mat-mdc-icon-button .mat-mdc-focus-indicator{top:0;left:0;right:0;bottom:0;position:absolute}.mat-mdc-icon-button:focus .mat-mdc-focus-indicator::before{content:""}.mat-mdc-icon-button .mat-ripple-element{background-color:var(--mat-icon-button-ripple-color)}.mat-mdc-icon-button .mat-mdc-button-persistent-ripple::before{background-color:var(--mat-icon-button-state-layer-color)}.mat-mdc-icon-button.mat-mdc-button-disabled .mat-mdc-button-persistent-ripple::before{background-color:var(--mat-icon-button-disabled-state-layer-color)}.mat-mdc-icon-button:hover .mat-mdc-button-persistent-ripple::before{opacity:var(--mat-icon-button-hover-state-layer-opacity)}.mat-mdc-icon-button.cdk-program-focused .mat-mdc-button-persistent-ripple::before,.mat-mdc-icon-button.cdk-keyboard-focused .mat-mdc-button-persistent-ripple::before,.mat-mdc-icon-button.mat-mdc-button-disabled-interactive:focus .mat-mdc-button-persistent-ripple::before{opacity:var(--mat-icon-button-focus-state-layer-opacity)}.mat-mdc-icon-button:active .mat-mdc-button-persistent-ripple::before{opacity:var(--mat-icon-button-pressed-state-layer-opacity)}.mat-mdc-icon-button .mat-mdc-button-touch-target{position:absolute;top:50%;height:48px;left:50%;width:48px;transform:translate(-50%, -50%);display:var(--mat-icon-button-touch-target-display)}.mat-mdc-icon-button._mat-animation-noopable{transition:none !important;animation:none !important}.mat-mdc-icon-button .mat-mdc-button-persistent-ripple{border-radius:50%}.mat-mdc-icon-button.mat-unthemed:not(.mdc-ripple-upgraded):focus::before,.mat-mdc-icon-button.mat-primary:not(.mdc-ripple-upgraded):focus::before,.mat-mdc-icon-button.mat-accent:not(.mdc-ripple-upgraded):focus::before,.mat-mdc-icon-button.mat-warn:not(.mdc-ripple-upgraded):focus::before{background:rgba(0,0,0,0);opacity:1}',
                                '.cdk-high-contrast-active .mat-mdc-button:not(.mdc-button--outlined),.cdk-high-contrast-active .mat-mdc-unelevated-button:not(.mdc-button--outlined),.cdk-high-contrast-active .mat-mdc-raised-button:not(.mdc-button--outlined),.cdk-high-contrast-active .mat-mdc-outlined-button:not(.mdc-button--outlined),.cdk-high-contrast-active .mat-mdc-icon-button{outline:solid 1px}',
                            ],
                            encapsulation: 2,
                            changeDetection: 0,
                        }));
                    }
                    return n;
                })(),
                MM = (() => {
                    class n {
                        constructor() {
                            (this._sheetState = Jw(!1)), (this.sheetState = this._sheetState.asReadonly());
                        }
                        set(t) {
                            this._sheetState.set(t);
                        }
                        static #e = (this.ɵfac = function (i) {
                            return new (i || n)();
                        });
                        static #t = (this.ɵprov = j({ token: n, factory: n.ɵfac, providedIn: 'root' }));
                    }
                    return n;
                })();
            const Ci = class v8 {
                    constructor(e) {
                        (this.type = e), (this.target = null);
                    }
                    preventDefault() {
                        this.defaultPrevented = !0;
                    }
                    stopPropagation() {
                        this.propagationStopped = !0;
                    }
                },
                wy = class E8 {
                    constructor() {
                        this.disposed = !1;
                    }
                    dispose() {
                        this.disposed || ((this.disposed = !0), this.disposeInternal());
                    }
                    disposeInternal() {}
                };
            function Mo(n, e) {
                return n > e ? 1 : n < e ? -1 : 0;
            }
            function Cy(n, e, t) {
                if (n[0] <= e) return 0;
                const i = n.length;
                if (e <= n[i - 1]) return i - 1;
                if ('function' == typeof t) {
                    for (let r = 1; r < i; ++r) {
                        const o = n[r];
                        if (o === e) return r;
                        if (o < e) return t(e, n[r - 1], o) > 0 ? r - 1 : r;
                    }
                    return i - 1;
                }
                if (t > 0) {
                    for (let r = 1; r < i; ++r) if (n[r] < e) return r - 1;
                    return i - 1;
                }
                if (t < 0) {
                    for (let r = 1; r < i; ++r) if (n[r] <= e) return r;
                    return i - 1;
                }
                for (let r = 1; r < i; ++r) {
                    if (n[r] == e) return r;
                    if (n[r] < e) return n[r - 1] - e < e - n[r] ? r - 1 : r;
                }
                return i - 1;
            }
            function C8(n, e, t) {
                for (; e < t; ) {
                    const i = n[e];
                    (n[e] = n[t]), (n[t] = i), ++e, --t;
                }
            }
            function Zi(n, e) {
                const t = Array.isArray(e) ? e : [e],
                    i = t.length;
                for (let r = 0; r < i; r++) n[n.length] = t[r];
            }
            function Pr(n, e) {
                const t = n.length;
                if (t !== e.length) return !1;
                for (let i = 0; i < t; i++) if (n[i] !== e[i]) return !1;
                return !0;
            }
            function ha() {
                return !0;
            }
            function bh() {
                return !1;
            }
            function fa() {}
            function hc(n) {
                for (const e in n) delete n[e];
            }
            function ma(n) {
                let e;
                for (e in n) return !1;
                return !e;
            }
            const fc = class x8 extends wy {
                constructor(e) {
                    super(), (this.eventTarget_ = e), (this.pendingRemovals_ = null), (this.dispatching_ = null), (this.listeners_ = null);
                }
                addEventListener(e, t) {
                    if (!e || !t) return;
                    const i = this.listeners_ || (this.listeners_ = {}),
                        r = i[e] || (i[e] = []);
                    r.includes(t) || r.push(t);
                }
                dispatchEvent(e) {
                    const t = 'string' == typeof e,
                        i = t ? e : e.type,
                        r = this.listeners_ && this.listeners_[i];
                    if (!r) return;
                    const o = t ? new Ci(e) : e;
                    o.target || (o.target = this.eventTarget_ || this);
                    const s = this.dispatching_ || (this.dispatching_ = {}),
                        a = this.pendingRemovals_ || (this.pendingRemovals_ = {});
                    let l;
                    i in s || ((s[i] = 0), (a[i] = 0)), ++s[i];
                    for (let c = 0, u = r.length; c < u; ++c)
                        if (((l = 'handleEvent' in r[c] ? r[c].handleEvent(o) : r[c].call(this, o)), !1 === l || o.propagationStopped)) {
                            l = !1;
                            break;
                        }
                    if (0 == --s[i]) {
                        let c = a[i];
                        for (delete a[i]; c--; ) this.removeEventListener(i, fa);
                        delete s[i];
                    }
                    return l;
                }
                disposeInternal() {
                    this.listeners_ && hc(this.listeners_);
                }
                getListeners(e) {
                    return (this.listeners_ && this.listeners_[e]) || void 0;
                }
                hasListener(e) {
                    return !!this.listeners_ && (e ? e in this.listeners_ : Object.keys(this.listeners_).length > 0);
                }
                removeEventListener(e, t) {
                    const i = this.listeners_ && this.listeners_[e];
                    if (i) {
                        const r = i.indexOf(t);
                        -1 !== r &&
                            (this.pendingRemovals_ && e in this.pendingRemovals_
                                ? ((i[r] = fa), ++this.pendingRemovals_[e])
                                : (i.splice(r, 1), 0 === i.length && delete this.listeners_[e]));
                    }
                }
            };
            function me(n, e, t, i, r) {
                if ((i && i !== n && (t = t.bind(i)), r)) {
                    const s = t;
                    t = function () {
                        n.removeEventListener(e, t), s.apply(this, arguments);
                    };
                }
                const o = { target: n, type: e, listener: t };
                return n.addEventListener(e, t), o;
            }
            function vh(n, e, t, i) {
                return me(n, e, t, i, !0);
            }
            function je(n) {
                n && n.target && (n.target.removeEventListener(n.type, n.listener), hc(n));
            }
            const RM = class Eh extends fc {
                constructor() {
                    super(),
                        (this.on = this.onInternal),
                        (this.once = this.onceInternal),
                        (this.un = this.unInternal),
                        (this.revision_ = 0);
                }
                changed() {
                    ++this.revision_, this.dispatchEvent('change');
                }
                getRevision() {
                    return this.revision_;
                }
                onInternal(e, t) {
                    if (Array.isArray(e)) {
                        const i = e.length,
                            r = new Array(i);
                        for (let o = 0; o < i; ++o) r[o] = me(this, e[o], t);
                        return r;
                    }
                    return me(this, e, t);
                }
                onceInternal(e, t) {
                    let i;
                    if (Array.isArray(e)) {
                        const r = e.length;
                        i = new Array(r);
                        for (let o = 0; o < r; ++o) i[o] = vh(this, e[o], t);
                    } else i = vh(this, e, t);
                    return (t.ol_key = i), i;
                }
                unInternal(e, t) {
                    const i = t.ol_key;
                    if (i)
                        !(function S8(n) {
                            if (Array.isArray(n)) for (let e = 0, t = n.length; e < t; ++e) je(n[e]);
                            else je(n);
                        })(i);
                    else if (Array.isArray(e)) for (let r = 0, o = e.length; r < o; ++r) this.removeEventListener(e[r], t);
                    else this.removeEventListener(e, t);
                }
            };
            function J() {
                throw new Error('Unimplemented abstract method.');
            }
            let T8 = 0;
            function Se(n) {
                return n.ol_uid || (n.ol_uid = String(++T8));
            }
            class AM extends Ci {
                constructor(e, t, i) {
                    super(e), (this.key = t), (this.oldValue = i);
                }
            }
            const Di = class M8 extends RM {
                    constructor(e) {
                        super(), Se(this), (this.values_ = null), void 0 !== e && this.setProperties(e);
                    }
                    get(e) {
                        let t;
                        return this.values_ && this.values_.hasOwnProperty(e) && (t = this.values_[e]), t;
                    }
                    getKeys() {
                        return (this.values_ && Object.keys(this.values_)) || [];
                    }
                    getProperties() {
                        return (this.values_ && Object.assign({}, this.values_)) || {};
                    }
                    hasProperties() {
                        return !!this.values_;
                    }
                    notify(e, t) {
                        let i;
                        (i = `change:${e}`),
                            this.hasListener(i) && this.dispatchEvent(new AM(i, e, t)),
                            (i = 'propertychange'),
                            this.hasListener(i) && this.dispatchEvent(new AM(i, e, t));
                    }
                    addChangeListener(e, t) {
                        this.addEventListener(`change:${e}`, t);
                    }
                    removeChangeListener(e, t) {
                        this.removeEventListener(`change:${e}`, t);
                    }
                    set(e, t, i) {
                        const r = this.values_ || (this.values_ = {});
                        if (i) r[e] = t;
                        else {
                            const o = r[e];
                            (r[e] = t), o !== t && this.notify(e, o);
                        }
                    }
                    setProperties(e, t) {
                        for (const i in e) this.set(i, e[i], t);
                    }
                    applyProperties(e) {
                        e.values_ && Object.assign(this.values_ || (this.values_ = {}), e.values_);
                    }
                    unset(e, t) {
                        if (this.values_ && e in this.values_) {
                            const i = this.values_[e];
                            delete this.values_[e], ma(this.values_) && (this.values_ = null), t || this.notify(e, i);
                        }
                    }
                },
                R8 = {
                    1: 'The view center is not defined',
                    2: 'The view resolution is not defined',
                    3: 'The view rotation is not defined',
                    4: '`image` and `src` cannot be provided at the same time',
                    5: '`imgSize` must be set when `image` is provided',
                    7: '`format` must be set when `url` is set',
                    8: 'Unknown `serverType` configured',
                    9: '`url` must be configured or set using `#setUrl()`',
                    10: 'The default `geometryFunction` can only handle `Point` geometries',
                    11: '`options.featureTypes` must be an Array',
                    12: '`options.geometryName` must also be provided when `options.bbox` is set',
                    13: 'Invalid corner',
                    14: 'Invalid color',
                    15: 'Tried to get a value for a key that does not exist in the cache',
                    16: 'Tried to set a value for a key that is used already',
                    17: '`resolutions` must be sorted in descending order',
                    18: 'Either `origin` or `origins` must be configured, never both',
                    19: 'Number of `tileSizes` and `resolutions` must be equal',
                    20: 'Number of `origins` and `resolutions` must be equal',
                    22: 'Either `tileSize` or `tileSizes` must be configured, never both',
                    24: 'Invalid extent or geometry provided as `geometry`',
                    25: 'Cannot fit empty extent provided as `geometry`',
                    26: 'Features must have an id set',
                    27: 'Features must have an id set',
                    28: '`renderMode` must be `"hybrid"` or `"vector"`',
                    30: 'The passed `feature` was already added to the source',
                    31: 'Tried to enqueue an `element` that was already added to the queue',
                    32: 'Transformation matrix cannot be inverted',
                    33: 'Invalid units',
                    34: 'Invalid geometry layout',
                    36: 'Unknown SRS type',
                    37: 'Unknown geometry type found',
                    38: '`styleMapValue` has an unknown type',
                    39: 'Unknown geometry type',
                    40: 'Expected `feature` to have a geometry',
                    41: 'Expected an `ol/style/Style` or an array of `ol/style/Style.js`',
                    42: 'Question unknown, the answer is 42',
                    43: 'Expected `layers` to be an array or a `Collection`',
                    47: 'Expected `controls` to be an array or an `ol/Collection`',
                    48: 'Expected `interactions` to be an array or an `ol/Collection`',
                    49: 'Expected `overlays` to be an array or an `ol/Collection`',
                    50: '`options.featureTypes` should be an Array',
                    51: 'Either `url` or `tileJSON` options must be provided',
                    52: 'Unknown `serverType` configured',
                    53: 'Unknown `tierSizeCalculation` configured',
                    55: 'The {-y} placeholder requires a tile grid with extent',
                    56: 'mapBrowserEvent must originate from a pointer event',
                    57: 'At least 2 conditions are required',
                    59: 'Invalid command found in the PBF',
                    60: 'Missing or invalid `size`',
                    61: 'Cannot determine IIIF Image API version from provided image information JSON',
                    62: 'A `WebGLArrayBuffer` must either be of type `ELEMENT_ARRAY_BUFFER` or `ARRAY_BUFFER`',
                    64: 'Layer opacity must be a number',
                    66: '`forEachFeatureAtCoordinate` cannot be used on a WebGL layer if the hit detection logic has not been enabled. This is done by providing adequate shaders using the `hitVertexShader` and `hitFragmentShader` properties of `WebGLPointsLayerRenderer`',
                    67: 'A layer can only be added to the map once. Use either `layer.setMap()` or `map.addLayer()`, not both',
                    68: 'A VectorTile source can only be rendered if it has a projection compatible with the view projection',
                    69: '`width` or `height` cannot be provided together with `scale`',
                };
            class A8 extends Error {
                constructor(e) {
                    const t = R8[e];
                    super(t), (this.code = e), (this.name = 'AssertionError'), (this.message = t);
                }
            }
            const OM = A8;
            class wh extends Ci {
                constructor(e, t, i) {
                    super(e), (this.element = t), (this.index = i);
                }
            }
            const Ii = class O8 extends Di {
                    constructor(e, t) {
                        if ((super(), (this.unique_ = !!(t = t || {}).unique), (this.array_ = e || []), this.unique_))
                            for (let i = 0, r = this.array_.length; i < r; ++i) this.assertUnique_(this.array_[i], i);
                        this.updateLength_();
                    }
                    clear() {
                        for (; this.getLength() > 0; ) this.pop();
                    }
                    extend(e) {
                        for (let t = 0, i = e.length; t < i; ++t) this.push(e[t]);
                        return this;
                    }
                    forEach(e) {
                        const t = this.array_;
                        for (let i = 0, r = t.length; i < r; ++i) e(t[i], i, t);
                    }
                    getArray() {
                        return this.array_;
                    }
                    item(e) {
                        return this.array_[e];
                    }
                    getLength() {
                        return this.get('length');
                    }
                    insertAt(e, t) {
                        if (e < 0 || e > this.getLength()) throw new Error('Index out of bounds: ' + e);
                        this.unique_ && this.assertUnique_(t),
                            this.array_.splice(e, 0, t),
                            this.updateLength_(),
                            this.dispatchEvent(new wh('add', t, e));
                    }
                    pop() {
                        return this.removeAt(this.getLength() - 1);
                    }
                    push(e) {
                        this.unique_ && this.assertUnique_(e);
                        const t = this.getLength();
                        return this.insertAt(t, e), this.getLength();
                    }
                    remove(e) {
                        const t = this.array_;
                        for (let i = 0, r = t.length; i < r; ++i) if (t[i] === e) return this.removeAt(i);
                    }
                    removeAt(e) {
                        if (e < 0 || e >= this.getLength()) return;
                        const t = this.array_[e];
                        return this.array_.splice(e, 1), this.updateLength_(), this.dispatchEvent(new wh('remove', t, e)), t;
                    }
                    setAt(e, t) {
                        if (e >= this.getLength()) return void this.insertAt(e, t);
                        if (e < 0) throw new Error('Index out of bounds: ' + e);
                        this.unique_ && this.assertUnique_(t, e);
                        const r = this.array_[e];
                        (this.array_[e] = t), this.dispatchEvent(new wh('remove', r, e)), this.dispatchEvent(new wh('add', t, e));
                    }
                    updateLength_() {
                        this.set('length', this.array_.length);
                    }
                    assertUnique_(e, t) {
                        for (let i = 0, r = this.array_.length; i < r; ++i) if (this.array_[i] === e && i !== t) throw new OM(58);
                    }
                },
                kr = typeof navigator < 'u' && typeof navigator.userAgent < 'u' ? navigator.userAgent.toLowerCase() : '',
                N8 = kr.includes('firefox'),
                P8 =
                    (kr.includes('safari') &&
                        !kr.includes('chrom') &&
                        (kr.includes('version/15.4') || /cpu (os|iphone os) 15_4 like mac os x/.test(kr)),
                    kr.includes('webkit') && !kr.includes('edge')),
                PM = kr.includes('macintosh'),
                kM = typeof devicePixelRatio < 'u' ? devicePixelRatio : 1,
                Dy = typeof WorkerGlobalScope < 'u' && typeof OffscreenCanvas < 'u' && self instanceof WorkerGlobalScope,
                k8 = typeof Image < 'u' && Image.prototype.decode,
                FM = (function () {
                    let n = !1;
                    try {
                        const e = Object.defineProperty({}, 'passive', {
                            get: function () {
                                n = !0;
                            },
                        });
                        window.addEventListener('_', null, e), window.removeEventListener('_', null, e);
                    } catch {}
                    return n;
                })();
            function pe(n, e) {
                if (!n) throw new OM(e);
            }
            function Ct(n, e) {
                const t = e[0],
                    i = e[1];
                return (e[0] = n[0] * t + n[2] * i + n[4]), (e[1] = n[1] * t + n[3] * i + n[5]), e;
            }
            function Qi(n, e, t, i, r, o, s, a) {
                const l = Math.sin(o),
                    c = Math.cos(o);
                return (
                    (n[0] = i * c),
                    (n[1] = r * l),
                    (n[2] = -i * l),
                    (n[3] = r * c),
                    (n[4] = s * i * c - a * i * l + e),
                    (n[5] = s * r * l + a * r * c + t),
                    n
                );
            }
            function Ch(n, e) {
                const t = (function B8(n) {
                    return n[0] * n[3] - n[1] * n[2];
                })(e);
                pe(0 !== t, 32);
                const i = e[0],
                    r = e[1],
                    o = e[2],
                    s = e[3],
                    a = e[4],
                    l = e[5];
                return (
                    (n[0] = s / t),
                    (n[1] = -r / t),
                    (n[2] = -o / t),
                    (n[3] = i / t),
                    (n[4] = (o * l - s * a) / t),
                    (n[5] = -(i * l - r * a) / t),
                    n
                );
            }
            let LM;
            function Sy(n) {
                const e = 'matrix(' + n.join(', ') + ')';
                if (Dy) return e;
                const t = LM || (LM = document.createElement('div'));
                return (t.style.transform = e), t.style.transform;
            }
            new Array(6);
            const Dt = { UNKNOWN: 0, INTERSECTING: 1, ABOVE: 2, RIGHT: 4, BELOW: 8, LEFT: 16 };
            function BM(n) {
                const e = [1 / 0, 1 / 0, -1 / 0, -1 / 0];
                for (let t = 0, i = n.length; t < i; ++t) ga(e, n[t]);
                return e;
            }
            function Ty(n, e, t) {
                return t
                    ? ((t[0] = n[0] - e), (t[1] = n[1] - e), (t[2] = n[2] + e), (t[3] = n[3] + e), t)
                    : [n[0] - e, n[1] - e, n[2] + e, n[3] + e];
            }
            function jM(n, e) {
                return e ? ((e[0] = n[0]), (e[1] = n[1]), (e[2] = n[2]), (e[3] = n[3]), e) : n.slice();
            }
            function Ro(n, e, t) {
                let i, r;
                return (
                    (i = e < n[0] ? n[0] - e : n[2] < e ? e - n[2] : 0), (r = t < n[1] ? n[1] - t : n[3] < t ? t - n[3] : 0), i * i + r * r
                );
            }
            function Dh(n, e) {
                return My(n, e[0], e[1]);
            }
            function pa(n, e) {
                return n[0] <= e[0] && e[2] <= n[2] && n[1] <= e[1] && e[3] <= n[3];
            }
            function My(n, e, t) {
                return n[0] <= e && e <= n[2] && n[1] <= t && t <= n[3];
            }
            function Ry(n, e) {
                const s = e[0],
                    a = e[1];
                let l = Dt.UNKNOWN;
                return (
                    s < n[0] ? (l |= Dt.LEFT) : s > n[2] && (l |= Dt.RIGHT),
                    a < n[1] ? (l |= Dt.BELOW) : a > n[3] && (l |= Dt.ABOVE),
                    l === Dt.UNKNOWN && (l = Dt.INTERSECTING),
                    l
                );
            }
            function Ji(n, e, t, i, r) {
                return r ? ((r[0] = n), (r[1] = e), (r[2] = t), (r[3] = i), r) : [n, e, t, i];
            }
            function Fr(n) {
                return Ji(1 / 0, 1 / 0, -1 / 0, -1 / 0, n);
            }
            function VM(n, e, t, i, r) {
                return zM(Fr(r), n, e, t, i);
            }
            function pc(n, e) {
                return n[0] == e[0] && n[2] == e[2] && n[1] == e[1] && n[3] == e[3];
            }
            function HM(n, e) {
                return (
                    e[0] < n[0] && (n[0] = e[0]),
                    e[2] > n[2] && (n[2] = e[2]),
                    e[1] < n[1] && (n[1] = e[1]),
                    e[3] > n[3] && (n[3] = e[3]),
                    n
                );
            }
            function ga(n, e) {
                e[0] < n[0] && (n[0] = e[0]), e[0] > n[2] && (n[2] = e[0]), e[1] < n[1] && (n[1] = e[1]), e[1] > n[3] && (n[3] = e[1]);
            }
            function zM(n, e, t, i, r) {
                for (; t < i; t += r) U8(n, e[t], e[t + 1]);
                return n;
            }
            function U8(n, e, t) {
                (n[0] = Math.min(n[0], e)), (n[1] = Math.min(n[1], t)), (n[2] = Math.max(n[2], e)), (n[3] = Math.max(n[3], t));
            }
            function GM(n, e) {
                let t;
                return (t = e(xh(n))), !!(t || ((t = e(Sh(n))), t) || ((t = e(Th(n))), t) || ((t = e(Oo(n))), t)) && t;
            }
            function Ih(n) {
                let e = 0;
                return gc(n) || (e = qe(n) * wn(n)), e;
            }
            function xh(n) {
                return [n[0], n[1]];
            }
            function Sh(n) {
                return [n[2], n[1]];
            }
            function Ao(n) {
                return [(n[0] + n[2]) / 2, (n[1] + n[3]) / 2];
            }
            function z8(n, e) {
                let t;
                return (
                    'bottom-left' === e
                        ? (t = xh(n))
                        : 'bottom-right' === e
                          ? (t = Sh(n))
                          : 'top-left' === e
                            ? (t = Oo(n))
                            : 'top-right' === e
                              ? (t = Th(n))
                              : pe(!1, 13),
                    t
                );
            }
            function Ay(n, e, t, i, r) {
                const [o, s, a, l, c, u, d, h] = Oy(n, e, t, i);
                return Ji(Math.min(o, a, c, d), Math.min(s, l, u, h), Math.max(o, a, c, d), Math.max(s, l, u, h), r);
            }
            function Oy(n, e, t, i) {
                const r = (e * i[0]) / 2,
                    o = (e * i[1]) / 2,
                    s = Math.cos(t),
                    a = Math.sin(t),
                    l = r * s,
                    c = r * a,
                    u = o * s,
                    d = o * a,
                    h = n[0],
                    f = n[1];
                return [h - l + d, f - c - u, h - l - d, f - c + u, h + l - d, f + c + u, h + l + d, f + c - u, h - l + d, f - c - u];
            }
            function wn(n) {
                return n[3] - n[1];
            }
            function _a(n, e, t) {
                const i = t || [1 / 0, 1 / 0, -1 / 0, -1 / 0];
                return (
                    dn(n, e)
                        ? ((i[0] = n[0] > e[0] ? n[0] : e[0]),
                          (i[1] = n[1] > e[1] ? n[1] : e[1]),
                          (i[2] = n[2] < e[2] ? n[2] : e[2]),
                          (i[3] = n[3] < e[3] ? n[3] : e[3]))
                        : Fr(i),
                    i
                );
            }
            function Oo(n) {
                return [n[0], n[3]];
            }
            function Th(n) {
                return [n[2], n[3]];
            }
            function qe(n) {
                return n[2] - n[0];
            }
            function dn(n, e) {
                return n[0] <= e[2] && n[2] >= e[0] && n[1] <= e[3] && n[3] >= e[1];
            }
            function gc(n) {
                return n[2] < n[0] || n[3] < n[1];
            }
            function WM(n, e) {
                const t = e.getExtent(),
                    i = Ao(n);
                if (e.canWrapX() && (i[0] < t[0] || i[0] >= t[2])) {
                    const r = qe(t),
                        s = Math.floor((i[0] - t[0]) / r) * r;
                    (n[0] -= s), (n[2] -= s);
                }
                return n;
            }
            function gt(n, e, t) {
                return Math.min(Math.max(n, e), t);
            }
            function q8(n, e, t, i, r, o) {
                const s = r - t,
                    a = o - i;
                if (0 !== s || 0 !== a) {
                    const l = ((n - t) * s + (e - i) * a) / (s * s + a * a);
                    l > 1 ? ((t = r), (i = o)) : l > 0 && ((t += s * l), (i += a * l));
                }
                return No(n, e, t, i);
            }
            function No(n, e, t, i) {
                const r = t - n,
                    o = i - e;
                return r * r + o * o;
            }
            function Mh(n) {
                return (n * Math.PI) / 180;
            }
            function ya(n, e) {
                const t = n % e;
                return t * e < 0 ? t + e : t;
            }
            function Cn(n, e, t) {
                return n + t * (e - n);
            }
            function Rh(n, e) {
                const t = Math.pow(10, e);
                return Math.round(n * t) / t;
            }
            function Ah(n, e) {
                return Math.floor(Rh(n, e));
            }
            function Oh(n, e) {
                return Math.ceil(Rh(n, e));
            }
            const $M = /^#([a-f0-9]{3}|[a-f0-9]{4}(?:[a-f0-9]{2}){0,2})$/i,
                YM = /^([a-z]*)$|^hsla?\(.*\)$/i;
            function qM(n) {
                return 'string' == typeof n ? n : ZM(n);
            }
            const K8 = (function () {
                const e = {};
                let t = 0;
                return function (i) {
                    let r;
                    if (e.hasOwnProperty(i)) r = e[i];
                    else {
                        if (t >= 1024) {
                            let o = 0;
                            for (const s in e) 3 & o++ || (delete e[s], --t);
                        }
                        (r = (function Z8(n) {
                            let e, t, i, r, o;
                            if (
                                (YM.exec(n) &&
                                    (n = (function XM(n) {
                                        const e = document.createElement('div');
                                        if (((e.style.color = n), '' !== e.style.color)) {
                                            document.body.appendChild(e);
                                            const t = getComputedStyle(e).color;
                                            return document.body.removeChild(e), t;
                                        }
                                        return '';
                                    })(n)),
                                $M.exec(n))
                            ) {
                                const s = n.length - 1;
                                let a;
                                a = s <= 4 ? 1 : 2;
                                const l = 4 === s || 8 === s;
                                (e = parseInt(n.substr(1 + 0 * a, a), 16)),
                                    (t = parseInt(n.substr(1 + 1 * a, a), 16)),
                                    (i = parseInt(n.substr(1 + 2 * a, a), 16)),
                                    (r = l ? parseInt(n.substr(1 + 3 * a, a), 16) : 255),
                                    1 == a && ((e = (e << 4) + e), (t = (t << 4) + t), (i = (i << 4) + i), l && (r = (r << 4) + r)),
                                    (o = [e, t, i, r / 255]);
                            } else
                                n.startsWith('rgba(')
                                    ? ((o = n.slice(5, -1).split(',').map(Number)), KM(o))
                                    : n.startsWith('rgb(')
                                      ? ((o = n.slice(4, -1).split(',').map(Number)), o.push(1), KM(o))
                                      : pe(!1, 14);
                            return o;
                        })(i)),
                            (e[i] = r),
                            ++t;
                    }
                    return r;
                };
            })();
            function Nh(n) {
                return Array.isArray(n) ? n : K8(n);
            }
            function KM(n) {
                return (
                    (n[0] = gt((n[0] + 0.5) | 0, 0, 255)),
                    (n[1] = gt((n[1] + 0.5) | 0, 0, 255)),
                    (n[2] = gt((n[2] + 0.5) | 0, 0, 255)),
                    (n[3] = gt(n[3], 0, 1)),
                    n
                );
            }
            function ZM(n) {
                let e = n[0];
                e != (0 | e) && (e = (e + 0.5) | 0);
                let t = n[1];
                t != (0 | t) && (t = (t + 0.5) | 0);
                let i = n[2];
                return (
                    i != (0 | i) && (i = (i + 0.5) | 0),
                    'rgba(' + e + ',' + t + ',' + i + ',' + (void 0 === n[3] ? 1 : Math.round(100 * n[3]) / 100) + ')'
                );
            }
            function QM(n, e, t) {
                return e + ':' + n + ':' + (t ? qM(t) : 'null');
            }
            const Ph = new (class Q8 {
                    constructor() {
                        (this.cache_ = {}), (this.cacheSize_ = 0), (this.maxCacheSize_ = 32);
                    }
                    clear() {
                        (this.cache_ = {}), (this.cacheSize_ = 0);
                    }
                    canExpireCache() {
                        return this.cacheSize_ > this.maxCacheSize_;
                    }
                    expire() {
                        if (this.canExpireCache()) {
                            let e = 0;
                            for (const t in this.cache_)
                                !(3 & e++) && !this.cache_[t].hasListener() && (delete this.cache_[t], --this.cacheSize_);
                        }
                    }
                    get(e, t, i) {
                        const r = QM(e, t, i);
                        return r in this.cache_ ? this.cache_[r] : null;
                    }
                    set(e, t, i, r) {
                        const o = QM(e, t, i);
                        (this.cache_[o] = r), ++this.cacheSize_;
                    }
                    setSize(e) {
                        (this.maxCacheSize_ = e), this.expire();
                    }
                })(),
                JM = class J8 extends Di {
                    constructor(e) {
                        super(), (this.background_ = e.background);
                        const t = Object.assign({}, e);
                        'object' == typeof e.properties && (delete t.properties, Object.assign(t, e.properties)),
                            (t.opacity = void 0 !== e.opacity ? e.opacity : 1),
                            pe('number' == typeof t.opacity, 64),
                            (t.visible = void 0 === e.visible || e.visible),
                            (t.zIndex = e.zIndex),
                            (t.maxResolution = void 0 !== e.maxResolution ? e.maxResolution : 1 / 0),
                            (t.minResolution = void 0 !== e.minResolution ? e.minResolution : 0),
                            (t.minZoom = void 0 !== e.minZoom ? e.minZoom : -1 / 0),
                            (t.maxZoom = void 0 !== e.maxZoom ? e.maxZoom : 1 / 0),
                            (this.className_ = void 0 !== t.className ? t.className : 'ol-layer'),
                            delete t.className,
                            this.setProperties(t),
                            (this.state_ = null);
                    }
                    getBackground() {
                        return this.background_;
                    }
                    getClassName() {
                        return this.className_;
                    }
                    getLayerState(e) {
                        const t = this.state_ || { layer: this, managed: void 0 === e || e },
                            i = this.getZIndex();
                        return (
                            (t.opacity = gt(Math.round(100 * this.getOpacity()) / 100, 0, 1)),
                            (t.visible = this.getVisible()),
                            (t.extent = this.getExtent()),
                            (t.zIndex = void 0 !== i || t.managed ? i : 1 / 0),
                            (t.maxResolution = this.getMaxResolution()),
                            (t.minResolution = Math.max(this.getMinResolution(), 0)),
                            (t.minZoom = this.getMinZoom()),
                            (t.maxZoom = this.getMaxZoom()),
                            (this.state_ = t),
                            t
                        );
                    }
                    getLayersArray(e) {
                        return J();
                    }
                    getLayerStatesArray(e) {
                        return J();
                    }
                    getExtent() {
                        return this.get('extent');
                    }
                    getMaxResolution() {
                        return this.get('maxResolution');
                    }
                    getMinResolution() {
                        return this.get('minResolution');
                    }
                    getMinZoom() {
                        return this.get('minZoom');
                    }
                    getMaxZoom() {
                        return this.get('maxZoom');
                    }
                    getOpacity() {
                        return this.get('opacity');
                    }
                    getSourceState() {
                        return J();
                    }
                    getVisible() {
                        return this.get('visible');
                    }
                    getZIndex() {
                        return this.get('zIndex');
                    }
                    setBackground(e) {
                        (this.background_ = e), this.changed();
                    }
                    setExtent(e) {
                        this.set('extent', e);
                    }
                    setMaxResolution(e) {
                        this.set('maxResolution', e);
                    }
                    setMinResolution(e) {
                        this.set('minResolution', e);
                    }
                    setMaxZoom(e) {
                        this.set('maxZoom', e);
                    }
                    setMinZoom(e) {
                        this.set('minZoom', e);
                    }
                    setOpacity(e) {
                        pe('number' == typeof e, 64), this.set('opacity', e);
                    }
                    setVisible(e) {
                        this.set('visible', e);
                    }
                    setZIndex(e) {
                        this.set('zIndex', e);
                    }
                    disposeInternal() {
                        this.state_ && ((this.state_.layer = null), (this.state_ = null)), super.disposeInternal();
                    }
                },
                ei = { CENTER: 'center', RESOLUTION: 'resolution', ROTATION: 'rotation' },
                e5 = 42,
                Ny = 256,
                Po = {
                    'radians': 6370997 / (2 * Math.PI),
                    'degrees': (2 * Math.PI * 6370997) / 360,
                    'ft': 0.3048,
                    'm': 1,
                    'us-ft': 1200 / 3937,
                },
                eR = class n5 {
                    constructor(e) {
                        (this.code_ = e.code),
                            (this.units_ = e.units),
                            (this.extent_ = void 0 !== e.extent ? e.extent : null),
                            (this.worldExtent_ = void 0 !== e.worldExtent ? e.worldExtent : null),
                            (this.axisOrientation_ = void 0 !== e.axisOrientation ? e.axisOrientation : 'enu'),
                            (this.global_ = void 0 !== e.global && e.global),
                            (this.canWrapX_ = !(!this.global_ || !this.extent_)),
                            (this.getPointResolutionFunc_ = e.getPointResolution),
                            (this.defaultTileGrid_ = null),
                            (this.metersPerUnit_ = e.metersPerUnit);
                    }
                    canWrapX() {
                        return this.canWrapX_;
                    }
                    getCode() {
                        return this.code_;
                    }
                    getExtent() {
                        return this.extent_;
                    }
                    getUnits() {
                        return this.units_;
                    }
                    getMetersPerUnit() {
                        return this.metersPerUnit_ || Po[this.units_];
                    }
                    getWorldExtent() {
                        return this.worldExtent_;
                    }
                    getAxisOrientation() {
                        return this.axisOrientation_;
                    }
                    isGlobal() {
                        return this.global_;
                    }
                    setGlobal(e) {
                        (this.global_ = e), (this.canWrapX_ = !(!e || !this.extent_));
                    }
                    getDefaultTileGrid() {
                        return this.defaultTileGrid_;
                    }
                    setDefaultTileGrid(e) {
                        this.defaultTileGrid_ = e;
                    }
                    setExtent(e) {
                        (this.extent_ = e), (this.canWrapX_ = !(!this.global_ || !e));
                    }
                    setWorldExtent(e) {
                        this.worldExtent_ = e;
                    }
                    setGetPointResolution(e) {
                        this.getPointResolutionFunc_ = e;
                    }
                    getPointResolutionFunc() {
                        return this.getPointResolutionFunc_;
                    }
                },
                _c = 6378137,
                ba = Math.PI * _c,
                r5 = [-ba, -ba, ba, ba],
                o5 = [-180, -85, 180, 85],
                kh = _c * Math.log(Math.tan(Math.PI / 2));
            class va extends eR {
                constructor(e) {
                    super({
                        code: e,
                        units: 'm',
                        extent: r5,
                        global: !0,
                        worldExtent: o5,
                        getPointResolution: function (t, i) {
                            return t / Math.cosh(i[1] / _c);
                        },
                    });
                }
            }
            const tR = [
                new va('EPSG:3857'),
                new va('EPSG:102100'),
                new va('EPSG:102113'),
                new va('EPSG:900913'),
                new va('http://www.opengis.net/def/crs/EPSG/0/3857'),
                new va('http://www.opengis.net/gml/srs/epsg.xml#3857'),
            ];
            function s5(n, e, t) {
                const i = n.length;
                (t = t > 1 ? t : 2), void 0 === e && (e = t > 2 ? n.slice() : new Array(i));
                for (let r = 0; r < i; r += t) {
                    e[r] = (ba * n[r]) / 180;
                    let o = _c * Math.log(Math.tan((Math.PI * (+n[r + 1] + 90)) / 360));
                    o > kh ? (o = kh) : o < -kh && (o = -kh), (e[r + 1] = o);
                }
                return e;
            }
            function a5(n, e, t) {
                const i = n.length;
                (t = t > 1 ? t : 2), void 0 === e && (e = t > 2 ? n.slice() : new Array(i));
                for (let r = 0; r < i; r += t)
                    (e[r] = (180 * n[r]) / ba), (e[r + 1] = (360 * Math.atan(Math.exp(n[r + 1] / _c))) / Math.PI - 90);
                return e;
            }
            const nR = [-180, -90, 180, 90],
                c5 = (6378137 * Math.PI) / 180;
            class ko extends eR {
                constructor(e, t) {
                    super({ code: e, units: 'degrees', extent: nR, axisOrientation: t, global: !0, metersPerUnit: c5, worldExtent: nR });
                }
            }
            const iR = [
                new ko('CRS:84'),
                new ko('EPSG:4326', 'neu'),
                new ko('urn:ogc:def:crs:OGC:1.3:CRS84'),
                new ko('urn:ogc:def:crs:OGC:2:84'),
                new ko('http://www.opengis.net/def/crs/OGC/1.3/CRS84'),
                new ko('http://www.opengis.net/gml/srs/epsg.xml#4326', 'neu'),
                new ko('http://www.opengis.net/def/crs/EPSG/0/4326', 'neu'),
            ];
            let Fh = {},
                ti = {};
            function Lh(n, e, t) {
                const i = n.getCode(),
                    r = e.getCode();
                i in ti || (ti[i] = {}), (ti[i][r] = t);
            }
            function Bh(n, e) {
                let t = !0;
                for (let i = n.length - 1; i >= 0; --i)
                    if (n[i] != e[i]) {
                        t = !1;
                        break;
                    }
                return t;
            }
            function Py(n, e) {
                const t = Math.cos(e),
                    i = Math.sin(e),
                    o = n[1] * t + n[0] * i;
                return (n[0] = n[0] * t - n[1] * i), (n[1] = o), n;
            }
            function sR(n, e) {
                if (e.canWrapX()) {
                    const t = qe(e.getExtent()),
                        i = (function y5(n, e, t) {
                            const i = e.getExtent();
                            let r = 0;
                            return (
                                e.canWrapX() && (n[0] < i[0] || n[0] > i[2]) && ((t = t || qe(i)), (r = Math.floor((n[0] - i[0]) / t))), r
                            );
                        })(n, e, t);
                    i && (n[0] -= i * t);
                }
                return n;
            }
            const jh = 6371008.8;
            function ky(n, e, t) {
                t = t || jh;
                const i = Mh(n[1]),
                    r = Mh(e[1]),
                    o = (r - i) / 2,
                    s = Mh(e[0] - n[0]) / 2,
                    a = Math.sin(o) * Math.sin(o) + Math.sin(s) * Math.sin(s) * Math.cos(i) * Math.cos(r);
                return 2 * t * Math.atan2(Math.sqrt(a), Math.sqrt(1 - a));
            }
            const yc = { info: 1, warn: 2, error: 3, none: 4 };
            let Hh = yc.info;
            function aR(...n) {
                Hh > yc.warn || console.warn(...n);
            }
            let Ly = !0;
            function lR(n) {
                Ly = !(void 0 === n || n);
            }
            function By(n, e) {
                if (void 0 !== e) for (let t = 0, i = n.length; t < i; ++t) e[t] = n[t];
                else e = n.slice();
                return e;
            }
            function cR(n, e) {
                if (void 0 !== e && n !== e) {
                    for (let t = 0, i = n.length; t < i; ++t) e[t] = n[t];
                    n = e;
                }
                return n;
            }
            function E5(n) {
                (function d5(n, e) {
                    Fh[n] = e;
                })(n.getCode(), n),
                    Lh(n, n, By);
            }
            function Xe(n) {
                return 'string' == typeof n
                    ? (function u5(n) {
                          return Fh[n] || Fh[n.replace(/urn:(x-)?ogc:def:crs:EPSG:(.*:)?(\w+)$/, 'EPSG:$3')] || null;
                      })(n)
                    : n || null;
            }
            function uR(n, e, t, i) {
                let r;
                const o = (n = Xe(n)).getPointResolutionFunc();
                if (o) {
                    if (((r = o(e, t)), i && i !== n.getUnits())) {
                        const s = n.getMetersPerUnit();
                        s && (r = (r * s) / Po[i]);
                    }
                } else {
                    const s = n.getUnits();
                    if (('degrees' == s && !i) || 'degrees' == i) r = e;
                    else {
                        const a = bc(n, Xe('EPSG:4326'));
                        if (a === cR && 'degrees' !== s) r = e * n.getMetersPerUnit();
                        else {
                            let c = [t[0] - e / 2, t[1], t[0] + e / 2, t[1], t[0], t[1] - e / 2, t[0], t[1] + e / 2];
                            (c = a(c, c, 2)), (r = (ky(c.slice(0, 2), c.slice(2, 4)) + ky(c.slice(4, 6), c.slice(6, 8))) / 2);
                        }
                        const l = i ? Po[i] : n.getMetersPerUnit();
                        void 0 !== l && (r /= l);
                    }
                }
                return r;
            }
            function dR(n) {
                (function w5(n) {
                    n.forEach(E5);
                })(n),
                    n.forEach(function (e) {
                        n.forEach(function (t) {
                            e !== t && Lh(e, t, By);
                        });
                    });
            }
            function jy(n, e) {
                return n ? ('string' == typeof n ? Xe(n) : n) : Xe(e);
            }
            function Fo(n, e) {
                if (n === e) return !0;
                const t = n.getUnits() === e.getUnits();
                return (n.getCode() === e.getCode() || bc(n, e) === By) && t;
            }
            function bc(n, e) {
                let r = (function h5(n, e) {
                    let t;
                    return n in ti && e in ti[n] && (t = ti[n][e]), t;
                })(n.getCode(), e.getCode());
                return r || (r = cR), r;
            }
            function vc(n, e) {
                return bc(Xe(n), Xe(e));
            }
            function Ec(n, e, t) {
                return vc(e, t)(n, void 0, n.length);
            }
            let Kt = null;
            function Vy() {
                return Kt;
            }
            function Hy(n, e) {
                return n;
            }
            function er(n, e) {
                return (
                    Ly &&
                        !Bh(n, [0, 0]) &&
                        n[0] >= -180 &&
                        n[0] <= 180 &&
                        n[1] >= -90 &&
                        n[1] <= 90 &&
                        ((Ly = !1), aR('Call useGeographic() from ol/proj once to work with [longitude, latitude] coordinates.')),
                    n
                );
            }
            function Uy(n, e) {
                return n;
            }
            function Lo(n, e) {
                return n;
            }
            function mR(n, e, t) {
                return function (i, r, o, s, a) {
                    if (!i) return;
                    if (!r && !e) return i;
                    const l = e ? 0 : o[0] * r,
                        c = e ? 0 : o[1] * r,
                        u = a ? a[0] : 0,
                        d = a ? a[1] : 0;
                    let h = n[0] + l / 2 + u,
                        f = n[2] - l / 2 + u,
                        m = n[1] + c / 2 + d,
                        p = n[3] - c / 2 + d;
                    h > f && ((h = (f + h) / 2), (f = h)), m > p && ((m = (p + m) / 2), (p = m));
                    let g = gt(i[0], h, f),
                        y = gt(i[1], m, p);
                    if (s && t && r) {
                        const _ = 30 * r;
                        (g += -_ * Math.log(1 + Math.max(0, h - i[0]) / _) + _ * Math.log(1 + Math.max(0, i[0] - f) / _)),
                            (y += -_ * Math.log(1 + Math.max(0, m - i[1]) / _) + _ * Math.log(1 + Math.max(0, i[1] - p) / _));
                    }
                    return [g, y];
                };
            }
            function T5(n) {
                return n;
            }
            function zy(n, e, t, i) {
                const r = qe(e) / t[0],
                    o = wn(e) / t[1];
                return i ? Math.min(n, Math.max(r, o)) : Math.min(n, Math.min(r, o));
            }
            function Gy(n, e, t) {
                let i = Math.min(n, e);
                return (
                    (i *= Math.log(1 + 50 * Math.max(0, n / e - 1)) / 50 + 1),
                    t && ((i = Math.max(i, t)), (i /= Math.log(1 + 50 * Math.max(0, t / n - 1)) / 50 + 1)),
                    gt(i, t / 2, 2 * e)
                );
            }
            function pR(n, e, t, i, r) {
                return (
                    (t = void 0 === t || t),
                    function (o, s, a, l) {
                        if (void 0 !== o) {
                            const c = i ? zy(n, i, a, r) : n;
                            return t && l ? Gy(o, c, e) : gt(o, e, c);
                        }
                    }
                );
            }
            function Wy(n) {
                if (void 0 !== n) return 0;
            }
            function gR(n) {
                if (void 0 !== n) return n;
            }
            function _R(n) {
                return Math.pow(n, 3);
            }
            function Ea(n) {
                return 1 - _R(1 - n);
            }
            function $y(n) {
                return 3 * n * n - 2 * n * n * n;
            }
            function N5(n) {
                return n;
            }
            function Bo(n, e, t, i, r, o) {
                o = o || [];
                let s = 0;
                for (let a = e; a < t; a += i) {
                    const l = n[a],
                        c = n[a + 1];
                    (o[s++] = r[0] * l + r[2] * c + r[4]), (o[s++] = r[1] * l + r[3] * c + r[5]);
                }
                return o && o.length != s && (o.length = s), o;
            }
            function yR(n, e, t, i, r, o, s) {
                s = s || [];
                const a = Math.cos(r),
                    l = Math.sin(r),
                    c = o[0],
                    u = o[1];
                let d = 0;
                for (let h = e; h < t; h += i) {
                    const f = n[h] - c,
                        m = n[h + 1] - u;
                    (s[d++] = c + f * a - m * l), (s[d++] = u + f * l + m * a);
                    for (let p = h + 2; p < h + i; ++p) s[d++] = n[p];
                }
                return s && s.length != d && (s.length = d), s;
            }
            !(function S5() {
                dR(tR),
                    dR(iR),
                    (function C5(n, e, t, i) {
                        n.forEach(function (r) {
                            e.forEach(function (o) {
                                Lh(r, o, t), Lh(o, r, i);
                            });
                        });
                    })(iR, tR, s5, a5);
            })();
            const bR = [1, 0, 0, 1, 0, 0],
                vR = class F5 extends Di {
                    constructor() {
                        super(),
                            (this.extent_ = [1 / 0, 1 / 0, -1 / 0, -1 / 0]),
                            (this.extentRevision_ = -1),
                            (this.simplifiedGeometryMaxMinSquaredTolerance = 0),
                            (this.simplifiedGeometryRevision = 0),
                            (this.simplifyTransformedInternal = (function I8(n) {
                                let t,
                                    i,
                                    r,
                                    e = !1;
                                return function () {
                                    const o = Array.prototype.slice.call(arguments);
                                    return (
                                        (!e || this !== r || !Pr(o, i)) && ((e = !0), (r = this), (i = o), (t = n.apply(this, arguments))),
                                        t
                                    );
                                };
                            })(function (e, t, i) {
                                if (!i) return this.getSimplifiedGeometry(t);
                                const r = this.clone();
                                return r.applyTransform(i), r.getSimplifiedGeometry(t);
                            }));
                    }
                    simplifyTransformed(e, t) {
                        return this.simplifyTransformedInternal(this.getRevision(), e, t);
                    }
                    clone() {
                        return J();
                    }
                    closestPointXY(e, t, i, r) {
                        return J();
                    }
                    containsXY(e, t) {
                        const i = this.getClosestPoint([e, t]);
                        return i[0] === e && i[1] === t;
                    }
                    getClosestPoint(e, t) {
                        return this.closestPointXY(e[0], e[1], (t = t || [NaN, NaN]), 1 / 0), t;
                    }
                    intersectsCoordinate(e) {
                        return this.containsXY(e[0], e[1]);
                    }
                    computeExtent(e) {
                        return J();
                    }
                    getExtent(e) {
                        if (this.extentRevision_ != this.getRevision()) {
                            const t = this.computeExtent(this.extent_);
                            (isNaN(t[0]) || isNaN(t[1])) && Fr(t), (this.extentRevision_ = this.getRevision());
                        }
                        return (function G8(n, e) {
                            return e ? ((e[0] = n[0]), (e[1] = n[1]), (e[2] = n[2]), (e[3] = n[3]), e) : n;
                        })(this.extent_, e);
                    }
                    rotate(e, t) {
                        J();
                    }
                    scale(e, t, i) {
                        J();
                    }
                    simplify(e) {
                        return this.getSimplifiedGeometry(e * e);
                    }
                    getSimplifiedGeometry(e) {
                        return J();
                    }
                    getType() {
                        return J();
                    }
                    applyTransform(e) {
                        J();
                    }
                    intersectsExtent(e) {
                        return J();
                    }
                    translate(e, t) {
                        J();
                    }
                    transform(e, t) {
                        const i = Xe(e),
                            r =
                                'tile-pixels' == i.getUnits()
                                    ? function (o, s, a) {
                                          const l = i.getExtent(),
                                              c = i.getWorldExtent(),
                                              u = wn(c) / wn(l);
                                          return Qi(bR, c[0], c[3], u, -u, 0, 0, 0), Bo(o, 0, o.length, a, bR, s), vc(i, t)(o, s, a);
                                      }
                                    : vc(i, t);
                        return this.applyTransform(r), this;
                    }
                };
            function ER(n) {
                let e;
                return 'XY' == n ? (e = 2) : 'XYZ' == n || 'XYM' == n ? (e = 3) : 'XYZM' == n && (e = 4), e;
            }
            const jo = class L5 extends vR {
                constructor() {
                    super(), (this.layout = 'XY'), (this.stride = 2), (this.flatCoordinates = null);
                }
                computeExtent(e) {
                    return VM(this.flatCoordinates, 0, this.flatCoordinates.length, this.stride, e);
                }
                getCoordinates() {
                    return J();
                }
                getFirstCoordinate() {
                    return this.flatCoordinates.slice(0, this.stride);
                }
                getFlatCoordinates() {
                    return this.flatCoordinates;
                }
                getLastCoordinate() {
                    return this.flatCoordinates.slice(this.flatCoordinates.length - this.stride);
                }
                getLayout() {
                    return this.layout;
                }
                getSimplifiedGeometry(e) {
                    if (
                        (this.simplifiedGeometryRevision !== this.getRevision() &&
                            ((this.simplifiedGeometryMaxMinSquaredTolerance = 0), (this.simplifiedGeometryRevision = this.getRevision())),
                        e < 0 ||
                            (0 !== this.simplifiedGeometryMaxMinSquaredTolerance && e <= this.simplifiedGeometryMaxMinSquaredTolerance))
                    )
                        return this;
                    const t = this.getSimplifiedGeometryInternal(e);
                    return t.getFlatCoordinates().length < this.flatCoordinates.length
                        ? t
                        : ((this.simplifiedGeometryMaxMinSquaredTolerance = e), this);
                }
                getSimplifiedGeometryInternal(e) {
                    return this;
                }
                getStride() {
                    return this.stride;
                }
                setFlatCoordinates(e, t) {
                    (this.stride = ER(e)), (this.layout = e), (this.flatCoordinates = t);
                }
                setCoordinates(e, t) {
                    J();
                }
                setLayout(e, t, i) {
                    let r;
                    if (e) r = ER(e);
                    else {
                        for (let o = 0; o < i; ++o) {
                            if (0 === t.length) return (this.layout = 'XY'), void (this.stride = 2);
                            t = t[0];
                        }
                        (r = t.length),
                            (e = (function B5(n) {
                                let e;
                                return 2 == n ? (e = 'XY') : 3 == n ? (e = 'XYZ') : 4 == n && (e = 'XYZM'), e;
                            })(r));
                    }
                    (this.layout = e), (this.stride = r);
                }
                applyTransform(e) {
                    this.flatCoordinates && (e(this.flatCoordinates, this.flatCoordinates, this.stride), this.changed());
                }
                rotate(e, t) {
                    const i = this.getFlatCoordinates();
                    if (i) {
                        const r = this.getStride();
                        yR(i, 0, i.length, r, e, t, i), this.changed();
                    }
                }
                scale(e, t, i) {
                    void 0 === t && (t = e), i || (i = Ao(this.getExtent()));
                    const r = this.getFlatCoordinates();
                    if (r) {
                        const o = this.getStride();
                        (function P5(n, e, t, i, r, o, s, a) {
                            a = a || [];
                            const l = s[0],
                                c = s[1];
                            let u = 0;
                            for (let d = e; d < t; d += i) {
                                const f = n[d + 1] - c;
                                (a[u++] = l + r * (n[d] - l)), (a[u++] = c + o * f);
                                for (let m = d + 2; m < d + i; ++m) a[u++] = n[m];
                            }
                            a && a.length != u && (a.length = u);
                        })(r, 0, r.length, o, e, t, i, r),
                            this.changed();
                    }
                }
                translate(e, t) {
                    const i = this.getFlatCoordinates();
                    if (i) {
                        const r = this.getStride();
                        (function k5(n, e, t, i, r, o, s) {
                            s = s || [];
                            let a = 0;
                            for (let l = e; l < t; l += i) {
                                (s[a++] = n[l] + r), (s[a++] = n[l + 1] + o);
                                for (let c = l + 2; c < l + i; ++c) s[a++] = n[c];
                            }
                            s && s.length != a && (s.length = a);
                        })(i, 0, i.length, r, e, t, i),
                            this.changed();
                    }
                }
            };
            function wR(n, e, t, i, r, o, s) {
                const a = n[e],
                    l = n[e + 1],
                    c = n[t] - a,
                    u = n[t + 1] - l;
                let d;
                if (0 === c && 0 === u) d = e;
                else {
                    const h = ((r - a) * c + (o - l) * u) / (c * c + u * u);
                    if (h > 1) d = t;
                    else {
                        if (h > 0) {
                            for (let f = 0; f < i; ++f) s[f] = Cn(n[e + f], n[t + f], h);
                            return void (s.length = i);
                        }
                        d = e;
                    }
                }
                for (let h = 0; h < i; ++h) s[h] = n[d + h];
                s.length = i;
            }
            function Yy(n, e, t, i, r) {
                let o = n[e],
                    s = n[e + 1];
                for (e += i; e < t; e += i) {
                    const a = n[e],
                        l = n[e + 1],
                        c = No(o, s, a, l);
                    c > r && (r = c), (o = a), (s = l);
                }
                return r;
            }
            function qy(n, e, t, i, r) {
                for (let o = 0, s = t.length; o < s; ++o) {
                    const a = t[o];
                    (r = Yy(n, e, a, i, r)), (e = a);
                }
                return r;
            }
            function Xy(n, e, t, i, r, o, s, a, l, c, u) {
                if (e == t) return c;
                let d, h;
                if (0 === r) {
                    if (((h = No(s, a, n[e], n[e + 1])), h < c)) {
                        for (d = 0; d < i; ++d) l[d] = n[e + d];
                        return (l.length = i), h;
                    }
                    return c;
                }
                u = u || [NaN, NaN];
                let f = e + i;
                for (; f < t; )
                    if ((wR(n, f - i, f, i, s, a, u), (h = No(s, a, u[0], u[1])), h < c)) {
                        for (c = h, d = 0; d < i; ++d) l[d] = u[d];
                        (l.length = i), (f += i);
                    } else f += i * Math.max(((Math.sqrt(h) - Math.sqrt(c)) / r) | 0, 1);
                if (o && (wR(n, t - i, e, i, s, a, u), (h = No(s, a, u[0], u[1])), h < c)) {
                    for (c = h, d = 0; d < i; ++d) l[d] = u[d];
                    l.length = i;
                }
                return c;
            }
            function Ky(n, e, t, i, r, o, s, a, l, c, u) {
                u = u || [NaN, NaN];
                for (let d = 0, h = t.length; d < h; ++d) {
                    const f = t[d];
                    (c = Xy(n, e, f, i, r, o, s, a, l, c, u)), (e = f);
                }
                return c;
            }
            function Uh(n, e, t, i) {
                for (let r = 0, o = t.length; r < o; ++r) {
                    const s = t[r];
                    for (let a = 0; a < i; ++a) n[e++] = s[a];
                }
                return e;
            }
            function Zy(n, e, t, i, r) {
                r = r || [];
                let o = 0;
                for (let s = 0, a = t.length; s < a; ++s) {
                    const l = Uh(n, e, t[s], i);
                    (r[o++] = l), (e = l);
                }
                return (r.length = o), r;
            }
            function zh(n, e, t, i, r, o, s) {
                const a = (t - e) / i;
                if (a < 3) {
                    for (; e < t; e += i) (o[s++] = n[e]), (o[s++] = n[e + 1]);
                    return s;
                }
                const l = new Array(a);
                (l[0] = 1), (l[a - 1] = 1);
                const c = [e, t - i];
                let u = 0;
                for (; c.length > 0; ) {
                    const d = c.pop(),
                        h = c.pop();
                    let f = 0;
                    const m = n[h],
                        p = n[h + 1],
                        g = n[d],
                        y = n[d + 1];
                    for (let _ = h + i; _ < d; _ += i) {
                        const E = q8(n[_], n[_ + 1], m, p, g, y);
                        E > f && ((u = _), (f = E));
                    }
                    f > r && ((l[(u - e) / i] = 1), h + i < u && c.push(h, u), u + i < d && c.push(u, d));
                }
                for (let d = 0; d < a; ++d) l[d] && ((o[s++] = n[e + d * i]), (o[s++] = n[e + d * i + 1]));
                return s;
            }
            function Vo(n, e) {
                return e * Math.round(n / e);
            }
            function W5(n, e, t, i, r, o, s) {
                if (e == t) return s;
                let c,
                    u,
                    a = Vo(n[e], r),
                    l = Vo(n[e + 1], r);
                (e += i), (o[s++] = a), (o[s++] = l);
                do {
                    if (((c = Vo(n[e], r)), (u = Vo(n[e + 1], r)), (e += i) == t)) return (o[s++] = c), (o[s++] = u), s;
                } while (c == a && u == l);
                for (; e < t; ) {
                    const d = Vo(n[e], r),
                        h = Vo(n[e + 1], r);
                    if (((e += i), d == c && h == u)) continue;
                    const f = c - a,
                        m = u - l,
                        p = d - a,
                        g = h - l;
                    f * g == m * p && ((f < 0 && p < f) || f == p || (f > 0 && p > f)) && ((m < 0 && g < m) || m == g || (m > 0 && g > m))
                        ? ((c = d), (u = h))
                        : ((o[s++] = c), (o[s++] = u), (a = c), (l = u), (c = d), (u = h));
                }
                return (o[s++] = c), (o[s++] = u), s;
            }
            function DR(n, e, t, i, r, o, s, a) {
                for (let l = 0, c = t.length; l < c; ++l) {
                    const u = t[l];
                    (s = W5(n, e, u, i, r, o, s)), a.push(s), (e = u);
                }
                return s;
            }
            function Lr(n, e, t, i, r) {
                r = void 0 !== r ? r : [];
                let o = 0;
                for (let s = e; s < t; s += i) r[o++] = n.slice(s, s + i);
                return (r.length = o), r;
            }
            function wc(n, e, t, i, r) {
                r = void 0 !== r ? r : [];
                let o = 0;
                for (let s = 0, a = t.length; s < a; ++s) {
                    const l = t[s];
                    (r[o++] = Lr(n, e, l, i, r[o])), (e = l);
                }
                return (r.length = o), r;
            }
            function Qy(n, e, t, i, r) {
                r = void 0 !== r ? r : [];
                let o = 0;
                for (let s = 0, a = t.length; s < a; ++s) {
                    const l = t[s];
                    (r[o++] = 1 === l.length && l[0] === e ? [] : wc(n, e, l, i, r[o])), (e = l[l.length - 1]);
                }
                return (r.length = o), r;
            }
            function IR(n, e, t, i) {
                let r = 0,
                    o = n[t - i],
                    s = n[t - i + 1];
                for (; e < t; e += i) {
                    const a = n[e],
                        l = n[e + 1];
                    (r += s * a - o * l), (o = a), (s = l);
                }
                return r / 2;
            }
            function xR(n, e, t, i) {
                let r = 0;
                for (let o = 0, s = t.length; o < s; ++o) {
                    const a = t[o];
                    (r += IR(n, e, a, i)), (e = a);
                }
                return r;
            }
            class Gh extends jo {
                constructor(e, t) {
                    super(),
                        (this.maxDelta_ = -1),
                        (this.maxDeltaRevision_ = -1),
                        void 0 === t || Array.isArray(e[0]) ? this.setCoordinates(e, t) : this.setFlatCoordinates(t, e);
                }
                clone() {
                    return new Gh(this.flatCoordinates.slice(), this.layout);
                }
                closestPointXY(e, t, i, r) {
                    return r < Ro(this.getExtent(), e, t)
                        ? r
                        : (this.maxDeltaRevision_ != this.getRevision() &&
                              ((this.maxDelta_ = Math.sqrt(Yy(this.flatCoordinates, 0, this.flatCoordinates.length, this.stride, 0))),
                              (this.maxDeltaRevision_ = this.getRevision())),
                          Xy(this.flatCoordinates, 0, this.flatCoordinates.length, this.stride, this.maxDelta_, !0, e, t, i, r));
                }
                getArea() {
                    return IR(this.flatCoordinates, 0, this.flatCoordinates.length, this.stride);
                }
                getCoordinates() {
                    return Lr(this.flatCoordinates, 0, this.flatCoordinates.length, this.stride);
                }
                getSimplifiedGeometryInternal(e) {
                    const t = [];
                    return (t.length = zh(this.flatCoordinates, 0, this.flatCoordinates.length, this.stride, e, t, 0)), new Gh(t, 'XY');
                }
                getType() {
                    return 'LinearRing';
                }
                intersectsExtent(e) {
                    return !1;
                }
                setCoordinates(e, t) {
                    this.setLayout(t, e, 1),
                        this.flatCoordinates || (this.flatCoordinates = []),
                        (this.flatCoordinates.length = Uh(this.flatCoordinates, 0, e, this.stride)),
                        this.changed();
                }
            }
            const SR = Gh;
            class Jy extends jo {
                constructor(e, t) {
                    super(), this.setCoordinates(e, t);
                }
                clone() {
                    const e = new Jy(this.flatCoordinates.slice(), this.layout);
                    return e.applyProperties(this), e;
                }
                closestPointXY(e, t, i, r) {
                    const o = this.flatCoordinates,
                        s = No(e, t, o[0], o[1]);
                    if (s < r) {
                        const a = this.stride;
                        for (let l = 0; l < a; ++l) i[l] = o[l];
                        return (i.length = a), s;
                    }
                    return r;
                }
                getCoordinates() {
                    return this.flatCoordinates ? this.flatCoordinates.slice() : [];
                }
                computeExtent(e) {
                    return (function V8(n, e) {
                        const t = n[0],
                            i = n[1];
                        return Ji(t, i, t, i, e);
                    })(this.flatCoordinates, e);
                }
                getType() {
                    return 'Point';
                }
                intersectsExtent(e) {
                    return My(e, this.flatCoordinates[0], this.flatCoordinates[1]);
                }
                setCoordinates(e, t) {
                    this.setLayout(t, e, 0),
                        this.flatCoordinates || (this.flatCoordinates = []),
                        (this.flatCoordinates.length = (function U5(n, e, t, i) {
                            for (let r = 0, o = t.length; r < o; ++r) n[e++] = t[r];
                            return e;
                        })(this.flatCoordinates, 0, e)),
                        this.changed();
                }
            }
            const Wh = Jy;
            function q5(n, e, t, i, r) {
                return !GM(r, function (s) {
                    return !Ho(n, e, t, i, s[0], s[1]);
                });
            }
            function Ho(n, e, t, i, r, o) {
                let s = 0,
                    a = n[t - i],
                    l = n[t - i + 1];
                for (; e < t; e += i) {
                    const c = n[e],
                        u = n[e + 1];
                    l <= o
                        ? u > o && (c - a) * (o - l) - (r - a) * (u - l) > 0 && s++
                        : u <= o && (c - a) * (o - l) - (r - a) * (u - l) < 0 && s--,
                        (a = c),
                        (l = u);
                }
                return 0 !== s;
            }
            function eb(n, e, t, i, r, o) {
                if (0 === t.length || !Ho(n, e, t[0], i, r, o)) return !1;
                for (let s = 1, a = t.length; s < a; ++s) if (Ho(n, t[s - 1], t[s], i, r, o)) return !1;
                return !0;
            }
            function TR(n, e, t, i, r, o, s) {
                let a, l, c, u, d, h, f;
                const m = r[o + 1],
                    p = [];
                for (let _ = 0, b = t.length; _ < b; ++_) {
                    const v = t[_];
                    for (u = n[v - i], h = n[v - i + 1], a = e; a < v; a += i)
                        (d = n[a]),
                            (f = n[a + 1]),
                            ((m <= h && f <= m) || (h <= m && m <= f)) && ((c = ((m - h) / (f - h)) * (d - u) + u), p.push(c)),
                            (u = d),
                            (h = f);
                }
                let g = NaN,
                    y = -1 / 0;
                for (p.sort(Mo), u = p[0], a = 1, l = p.length; a < l; ++a) {
                    d = p[a];
                    const _ = Math.abs(d - u);
                    _ > y && ((c = (u + d) / 2), eb(n, e, t, i, c, m) && ((g = c), (y = _))), (u = d);
                }
                return isNaN(g) && (g = r[o]), s ? (s.push(g, m, y), s) : [g, m, y];
            }
            function MR(n, e, t, i, r) {
                let o;
                for (e += i; e < t; e += i) if (((o = r(n.slice(e - i, e), n.slice(e, e + i))), o)) return o;
                return !1;
            }
            function $h(n, e, t, i, r) {
                const o = zM([1 / 0, 1 / 0, -1 / 0, -1 / 0], n, e, t, i);
                return (
                    !!dn(r, o) &&
                    (!!(pa(r, o) || (o[0] >= r[0] && o[2] <= r[2]) || (o[1] >= r[1] && o[3] <= r[3])) ||
                        MR(n, e, t, i, function (s, a) {
                            return (function W8(n, e, t) {
                                let i = !1;
                                const r = Ry(n, e),
                                    o = Ry(n, t);
                                if (r === Dt.INTERSECTING || o === Dt.INTERSECTING) i = !0;
                                else {
                                    const s = n[0],
                                        a = n[1],
                                        l = n[2],
                                        c = n[3],
                                        h = t[0],
                                        f = t[1],
                                        m = (f - e[1]) / (h - e[0]);
                                    let p, g;
                                    o & Dt.ABOVE && !(r & Dt.ABOVE) && ((p = h - (f - c) / m), (i = p >= s && p <= l)),
                                        !i && o & Dt.RIGHT && !(r & Dt.RIGHT) && ((g = f - (h - l) * m), (i = g >= a && g <= c)),
                                        !i && o & Dt.BELOW && !(r & Dt.BELOW) && ((p = h - (f - a) / m), (i = p >= s && p <= l)),
                                        !i && o & Dt.LEFT && !(r & Dt.LEFT) && ((g = f - (h - s) * m), (i = g >= a && g <= c));
                                }
                                return i;
                            })(r, s, a);
                        }))
                );
            }
            function RR(n, e, t, i, r) {
                return !!(
                    $h(n, e, t, i, r) ||
                    Ho(n, e, t, i, r[0], r[1]) ||
                    Ho(n, e, t, i, r[0], r[3]) ||
                    Ho(n, e, t, i, r[2], r[1]) ||
                    Ho(n, e, t, i, r[2], r[3])
                );
            }
            function AR(n, e, t, i, r) {
                if (!RR(n, e, t[0], i, r)) return !1;
                if (1 === t.length) return !0;
                for (let o = 1, s = t.length; o < s; ++o) if (q5(n, t[o - 1], t[o], i, r) && !$h(n, t[o - 1], t[o], i, r)) return !1;
                return !0;
            }
            function J5(n, e, t, i) {
                for (; e < t - i; ) {
                    for (let r = 0; r < i; ++r) {
                        const o = n[e + r];
                        (n[e + r] = n[t - i + r]), (n[t - i + r] = o);
                    }
                    (e += i), (t -= i);
                }
            }
            function tb(n, e, t, i) {
                let r = 0,
                    o = n[t - i],
                    s = n[t - i + 1];
                for (; e < t; e += i) {
                    const a = n[e],
                        l = n[e + 1];
                    (r += (a - o) * (l + s)), (o = a), (s = l);
                }
                return 0 === r ? void 0 : r > 0;
            }
            function OR(n, e, t, i, r) {
                r = void 0 !== r && r;
                for (let o = 0, s = t.length; o < s; ++o) {
                    const a = t[o],
                        l = tb(n, e, a, i);
                    if (0 === o) {
                        if ((r && l) || (!r && !l)) return !1;
                    } else if ((r && !l) || (!r && l)) return !1;
                    e = a;
                }
                return !0;
            }
            function nb(n, e, t, i, r) {
                r = void 0 !== r && r;
                for (let o = 0, s = t.length; o < s; ++o) {
                    const a = t[o],
                        l = tb(n, e, a, i);
                    (0 === o ? (r && l) || (!r && !l) : (r && !l) || (!r && l)) && J5(n, e, a, i), (e = a);
                }
                return e;
            }
            function NR(n, e, t, i, r) {
                for (let o = 0, s = t.length; o < s; ++o) e = nb(n, e, t[o], i, r);
                return e;
            }
            class Uo extends jo {
                constructor(e, t, i) {
                    super(),
                        (this.ends_ = []),
                        (this.flatInteriorPointRevision_ = -1),
                        (this.flatInteriorPoint_ = null),
                        (this.maxDelta_ = -1),
                        (this.maxDeltaRevision_ = -1),
                        (this.orientedRevision_ = -1),
                        (this.orientedFlatCoordinates_ = null),
                        void 0 !== t && i ? (this.setFlatCoordinates(t, e), (this.ends_ = i)) : this.setCoordinates(e, t);
                }
                appendLinearRing(e) {
                    this.flatCoordinates
                        ? Zi(this.flatCoordinates, e.getFlatCoordinates())
                        : (this.flatCoordinates = e.getFlatCoordinates().slice()),
                        this.ends_.push(this.flatCoordinates.length),
                        this.changed();
                }
                clone() {
                    const e = new Uo(this.flatCoordinates.slice(), this.layout, this.ends_.slice());
                    return e.applyProperties(this), e;
                }
                closestPointXY(e, t, i, r) {
                    return r < Ro(this.getExtent(), e, t)
                        ? r
                        : (this.maxDeltaRevision_ != this.getRevision() &&
                              ((this.maxDelta_ = Math.sqrt(qy(this.flatCoordinates, 0, this.ends_, this.stride, 0))),
                              (this.maxDeltaRevision_ = this.getRevision())),
                          Ky(this.flatCoordinates, 0, this.ends_, this.stride, this.maxDelta_, !0, e, t, i, r));
                }
                containsXY(e, t) {
                    return eb(this.getOrientedFlatCoordinates(), 0, this.ends_, this.stride, e, t);
                }
                getArea() {
                    return xR(this.getOrientedFlatCoordinates(), 0, this.ends_, this.stride);
                }
                getCoordinates(e) {
                    let t;
                    return (
                        void 0 !== e
                            ? ((t = this.getOrientedFlatCoordinates().slice()), nb(t, 0, this.ends_, this.stride, e))
                            : (t = this.flatCoordinates),
                        wc(t, 0, this.ends_, this.stride)
                    );
                }
                getEnds() {
                    return this.ends_;
                }
                getFlatInteriorPoint() {
                    if (this.flatInteriorPointRevision_ != this.getRevision()) {
                        const e = Ao(this.getExtent());
                        (this.flatInteriorPoint_ = TR(this.getOrientedFlatCoordinates(), 0, this.ends_, this.stride, e, 0)),
                            (this.flatInteriorPointRevision_ = this.getRevision());
                    }
                    return this.flatInteriorPoint_;
                }
                getInteriorPoint() {
                    return new Wh(this.getFlatInteriorPoint(), 'XYM');
                }
                getLinearRingCount() {
                    return this.ends_.length;
                }
                getLinearRing(e) {
                    return e < 0 || this.ends_.length <= e
                        ? null
                        : new SR(this.flatCoordinates.slice(0 === e ? 0 : this.ends_[e - 1], this.ends_[e]), this.layout);
                }
                getLinearRings() {
                    const e = this.layout,
                        t = this.flatCoordinates,
                        i = this.ends_,
                        r = [];
                    let o = 0;
                    for (let s = 0, a = i.length; s < a; ++s) {
                        const l = i[s],
                            c = new SR(t.slice(o, l), e);
                        r.push(c), (o = l);
                    }
                    return r;
                }
                getOrientedFlatCoordinates() {
                    if (this.orientedRevision_ != this.getRevision()) {
                        const e = this.flatCoordinates;
                        OR(e, 0, this.ends_, this.stride)
                            ? (this.orientedFlatCoordinates_ = e)
                            : ((this.orientedFlatCoordinates_ = e.slice()),
                              (this.orientedFlatCoordinates_.length = nb(this.orientedFlatCoordinates_, 0, this.ends_, this.stride))),
                            (this.orientedRevision_ = this.getRevision());
                    }
                    return this.orientedFlatCoordinates_;
                }
                getSimplifiedGeometryInternal(e) {
                    const t = [],
                        i = [];
                    return (t.length = DR(this.flatCoordinates, 0, this.ends_, this.stride, Math.sqrt(e), t, 0, i)), new Uo(t, 'XY', i);
                }
                getType() {
                    return 'Polygon';
                }
                intersectsExtent(e) {
                    return AR(this.getOrientedFlatCoordinates(), 0, this.ends_, this.stride, e);
                }
                setCoordinates(e, t) {
                    this.setLayout(t, e, 2), this.flatCoordinates || (this.flatCoordinates = []);
                    const i = Zy(this.flatCoordinates, 0, e, this.stride, this.ends_);
                    (this.flatCoordinates.length = 0 === i.length ? 0 : i[i.length - 1]), this.changed();
                }
            }
            const Yh = Uo;
            function ib(n) {
                if (gc(n)) throw new Error('Cannot create polygon from empty extent');
                const e = n[0],
                    t = n[1],
                    i = n[2],
                    r = n[3],
                    o = [e, t, e, r, i, r, i, t, e, t];
                return new Uo(o, 'XY', [o.length]);
            }
            function qh(n, e) {
                setTimeout(function () {
                    n(e);
                }, 0);
            }
            function ob(n, e, t, i, r) {
                const o = Math.cos(-r);
                let s = Math.sin(-r),
                    a = n[0] * o - n[1] * s,
                    l = n[1] * o + n[0] * s;
                return (a += (e[0] / 2 - t[0]) * i), (l += (t[1] - e[1] / 2) * i), (s = -s), [a * o - l * s, l * o + a * s];
            }
            const Si = class n4 extends Di {
                constructor(e) {
                    super(),
                        (e = Object.assign({}, e)),
                        (this.hints_ = [0, 0]),
                        (this.animations_ = []),
                        (this.projection_ = jy(e.projection, 'EPSG:3857')),
                        (this.viewportSize_ = [100, 100]),
                        (this.targetCenter_ = null),
                        (this.nextCenter_ = null),
                        (this.cancelAnchor_ = void 0),
                        e.projection && lR(),
                        e.center && (e.center = er(e.center)),
                        e.extent && (e.extent = Lo(e.extent)),
                        this.applyOptions_(e);
                }
                applyOptions_(e) {
                    const t = Object.assign({}, e);
                    for (const a in ei) delete t[a];
                    this.setProperties(t, !0);
                    const i = (function r4(n) {
                        let e,
                            t,
                            i,
                            s = void 0 !== n.minZoom ? n.minZoom : 0,
                            a = void 0 !== n.maxZoom ? n.maxZoom : 28;
                        const l = void 0 !== n.zoomFactor ? n.zoomFactor : 2,
                            c = void 0 !== n.multiWorld && n.multiWorld,
                            u = void 0 === n.smoothResolutionConstraint || n.smoothResolutionConstraint,
                            d = void 0 !== n.showFullExtent && n.showFullExtent,
                            h = jy(n.projection, 'EPSG:3857'),
                            f = h.getExtent();
                        let m = n.constrainOnlyCenter,
                            p = n.extent;
                        if ((!c && !p && h.isGlobal() && ((m = !1), (p = f)), void 0 !== n.resolutions)) {
                            const g = n.resolutions;
                            (t = g[s]),
                                (i = void 0 !== g[a] ? g[a] : g[g.length - 1]),
                                (e = n.constrainResolution
                                    ? (function M5(n, e, t, i) {
                                          return (
                                              (e = void 0 === e || e),
                                              function (r, o, s, a) {
                                                  if (void 0 !== r) {
                                                      const l = n[0],
                                                          c = n[n.length - 1],
                                                          u = t ? zy(l, t, s, i) : l;
                                                      if (a) return e ? Gy(r, u, c) : gt(r, c, u);
                                                      const d = Math.min(u, r),
                                                          h = Math.floor(Cy(n, d, o));
                                                      return n[h] > u && h < n.length - 1 ? n[h + 1] : n[h];
                                                  }
                                              }
                                          );
                                      })(g, u, !m && p, d)
                                    : pR(t, i, u, !m && p, d));
                        } else {
                            const y = (f ? Math.max(qe(f), wn(f)) : (360 * Po.degrees) / h.getMetersPerUnit()) / Ny / Math.pow(2, 0),
                                _ = y / Math.pow(2, 28);
                            (t = n.maxResolution),
                                void 0 !== t ? (s = 0) : (t = y / Math.pow(l, s)),
                                (i = n.minResolution),
                                void 0 === i &&
                                    (i = void 0 !== n.maxZoom ? (void 0 !== n.maxResolution ? t / Math.pow(l, a) : y / Math.pow(l, a)) : _),
                                (a = s + Math.floor(Math.log(t / i) / Math.log(l))),
                                (i = t / Math.pow(l, a - s)),
                                (e = n.constrainResolution
                                    ? (function R5(n, e, t, i, r, o) {
                                          return (
                                              (i = void 0 === i || i),
                                              (t = void 0 !== t ? t : 0),
                                              function (s, a, l, c) {
                                                  if (void 0 !== s) {
                                                      const u = r ? zy(e, r, l, o) : e;
                                                      if (c) return i ? Gy(s, u, t) : gt(s, t, u);
                                                      const d = 1e-9,
                                                          h = Math.ceil(Math.log(e / u) / Math.log(n) - d),
                                                          f = -a * (0.5 - d) + 0.5,
                                                          m = Math.min(u, s),
                                                          p = Math.floor(Math.log(e / m) / Math.log(n) + f),
                                                          g = Math.max(h, p);
                                                      return gt(e / Math.pow(n, g), t, u);
                                                  }
                                              }
                                          );
                                      })(l, t, i, u, !m && p, d)
                                    : pR(t, i, u, !m && p, d));
                        }
                        return { constraint: e, maxResolution: t, minResolution: i, minZoom: s, zoomFactor: l };
                    })(e);
                    (this.maxResolution_ = i.maxResolution),
                        (this.minResolution_ = i.minResolution),
                        (this.zoomFactor_ = i.zoomFactor),
                        (this.resolutions_ = e.resolutions),
                        (this.padding_ = e.padding),
                        (this.minZoom_ = i.minZoom);
                    const r = (function i4(n) {
                            if (void 0 !== n.extent)
                                return mR(n.extent, n.constrainOnlyCenter, void 0 === n.smoothExtentConstraint || n.smoothExtentConstraint);
                            const e = jy(n.projection, 'EPSG:3857');
                            if (!0 !== n.multiWorld && e.isGlobal()) {
                                const t = e.getExtent().slice();
                                return (t[0] = -1 / 0), (t[2] = 1 / 0), mR(t, !1, !1);
                            }
                            return T5;
                        })(e),
                        o = i.constraint,
                        s = (function o4(n) {
                            if (void 0 === n.enableRotation || n.enableRotation) {
                                const t = n.constrainRotation;
                                return void 0 === t || !0 === t
                                    ? (function O5(n) {
                                          return (
                                              (n = n || Mh(5)),
                                              function (e, t) {
                                                  return t ? e : void 0 !== e ? (Math.abs(e) <= n ? 0 : e) : void 0;
                                              }
                                          );
                                      })()
                                    : !1 === t
                                      ? gR
                                      : 'number' == typeof t
                                        ? (function A5(n) {
                                              const e = (2 * Math.PI) / n;
                                              return function (t, i) {
                                                  return i ? t : void 0 !== t ? (t = Math.floor(t / e + 0.5) * e) : void 0;
                                              };
                                          })(t)
                                        : gR;
                            }
                            return Wy;
                        })(e);
                    (this.constraints_ = { center: r, resolution: o, rotation: s }),
                        this.setRotation(void 0 !== e.rotation ? e.rotation : 0),
                        this.setCenterInternal(void 0 !== e.center ? e.center : null),
                        void 0 !== e.resolution ? this.setResolution(e.resolution) : void 0 !== e.zoom && this.setZoom(e.zoom);
                }
                get padding() {
                    return this.padding_;
                }
                set padding(e) {
                    let t = this.padding_;
                    this.padding_ = e;
                    const i = this.getCenterInternal();
                    if (i) {
                        const r = e || [0, 0, 0, 0];
                        t = t || [0, 0, 0, 0];
                        const o = this.getResolution();
                        this.setCenterInternal([
                            i[0] + (o / 2) * (r[3] - t[3] + t[1] - r[1]),
                            i[1] - (o / 2) * (r[0] - t[0] + t[2] - r[2]),
                        ]);
                    }
                }
                getUpdatedOptions_(e) {
                    const t = this.getProperties();
                    return (
                        void 0 !== t.resolution ? (t.resolution = this.getResolution()) : (t.zoom = this.getZoom()),
                        (t.center = this.getCenterInternal()),
                        (t.rotation = this.getRotation()),
                        Object.assign({}, t, e)
                    );
                }
                animate(e) {
                    this.isDef() && !this.getAnimating() && this.resolveConstraints(0);
                    const t = new Array(arguments.length);
                    for (let i = 0; i < t.length; ++i) {
                        let r = arguments[i];
                        r.center && ((r = Object.assign({}, r)), (r.center = er(r.center, this.getProjection()))),
                            r.anchor && ((r = Object.assign({}, r)), (r.anchor = er(r.anchor, this.getProjection()))),
                            (t[i] = r);
                    }
                    this.animateInternal.apply(this, t);
                }
                animateInternal(e) {
                    let i,
                        t = arguments.length;
                    t > 1 && 'function' == typeof arguments[t - 1] && ((i = arguments[t - 1]), --t);
                    let r = 0;
                    for (; r < t && !this.isDef(); ++r) {
                        const u = arguments[r];
                        u.center && this.setCenterInternal(u.center),
                            void 0 !== u.zoom ? this.setZoom(u.zoom) : u.resolution && this.setResolution(u.resolution),
                            void 0 !== u.rotation && this.setRotation(u.rotation);
                    }
                    if (r === t) return void (i && qh(i, !0));
                    let o = Date.now(),
                        s = this.targetCenter_.slice(),
                        a = this.targetResolution_,
                        l = this.targetRotation_;
                    const c = [];
                    for (; r < t; ++r) {
                        const u = arguments[r],
                            d = {
                                start: o,
                                complete: !1,
                                anchor: u.anchor,
                                duration: void 0 !== u.duration ? u.duration : 1e3,
                                easing: u.easing || $y,
                                callback: i,
                            };
                        if (
                            (u.center && ((d.sourceCenter = s), (d.targetCenter = u.center.slice()), (s = d.targetCenter)),
                            void 0 !== u.zoom
                                ? ((d.sourceResolution = a),
                                  (d.targetResolution = this.getResolutionForZoom(u.zoom)),
                                  (a = d.targetResolution))
                                : u.resolution && ((d.sourceResolution = a), (d.targetResolution = u.resolution), (a = d.targetResolution)),
                            void 0 !== u.rotation)
                        ) {
                            d.sourceRotation = l;
                            const h = ya(u.rotation - l + Math.PI, 2 * Math.PI) - Math.PI;
                            (d.targetRotation = l + h), (l = d.targetRotation);
                        }
                        ((n = d).sourceCenter && n.targetCenter && !Bh(n.sourceCenter, n.targetCenter)) ||
                        n.sourceResolution !== n.targetResolution ||
                        n.sourceRotation !== n.targetRotation
                            ? (o += d.duration)
                            : (d.complete = !0),
                            c.push(d);
                    }
                    var n;
                    this.animations_.push(c), this.setHint(0, 1), this.updateAnimations_();
                }
                getAnimating() {
                    return this.hints_[0] > 0;
                }
                getInteracting() {
                    return this.hints_[1] > 0;
                }
                cancelAnimations() {
                    let e;
                    this.setHint(0, -this.hints_[0]);
                    for (let t = 0, i = this.animations_.length; t < i; ++t) {
                        const r = this.animations_[t];
                        if ((r[0].callback && qh(r[0].callback, !1), !e))
                            for (let o = 0, s = r.length; o < s; ++o) {
                                const a = r[o];
                                if (!a.complete) {
                                    e = a.anchor;
                                    break;
                                }
                            }
                    }
                    (this.animations_.length = 0),
                        (this.cancelAnchor_ = e),
                        (this.nextCenter_ = null),
                        (this.nextResolution_ = NaN),
                        (this.nextRotation_ = NaN);
                }
                updateAnimations_() {
                    if (
                        (void 0 !== this.updateAnimationKey_ &&
                            (cancelAnimationFrame(this.updateAnimationKey_), (this.updateAnimationKey_ = void 0)),
                        !this.getAnimating())
                    )
                        return;
                    const e = Date.now();
                    let t = !1;
                    for (let i = this.animations_.length - 1; i >= 0; --i) {
                        const r = this.animations_[i];
                        let o = !0;
                        for (let s = 0, a = r.length; s < a; ++s) {
                            const l = r[s];
                            if (l.complete) continue;
                            let u = l.duration > 0 ? (e - l.start) / l.duration : 1;
                            u >= 1 ? ((l.complete = !0), (u = 1)) : (o = !1);
                            const d = l.easing(u);
                            if (l.sourceCenter) {
                                const h = l.sourceCenter[0],
                                    f = l.sourceCenter[1],
                                    m = l.targetCenter[0],
                                    p = l.targetCenter[1];
                                (this.nextCenter_ = l.targetCenter), (this.targetCenter_ = [h + d * (m - h), f + d * (p - f)]);
                            }
                            if (l.sourceResolution && l.targetResolution) {
                                const h = 1 === d ? l.targetResolution : l.sourceResolution + d * (l.targetResolution - l.sourceResolution);
                                if (l.anchor) {
                                    const f = this.getViewportSize_(this.getRotation()),
                                        m = this.constraints_.resolution(h, 0, f, !0);
                                    this.targetCenter_ = this.calculateCenterZoom(m, l.anchor);
                                }
                                (this.nextResolution_ = l.targetResolution), (this.targetResolution_ = h), this.applyTargetState_(!0);
                            }
                            if (void 0 !== l.sourceRotation && void 0 !== l.targetRotation) {
                                const h =
                                    1 === d
                                        ? ya(l.targetRotation + Math.PI, 2 * Math.PI) - Math.PI
                                        : l.sourceRotation + d * (l.targetRotation - l.sourceRotation);
                                if (l.anchor) {
                                    const f = this.constraints_.rotation(h, !0);
                                    this.targetCenter_ = this.calculateCenterRotate(f, l.anchor);
                                }
                                (this.nextRotation_ = l.targetRotation), (this.targetRotation_ = h);
                            }
                            if ((this.applyTargetState_(!0), (t = !0), !l.complete)) break;
                        }
                        if (o) {
                            (this.animations_[i] = null),
                                this.setHint(0, -1),
                                (this.nextCenter_ = null),
                                (this.nextResolution_ = NaN),
                                (this.nextRotation_ = NaN);
                            const s = r[0].callback;
                            s && qh(s, !0);
                        }
                    }
                    (this.animations_ = this.animations_.filter(Boolean)),
                        t &&
                            void 0 === this.updateAnimationKey_ &&
                            (this.updateAnimationKey_ = requestAnimationFrame(this.updateAnimations_.bind(this)));
                }
                calculateCenterRotate(e, t) {
                    let i;
                    const r = this.getCenterInternal();
                    return (
                        void 0 !== r &&
                            ((i = [r[0] - t[0], r[1] - t[1]]),
                            Py(i, e - this.getRotation()),
                            (function f5(n, e) {
                                (n[0] += +e[0]), (n[1] += +e[1]);
                            })(i, t)),
                        i
                    );
                }
                calculateCenterZoom(e, t) {
                    let i;
                    const r = this.getCenterInternal(),
                        o = this.getResolution();
                    return void 0 !== r && void 0 !== o && (i = [t[0] - (e * (t[0] - r[0])) / o, t[1] - (e * (t[1] - r[1])) / o]), i;
                }
                getViewportSize_(e) {
                    const t = this.viewportSize_;
                    if (e) {
                        const i = t[0],
                            r = t[1];
                        return [
                            Math.abs(i * Math.cos(e)) + Math.abs(r * Math.sin(e)),
                            Math.abs(i * Math.sin(e)) + Math.abs(r * Math.cos(e)),
                        ];
                    }
                    return t;
                }
                setViewportSize(e) {
                    (this.viewportSize_ = Array.isArray(e) ? e.slice() : [100, 100]), this.getAnimating() || this.resolveConstraints(0);
                }
                getCenter() {
                    const e = this.getCenterInternal();
                    return e && Hy(e, this.getProjection());
                }
                getCenterInternal() {
                    return this.get(ei.CENTER);
                }
                getConstraints() {
                    return this.constraints_;
                }
                getConstrainResolution() {
                    return this.get('constrainResolution');
                }
                getHints(e) {
                    return void 0 !== e ? ((e[0] = this.hints_[0]), (e[1] = this.hints_[1]), e) : this.hints_.slice();
                }
                calculateExtent(e) {
                    return Uy(this.calculateExtentInternal(e), this.getProjection());
                }
                calculateExtentInternal(e) {
                    e = e || this.getViewportSizeMinusPadding_();
                    const t = this.getCenterInternal();
                    pe(t, 1);
                    const i = this.getResolution();
                    pe(void 0 !== i, 2);
                    const r = this.getRotation();
                    return pe(void 0 !== r, 3), Ay(t, i, r, e);
                }
                getMaxResolution() {
                    return this.maxResolution_;
                }
                getMinResolution() {
                    return this.minResolution_;
                }
                getMaxZoom() {
                    return this.getZoomForResolution(this.minResolution_);
                }
                setMaxZoom(e) {
                    this.applyOptions_(this.getUpdatedOptions_({ maxZoom: e }));
                }
                getMinZoom() {
                    return this.getZoomForResolution(this.maxResolution_);
                }
                setMinZoom(e) {
                    this.applyOptions_(this.getUpdatedOptions_({ minZoom: e }));
                }
                setConstrainResolution(e) {
                    this.applyOptions_(this.getUpdatedOptions_({ constrainResolution: e }));
                }
                getProjection() {
                    return this.projection_;
                }
                getResolution() {
                    return this.get(ei.RESOLUTION);
                }
                getResolutions() {
                    return this.resolutions_;
                }
                getResolutionForExtent(e, t) {
                    return this.getResolutionForExtentInternal(Lo(e, this.getProjection()), t);
                }
                getResolutionForExtentInternal(e, t) {
                    t = t || this.getViewportSizeMinusPadding_();
                    const i = qe(e) / t[0],
                        r = wn(e) / t[1];
                    return Math.max(i, r);
                }
                getResolutionForValueFunction(e) {
                    e = e || 2;
                    const t = this.getConstrainedResolution(this.maxResolution_),
                        r = Math.log(t / this.minResolution_) / Math.log(e);
                    return function (o) {
                        return t / Math.pow(e, o * r);
                    };
                }
                getRotation() {
                    return this.get(ei.ROTATION);
                }
                getValueForResolutionFunction(e) {
                    const t = Math.log(e || 2),
                        i = this.getConstrainedResolution(this.maxResolution_),
                        o = Math.log(i / this.minResolution_) / t;
                    return function (s) {
                        return Math.log(i / s) / t / o;
                    };
                }
                getViewportSizeMinusPadding_(e) {
                    let t = this.getViewportSize_(e);
                    const i = this.padding_;
                    return i && (t = [t[0] - i[1] - i[3], t[1] - i[0] - i[2]]), t;
                }
                getState() {
                    const e = this.getProjection(),
                        t = this.getResolution(),
                        i = this.getRotation();
                    let r = this.getCenterInternal();
                    const o = this.padding_;
                    if (o) {
                        const s = this.getViewportSizeMinusPadding_();
                        r = ob(r, this.getViewportSize_(), [s[0] / 2 + o[3], s[1] / 2 + o[0]], t, i);
                    }
                    return {
                        center: r.slice(0),
                        projection: void 0 !== e ? e : null,
                        resolution: t,
                        nextCenter: this.nextCenter_,
                        nextResolution: this.nextResolution_,
                        nextRotation: this.nextRotation_,
                        rotation: i,
                        zoom: this.getZoom(),
                    };
                }
                getViewStateAndExtent() {
                    return { viewState: this.getState(), extent: this.calculateExtent() };
                }
                getZoom() {
                    let e;
                    const t = this.getResolution();
                    return void 0 !== t && (e = this.getZoomForResolution(t)), e;
                }
                getZoomForResolution(e) {
                    let i,
                        r,
                        t = this.minZoom_ || 0;
                    if (this.resolutions_) {
                        const o = Cy(this.resolutions_, e, 1);
                        (t = o), (i = this.resolutions_[o]), (r = o == this.resolutions_.length - 1 ? 2 : i / this.resolutions_[o + 1]);
                    } else (i = this.maxResolution_), (r = this.zoomFactor_);
                    return t + Math.log(i / e) / Math.log(r);
                }
                getResolutionForZoom(e) {
                    if (this.resolutions_) {
                        if (this.resolutions_.length <= 1) return 0;
                        const t = gt(Math.floor(e), 0, this.resolutions_.length - 2);
                        return this.resolutions_[t] / Math.pow(this.resolutions_[t] / this.resolutions_[t + 1], gt(e - t, 0, 1));
                    }
                    return this.maxResolution_ / Math.pow(this.zoomFactor_, e - this.minZoom_);
                }
                fit(e, t) {
                    let i;
                    if ((pe(Array.isArray(e) || 'function' == typeof e.getSimplifiedGeometry, 24), Array.isArray(e)))
                        pe(!gc(e), 25), (i = ib(Lo(e, this.getProjection())));
                    else if ('Circle' === e.getType()) {
                        const r = Lo(e.getExtent(), this.getProjection());
                        (i = ib(r)), i.rotate(this.getRotation(), Ao(r));
                    } else {
                        const r = Vy();
                        i = r ? e.clone().transform(r, this.getProjection()) : e;
                    }
                    this.fitInternal(i, t);
                }
                rotatedExtentForGeometry(e) {
                    const t = this.getRotation(),
                        i = Math.cos(t),
                        r = Math.sin(-t),
                        o = e.getFlatCoordinates(),
                        s = e.getStride();
                    let a = 1 / 0,
                        l = 1 / 0,
                        c = -1 / 0,
                        u = -1 / 0;
                    for (let d = 0, h = o.length; d < h; d += s) {
                        const f = o[d] * i - o[d + 1] * r,
                            m = o[d] * r + o[d + 1] * i;
                        (a = Math.min(a, f)), (l = Math.min(l, m)), (c = Math.max(c, f)), (u = Math.max(u, m));
                    }
                    return [a, l, c, u];
                }
                fitInternal(e, t) {
                    let i = (t = t || {}).size;
                    i || (i = this.getViewportSizeMinusPadding_());
                    const r = void 0 !== t.padding ? t.padding : [0, 0, 0, 0],
                        o = void 0 !== t.nearest && t.nearest;
                    let s;
                    s = void 0 !== t.minResolution ? t.minResolution : void 0 !== t.maxZoom ? this.getResolutionForZoom(t.maxZoom) : 0;
                    const a = this.rotatedExtentForGeometry(e);
                    let l = this.getResolutionForExtentInternal(a, [i[0] - r[1] - r[3], i[1] - r[0] - r[2]]);
                    (l = isNaN(l) ? s : Math.max(l, s)), (l = this.getConstrainedResolution(l, o ? 0 : 1));
                    const c = this.getRotation(),
                        u = Math.sin(c),
                        d = Math.cos(c),
                        h = Ao(a);
                    (h[0] += ((r[1] - r[3]) / 2) * l), (h[1] += ((r[0] - r[2]) / 2) * l);
                    const p = this.getConstrainedCenter([h[0] * d - h[1] * u, h[1] * d + h[0] * u], l),
                        g = t.callback ? t.callback : fa;
                    void 0 !== t.duration
                        ? this.animateInternal({ resolution: l, center: p, duration: t.duration, easing: t.easing }, g)
                        : ((this.targetResolution_ = l), (this.targetCenter_ = p), this.applyTargetState_(!1, !0), qh(g, !0));
                }
                centerOn(e, t, i) {
                    this.centerOnInternal(er(e, this.getProjection()), t, i);
                }
                centerOnInternal(e, t, i) {
                    this.setCenterInternal(ob(e, t, i, this.getResolution(), this.getRotation()));
                }
                calculateCenterShift(e, t, i, r) {
                    let o;
                    const s = this.padding_;
                    if (s && e) {
                        const a = this.getViewportSizeMinusPadding_(-i),
                            l = ob(e, r, [a[0] / 2 + s[3], a[1] / 2 + s[0]], t, i);
                        o = [e[0] - l[0], e[1] - l[1]];
                    }
                    return o;
                }
                isDef() {
                    return !!this.getCenterInternal() && void 0 !== this.getResolution();
                }
                adjustCenter(e) {
                    const t = Hy(this.targetCenter_, this.getProjection());
                    this.setCenter([t[0] + e[0], t[1] + e[1]]);
                }
                adjustCenterInternal(e) {
                    const t = this.targetCenter_;
                    this.setCenterInternal([t[0] + e[0], t[1] + e[1]]);
                }
                adjustResolution(e, t) {
                    (t = t && er(t, this.getProjection())), this.adjustResolutionInternal(e, t);
                }
                adjustResolutionInternal(e, t) {
                    const i = this.getAnimating() || this.getInteracting(),
                        r = this.getViewportSize_(this.getRotation()),
                        o = this.constraints_.resolution(this.targetResolution_ * e, 0, r, i);
                    t && (this.targetCenter_ = this.calculateCenterZoom(o, t)), (this.targetResolution_ *= e), this.applyTargetState_();
                }
                adjustZoom(e, t) {
                    this.adjustResolution(Math.pow(this.zoomFactor_, -e), t);
                }
                adjustRotation(e, t) {
                    t && (t = er(t, this.getProjection())), this.adjustRotationInternal(e, t);
                }
                adjustRotationInternal(e, t) {
                    const i = this.getAnimating() || this.getInteracting(),
                        r = this.constraints_.rotation(this.targetRotation_ + e, i);
                    t && (this.targetCenter_ = this.calculateCenterRotate(r, t)), (this.targetRotation_ += e), this.applyTargetState_();
                }
                setCenter(e) {
                    this.setCenterInternal(e && er(e, this.getProjection()));
                }
                setCenterInternal(e) {
                    (this.targetCenter_ = e), this.applyTargetState_();
                }
                setHint(e, t) {
                    return (this.hints_[e] += t), this.changed(), this.hints_[e];
                }
                setResolution(e) {
                    (this.targetResolution_ = e), this.applyTargetState_();
                }
                setRotation(e) {
                    (this.targetRotation_ = e), this.applyTargetState_();
                }
                setZoom(e) {
                    this.setResolution(this.getResolutionForZoom(e));
                }
                applyTargetState_(e, t) {
                    const i = this.getAnimating() || this.getInteracting() || t,
                        r = this.constraints_.rotation(this.targetRotation_, i),
                        o = this.getViewportSize_(r),
                        s = this.constraints_.resolution(this.targetResolution_, 0, o, i),
                        a = this.constraints_.center(this.targetCenter_, s, o, i, this.calculateCenterShift(this.targetCenter_, s, r, o));
                    this.get(ei.ROTATION) !== r && this.set(ei.ROTATION, r),
                        this.get(ei.RESOLUTION) !== s && (this.set(ei.RESOLUTION, s), this.set('zoom', this.getZoom(), !0)),
                        (!a || !this.get(ei.CENTER) || !Bh(this.get(ei.CENTER), a)) && this.set(ei.CENTER, a),
                        this.getAnimating() && !e && this.cancelAnimations(),
                        (this.cancelAnchor_ = void 0);
                }
                resolveConstraints(e, t, i) {
                    e = void 0 !== e ? e : 200;
                    const r = t || 0,
                        o = this.constraints_.rotation(this.targetRotation_),
                        s = this.getViewportSize_(o),
                        a = this.constraints_.resolution(this.targetResolution_, r, s),
                        l = this.constraints_.center(this.targetCenter_, a, s, !1, this.calculateCenterShift(this.targetCenter_, a, o, s));
                    if (0 === e && !this.cancelAnchor_)
                        return (
                            (this.targetResolution_ = a),
                            (this.targetRotation_ = o),
                            (this.targetCenter_ = l),
                            void this.applyTargetState_()
                        );
                    (i = i || (0 === e ? this.cancelAnchor_ : void 0)),
                        (this.cancelAnchor_ = void 0),
                        (this.getResolution() !== a ||
                            this.getRotation() !== o ||
                            !this.getCenterInternal() ||
                            !Bh(this.getCenterInternal(), l)) &&
                            (this.getAnimating() && this.cancelAnimations(),
                            this.animateInternal({ rotation: o, center: l, resolution: a, duration: e, easing: Ea, anchor: i }));
                }
                beginInteraction() {
                    this.resolveConstraints(0), this.setHint(1, 1);
                }
                endInteraction(e, t, i) {
                    (i = i && er(i, this.getProjection())), this.endInteractionInternal(e, t, i);
                }
                endInteractionInternal(e, t, i) {
                    this.getInteracting() && (this.setHint(1, -1), this.resolveConstraints(e, t, i));
                }
                getConstrainedCenter(e, t) {
                    const i = this.getViewportSize_(this.getRotation());
                    return this.constraints_.center(e, t || this.getResolution(), i);
                }
                getConstrainedZoom(e, t) {
                    const i = this.getResolutionForZoom(e);
                    return this.getZoomForResolution(this.getConstrainedResolution(i, t));
                }
                getConstrainedResolution(e, t) {
                    t = t || 0;
                    const i = this.getViewportSize_(this.getRotation());
                    return this.constraints_.resolution(e, t, i);
                }
            };
            function sb(n, e) {
                if (!n.visible) return !1;
                const t = e.resolution;
                if (t < n.minResolution || t >= n.maxResolution) return !1;
                const i = e.zoom;
                return i > n.minZoom && i <= n.maxZoom;
            }
            const Xh = class a4 extends JM {
                constructor(e) {
                    const t = Object.assign({}, e);
                    delete t.source,
                        super(t),
                        (this.mapPrecomposeKey_ = null),
                        (this.mapRenderKey_ = null),
                        (this.sourceChangeKey_ = null),
                        (this.renderer_ = null),
                        (this.sourceReady_ = !1),
                        (this.rendered = !1),
                        e.render && (this.render = e.render),
                        e.map && this.setMap(e.map),
                        this.addChangeListener('source', this.handleSourcePropertyChange_),
                        this.setSource(e.source ? e.source : null);
                }
                getLayersArray(e) {
                    return (e = e || []).push(this), e;
                }
                getLayerStatesArray(e) {
                    return (e = e || []).push(this.getLayerState()), e;
                }
                getSource() {
                    return this.get('source') || null;
                }
                getRenderSource() {
                    return this.getSource();
                }
                getSourceState() {
                    const e = this.getSource();
                    return e ? e.getState() : 'undefined';
                }
                handleSourceChange_() {
                    this.changed(),
                        !this.sourceReady_ &&
                            'ready' === this.getSource().getState() &&
                            ((this.sourceReady_ = !0), this.dispatchEvent('sourceready'));
                }
                handleSourcePropertyChange_() {
                    this.sourceChangeKey_ && (je(this.sourceChangeKey_), (this.sourceChangeKey_ = null)), (this.sourceReady_ = !1);
                    const e = this.getSource();
                    e &&
                        ((this.sourceChangeKey_ = me(e, 'change', this.handleSourceChange_, this)),
                        'ready' === e.getState() &&
                            ((this.sourceReady_ = !0),
                            setTimeout(() => {
                                this.dispatchEvent('sourceready');
                            }, 0))),
                        this.changed();
                }
                getFeatures(e) {
                    return this.renderer_ ? this.renderer_.getFeatures(e) : Promise.resolve([]);
                }
                getData(e) {
                    return this.renderer_ && this.rendered ? this.renderer_.getData(e) : null;
                }
                isVisible(e) {
                    let t;
                    const i = this.getMapInternal();
                    let r;
                    !e && i && (e = i.getView()),
                        (t = e instanceof Si ? { viewState: e.getState(), extent: e.calculateExtent() } : e),
                        !t.layerStatesArray && i && (t.layerStatesArray = i.getLayerGroup().getLayerStatesArray()),
                        (r = t.layerStatesArray ? t.layerStatesArray.find((s) => s.layer === this) : this.getLayerState());
                    const o = this.getExtent();
                    return sb(r, t.viewState) && (!o || dn(o, t.extent));
                }
                getAttributions(e) {
                    if (!this.isVisible(e)) return [];
                    let t;
                    const i = this.getSource();
                    if ((i && (t = i.getAttributions()), !t)) return [];
                    let o = t(e instanceof Si ? e.getViewStateAndExtent() : e);
                    return Array.isArray(o) || (o = [o]), o;
                }
                render(e, t) {
                    const i = this.getRenderer();
                    return i.prepareFrame(e) ? ((this.rendered = !0), i.renderFrame(e, t)) : null;
                }
                unrender() {
                    this.rendered = !1;
                }
                setMapInternal(e) {
                    e || this.unrender(), this.set('map', e);
                }
                getMapInternal() {
                    return this.get('map');
                }
                setMap(e) {
                    this.mapPrecomposeKey_ && (je(this.mapPrecomposeKey_), (this.mapPrecomposeKey_ = null)),
                        e || this.changed(),
                        this.mapRenderKey_ && (je(this.mapRenderKey_), (this.mapRenderKey_ = null)),
                        e &&
                            ((this.mapPrecomposeKey_ = me(
                                e,
                                'precompose',
                                function (t) {
                                    const r = t.frameState.layerStatesArray,
                                        o = this.getLayerState(!1);
                                    pe(
                                        !r.some(function (s) {
                                            return s.layer === o.layer;
                                        }),
                                        67,
                                    ),
                                        r.push(o);
                                },
                                this,
                            )),
                            (this.mapRenderKey_ = me(this, 'change', e.render, e)),
                            this.changed());
                }
                setSource(e) {
                    this.set('source', e);
                }
                getRenderer() {
                    return this.renderer_ || (this.renderer_ = this.createRenderer()), this.renderer_;
                }
                hasRenderer() {
                    return !!this.renderer_;
                }
                createRenderer() {
                    return null;
                }
                disposeInternal() {
                    this.renderer_ && (this.renderer_.dispose(), delete this.renderer_), this.setSource(null), super.disposeInternal();
                }
            };
            function c4(n, e) {
                Ph.expire();
            }
            const u4 = class l4 extends wy {
                    constructor(e) {
                        super(), (this.map_ = e);
                    }
                    dispatchRenderEvent(e, t) {
                        J();
                    }
                    calculateMatrices2D(e) {
                        const t = e.viewState,
                            i = e.coordinateToPixelTransform,
                            r = e.pixelToCoordinateTransform;
                        Qi(i, e.size[0] / 2, e.size[1] / 2, 1 / t.resolution, -1 / t.resolution, -t.rotation, -t.center[0], -t.center[1]),
                            Ch(r, i);
                    }
                    forEachFeatureAtCoordinate(e, t, i, r, o, s, a, l) {
                        let c;
                        const u = t.viewState;
                        function d(v, E, R, N) {
                            return o.call(s, E, v ? R : null, N);
                        }
                        const h = u.projection,
                            f = sR(e.slice(), h),
                            m = [[0, 0]];
                        if (h.canWrapX() && r) {
                            const E = qe(h.getExtent());
                            m.push([-E, 0], [E, 0]);
                        }
                        const p = t.layerStatesArray,
                            g = p.length,
                            y = [],
                            _ = [];
                        for (let v = 0; v < m.length; v++)
                            for (let E = g - 1; E >= 0; --E) {
                                const R = p[E],
                                    N = R.layer;
                                if (N.hasRenderer() && sb(R, u) && a.call(l, N)) {
                                    const k = N.getRenderer(),
                                        U = N.getSource();
                                    if (k && U) {
                                        const Y = U.getWrapX() ? f : e,
                                            be = d.bind(null, R.managed);
                                        (_[0] = Y[0] + m[v][0]),
                                            (_[1] = Y[1] + m[v][1]),
                                            (c = k.forEachFeatureAtCoordinate(_, t, i, be, y));
                                    }
                                    if (c) return c;
                                }
                            }
                        if (0 === y.length) return;
                        const b = 1 / y.length;
                        return (
                            y.forEach((v, E) => (v.distanceSq += E * b)),
                            y.sort((v, E) => v.distanceSq - E.distanceSq),
                            y.some((v) => (c = v.callback(v.feature, v.layer, v.geometry))),
                            c
                        );
                    }
                    hasFeatureAtCoordinate(e, t, i, r, o, s) {
                        return void 0 !== this.forEachFeatureAtCoordinate(e, t, i, r, ha, this, o, s);
                    }
                    getMap() {
                        return this.map_;
                    }
                    renderFrame(e) {
                        J();
                    }
                    flushDeclutterItems(e) {}
                    scheduleExpireIconCache(e) {
                        Ph.canExpireCache() && e.postRenderFunctions.push(c4);
                    }
                },
                PR = class d4 extends Ci {
                    constructor(e, t, i, r) {
                        super(e), (this.inversePixelTransform = t), (this.frameState = i), (this.context = r);
                    }
                },
                Kh = 'ol-hidden',
                wa = 'ol-unselectable',
                kR = 'ol-unsupported',
                Cc = 'ol-control',
                FR = 'ol-collapsed',
                h4 = new RegExp(
                    [
                        '^\\s*(?=(?:(?:[-a-z]+\\s*){0,2}(italic|oblique))?)',
                        '(?=(?:(?:[-a-z]+\\s*){0,2}(small-caps))?)',
                        '(?=(?:(?:[-a-z]+\\s*){0,2}(bold(?:er)?|lighter|[1-9]00 ))?)',
                        '(?:(?:normal|\\1|\\2|\\3)\\s*){0,3}((?:xx?-)?',
                        '(?:small|large)|medium|smaller|larger|[\\.\\d]+(?:\\%|in|[cem]m|ex|p[ctx]))',
                        '(?:\\s*\\/\\s*(normal|[\\.\\d]+(?:\\%|in|[cem]m|ex|p[ctx])?))',
                        '?\\s*([-,\\"\\\'\\sa-z]+?)\\s*$',
                    ].join(''),
                    'i',
                ),
                LR = ['style', 'variant', 'weight', 'size', 'lineHeight', 'family'],
                BR = function (n) {
                    const e = n.match(h4);
                    if (!e) return null;
                    const t = { lineHeight: 'normal', size: '1.2em', style: 'normal', weight: 'normal', variant: 'normal' };
                    for (let i = 0, r = LR.length; i < r; ++i) {
                        const o = e[i + 1];
                        void 0 !== o && (t[LR[i]] = o);
                    }
                    return (t.families = t.family.split(/,\s?/)), t;
                };
            function Zt(n, e, t, i) {
                let r;
                return (
                    (r = t && t.length ? t.shift() : Dy ? new OffscreenCanvas(n || 300, e || 300) : document.createElement('canvas')),
                    n && (r.width = n),
                    e && (r.height = e),
                    r.getContext('2d', i)
                );
            }
            function Zh(n) {
                const e = n.canvas;
                (e.width = 1), (e.height = 1), n.clearRect(0, 0, 1, 1);
            }
            function Qh(n, e) {
                const t = e.parentNode;
                t && t.replaceChild(n, e);
            }
            function ab(n) {
                return n && n.parentNode ? n.parentNode.removeChild(n) : null;
            }
            const jR = '10px sans-serif',
                hn = '#000',
                Jh = 'round',
                tr = [],
                Ca = 'round',
                Ic = '#000',
                xc = 'center',
                ef = 'middle',
                zo = [0, 0, 0, 0],
                ir = new Di();
            let lb,
                Da = null;
            const cb = {},
                p4 = (function () {
                    const e = '32px ',
                        t = ['monospace', 'serif'],
                        i = t.length,
                        r = 'wmytzilWMYTZIL@#/&?$%10\uf013';
                    let o, s;
                    function a(c, u, d) {
                        let h = !0;
                        for (let f = 0; f < i; ++f) {
                            const m = t[f];
                            if (((s = tf(c + ' ' + u + ' ' + e + m, r)), d != m)) {
                                const p = tf(c + ' ' + u + ' ' + e + d + ',' + m, r);
                                h = h && p != s;
                            }
                        }
                        return !!h;
                    }
                    function l() {
                        let c = !0;
                        const u = ir.getKeys();
                        for (let d = 0, h = u.length; d < h; ++d) {
                            const f = u[d];
                            ir.get(f) < 100 &&
                                (a.apply(this, f.split('\n'))
                                    ? (hc(cb), (Da = null), (lb = void 0), ir.set(f, 100))
                                    : (ir.set(f, ir.get(f) + 1, !0), (c = !1)));
                        }
                        c && (clearInterval(o), (o = void 0));
                    }
                    return function (c) {
                        const u = BR(c);
                        if (!u) return;
                        const d = u.families;
                        for (let h = 0, f = d.length; h < f; ++h) {
                            const m = d[h],
                                p = u.style + '\n' + u.weight + '\n' + m;
                            void 0 === ir.get(p) &&
                                (ir.set(p, 100, !0),
                                a(u.style, u.weight, m) || (ir.set(p, 0, !0), void 0 === o && (o = setInterval(l, 32))));
                        }
                    };
                })(),
                g4 = (function () {
                    let n;
                    return function (e) {
                        let t = cb[e];
                        if (null == t) {
                            if (Dy) {
                                const i = BR(e),
                                    r = VR(e, '\u017dg');
                                t =
                                    (isNaN(Number(i.lineHeight)) ? 1.2 : Number(i.lineHeight)) *
                                    (r.actualBoundingBoxAscent + r.actualBoundingBoxDescent);
                            } else
                                n ||
                                    ((n = document.createElement('div')),
                                    (n.innerHTML = 'M'),
                                    (n.style.minHeight = '0'),
                                    (n.style.maxHeight = 'none'),
                                    (n.style.height = 'auto'),
                                    (n.style.padding = '0'),
                                    (n.style.border = 'none'),
                                    (n.style.position = 'absolute'),
                                    (n.style.display = 'block'),
                                    (n.style.left = '-99999px')),
                                    (n.style.font = e),
                                    document.body.appendChild(n),
                                    (t = n.offsetHeight),
                                    document.body.removeChild(n);
                            cb[e] = t;
                        }
                        return t;
                    };
                })();
            function VR(n, e) {
                return Da || (Da = Zt(1, 1)), n != lb && ((Da.font = n), (lb = Da.font)), Da.measureText(e);
            }
            function tf(n, e) {
                return VR(n, e).width;
            }
            function HR(n, e, t) {
                if (e in t) return t[e];
                const i = e.split('\n').reduce((r, o) => Math.max(r, tf(n, o)), 0);
                return (t[e] = i), i;
            }
            const E4 = class v4 extends u4 {
                constructor(e) {
                    super(e),
                        (this.fontChangeListenerKey_ = me(ir, 'propertychange', e.redrawText.bind(e))),
                        (this.element_ = document.createElement('div'));
                    const t = this.element_.style;
                    (t.position = 'absolute'),
                        (t.width = '100%'),
                        (t.height = '100%'),
                        (t.zIndex = '0'),
                        (this.element_.className = wa + ' ol-layers');
                    const i = e.getViewport();
                    i.insertBefore(this.element_, i.firstChild || null),
                        (this.children_ = []),
                        (this.renderedVisible_ = !0),
                        (this.declutterLayers_ = []);
                }
                dispatchRenderEvent(e, t) {
                    const i = this.getMap();
                    if (i.hasListener(e)) {
                        const r = new PR(e, void 0, t);
                        i.dispatchEvent(r);
                    }
                }
                disposeInternal() {
                    je(this.fontChangeListenerKey_), this.element_.parentNode.removeChild(this.element_), super.disposeInternal();
                }
                renderFrame(e) {
                    if (!e) return void (this.renderedVisible_ && ((this.element_.style.display = 'none'), (this.renderedVisible_ = !1)));
                    this.calculateMatrices2D(e), this.dispatchRenderEvent('precompose', e);
                    const t = e.layerStatesArray.sort(function (s, a) {
                            return s.zIndex - a.zIndex;
                        }),
                        i = e.viewState;
                    this.children_.length = 0;
                    const r = this.declutterLayers_;
                    r.length = 0;
                    let o = null;
                    for (let s = 0, a = t.length; s < a; ++s) {
                        const l = t[s];
                        e.layerIndex = s;
                        const c = l.layer,
                            u = c.getSourceState();
                        if (!sb(l, i) || ('ready' != u && 'undefined' != u)) {
                            c.unrender();
                            continue;
                        }
                        const d = c.render(e, o);
                        d && (d !== o && (this.children_.push(d), (o = d)), 'getDeclutter' in c && r.push(c));
                    }
                    this.flushDeclutterItems(e),
                        (function m4(n, e) {
                            const t = n.childNodes;
                            for (let i = 0; ; ++i) {
                                const r = t[i],
                                    o = e[i];
                                if (!r && !o) break;
                                if (r !== o) {
                                    if (!r) {
                                        n.appendChild(o);
                                        continue;
                                    }
                                    if (!o) {
                                        n.removeChild(r), --i;
                                        continue;
                                    }
                                    n.insertBefore(o, r);
                                }
                            }
                        })(this.element_, this.children_),
                        this.dispatchRenderEvent('postcompose', e),
                        this.renderedVisible_ || ((this.element_.style.display = ''), (this.renderedVisible_ = !0)),
                        this.scheduleExpireIconCache(e);
                }
                flushDeclutterItems(e) {
                    const t = this.declutterLayers_;
                    for (let i = t.length - 1; i >= 0; --i) t[i].renderDeclutter(e);
                    t.length = 0;
                }
            };
            class Br extends Ci {
                constructor(e, t) {
                    super(e), (this.layer = t);
                }
            }
            class db extends JM {
                constructor(e) {
                    e = e || {};
                    const t = Object.assign({}, e);
                    delete t.layers;
                    let i = e.layers;
                    super(t),
                        (this.layersListenerKeys_ = []),
                        (this.listenerKeys_ = {}),
                        this.addChangeListener('layers', this.handleLayersChanged_),
                        i
                            ? Array.isArray(i)
                                ? (i = new Ii(i.slice(), { unique: !0 }))
                                : pe('function' == typeof i.getArray, 43)
                            : (i = new Ii(void 0, { unique: !0 })),
                        this.setLayers(i);
                }
                handleLayerChange_() {
                    this.changed();
                }
                handleLayersChanged_() {
                    this.layersListenerKeys_.forEach(je), (this.layersListenerKeys_.length = 0);
                    const e = this.getLayers();
                    this.layersListenerKeys_.push(
                        me(e, 'add', this.handleLayersAdd_, this),
                        me(e, 'remove', this.handleLayersRemove_, this),
                    );
                    for (const i in this.listenerKeys_) this.listenerKeys_[i].forEach(je);
                    hc(this.listenerKeys_);
                    const t = e.getArray();
                    for (let i = 0, r = t.length; i < r; i++) {
                        const o = t[i];
                        this.registerLayerListeners_(o), this.dispatchEvent(new Br('addlayer', o));
                    }
                    this.changed();
                }
                registerLayerListeners_(e) {
                    const t = [me(e, 'propertychange', this.handleLayerChange_, this), me(e, 'change', this.handleLayerChange_, this)];
                    e instanceof db &&
                        t.push(
                            me(e, 'addlayer', this.handleLayerGroupAdd_, this),
                            me(e, 'removelayer', this.handleLayerGroupRemove_, this),
                        ),
                        (this.listenerKeys_[Se(e)] = t);
                }
                handleLayerGroupAdd_(e) {
                    this.dispatchEvent(new Br('addlayer', e.layer));
                }
                handleLayerGroupRemove_(e) {
                    this.dispatchEvent(new Br('removelayer', e.layer));
                }
                handleLayersAdd_(e) {
                    const t = e.element;
                    this.registerLayerListeners_(t), this.dispatchEvent(new Br('addlayer', t)), this.changed();
                }
                handleLayersRemove_(e) {
                    const t = e.element,
                        i = Se(t);
                    this.listenerKeys_[i].forEach(je),
                        delete this.listenerKeys_[i],
                        this.dispatchEvent(new Br('removelayer', t)),
                        this.changed();
                }
                getLayers() {
                    return this.get('layers');
                }
                setLayers(e) {
                    const t = this.getLayers();
                    if (t) {
                        const i = t.getArray();
                        for (let r = 0, o = i.length; r < o; ++r) this.dispatchEvent(new Br('removelayer', i[r]));
                    }
                    this.set('layers', e);
                }
                getLayersArray(e) {
                    return (
                        (e = void 0 !== e ? e : []),
                        this.getLayers().forEach(function (t) {
                            t.getLayersArray(e);
                        }),
                        e
                    );
                }
                getLayerStatesArray(e) {
                    const t = void 0 !== e ? e : [],
                        i = t.length;
                    this.getLayers().forEach(function (s) {
                        s.getLayerStatesArray(t);
                    });
                    const r = this.getLayerState();
                    let o = r.zIndex;
                    !e && void 0 === r.zIndex && (o = 0);
                    for (let s = i, a = t.length; s < a; s++) {
                        const l = t[s];
                        (l.opacity *= r.opacity),
                            (l.visible = l.visible && r.visible),
                            (l.maxResolution = Math.min(l.maxResolution, r.maxResolution)),
                            (l.minResolution = Math.max(l.minResolution, r.minResolution)),
                            (l.minZoom = Math.max(l.minZoom, r.minZoom)),
                            (l.maxZoom = Math.min(l.maxZoom, r.maxZoom)),
                            void 0 !== r.extent && (l.extent = void 0 !== l.extent ? _a(l.extent, r.extent) : r.extent),
                            void 0 === l.zIndex && (l.zIndex = o);
                    }
                    return t;
                }
                getSourceState() {
                    return 'ready';
                }
            }
            const nf = db,
                Ia = class w4 extends Ci {
                    constructor(e, t, i) {
                        super(e), (this.map = t), (this.frameState = void 0 !== i ? i : null);
                    }
                },
                jr = class C4 extends Ia {
                    constructor(e, t, i, r, o, s) {
                        super(e, t, o),
                            (this.originalEvent = i),
                            (this.pixel_ = null),
                            (this.coordinate_ = null),
                            (this.dragging = void 0 !== r && r),
                            (this.activePointers = s);
                    }
                    get pixel() {
                        return this.pixel_ || (this.pixel_ = this.map.getEventPixel(this.originalEvent)), this.pixel_;
                    }
                    set pixel(e) {
                        this.pixel_ = e;
                    }
                    get coordinate() {
                        return this.coordinate_ || (this.coordinate_ = this.map.getCoordinateFromPixel(this.pixel)), this.coordinate_;
                    }
                    set coordinate(e) {
                        this.coordinate_ = e;
                    }
                    preventDefault() {
                        super.preventDefault(), 'preventDefault' in this.originalEvent && this.originalEvent.preventDefault();
                    }
                    stopPropagation() {
                        super.stopPropagation(), 'stopPropagation' in this.originalEvent && this.originalEvent.stopPropagation();
                    }
                },
                tt = {
                    SINGLECLICK: 'singleclick',
                    CLICK: 'click',
                    DBLCLICK: 'dblclick',
                    POINTERDRAG: 'pointerdrag',
                    POINTERMOVE: 'pointermove',
                    POINTERDOWN: 'pointerdown',
                    POINTERUP: 'pointerup',
                    POINTEROVER: 'pointerover',
                    POINTEROUT: 'pointerout',
                    POINTERENTER: 'pointerenter',
                    POINTERLEAVE: 'pointerleave',
                    POINTERCANCEL: 'pointercancel',
                },
                I4 = class D4 extends fc {
                    constructor(e, t) {
                        super(e),
                            (this.map_ = e),
                            (this.emulateClicks_ = !1),
                            (this.dragging_ = !1),
                            (this.dragListenerKeys_ = []),
                            (this.moveTolerance_ = void 0 === t ? 1 : t),
                            (this.down_ = null);
                        const i = this.map_.getViewport();
                        (this.activePointers_ = []),
                            (this.trackedTouches_ = {}),
                            (this.element_ = i),
                            (this.pointerdownListenerKey_ = me(i, 'pointerdown', this.handlePointerDown_, this)),
                            (this.relayedListenerKey_ = me(i, 'pointermove', this.relayMoveEvent_, this)),
                            (this.boundHandleTouchMove_ = this.handleTouchMove_.bind(this)),
                            this.element_.addEventListener('touchmove', this.boundHandleTouchMove_, !!FM && { passive: !1 });
                    }
                    emulateClick_(e) {
                        let t = new jr(tt.CLICK, this.map_, e);
                        this.dispatchEvent(t),
                            void 0 !== this.clickTimeoutId_
                                ? (clearTimeout(this.clickTimeoutId_),
                                  (this.clickTimeoutId_ = void 0),
                                  (t = new jr(tt.DBLCLICK, this.map_, e)),
                                  this.dispatchEvent(t))
                                : (this.clickTimeoutId_ = setTimeout(() => {
                                      this.clickTimeoutId_ = void 0;
                                      const i = new jr(tt.SINGLECLICK, this.map_, e);
                                      this.dispatchEvent(i);
                                  }, 250));
                    }
                    updateActivePointers_(e) {
                        const t = e,
                            i = t.pointerId;
                        if (t.type == tt.POINTERUP || t.type == tt.POINTERCANCEL) {
                            delete this.trackedTouches_[i];
                            for (const r in this.trackedTouches_)
                                if (this.trackedTouches_[r].target !== t.target) {
                                    delete this.trackedTouches_[r];
                                    break;
                                }
                        } else (t.type == tt.POINTERDOWN || t.type == tt.POINTERMOVE) && (this.trackedTouches_[i] = t);
                        this.activePointers_ = Object.values(this.trackedTouches_);
                    }
                    handlePointerUp_(e) {
                        this.updateActivePointers_(e);
                        const t = new jr(tt.POINTERUP, this.map_, e, void 0, void 0, this.activePointers_);
                        this.dispatchEvent(t),
                            this.emulateClicks_ &&
                                !t.defaultPrevented &&
                                !this.dragging_ &&
                                this.isMouseActionButton_(e) &&
                                this.emulateClick_(this.down_),
                            0 === this.activePointers_.length &&
                                (this.dragListenerKeys_.forEach(je),
                                (this.dragListenerKeys_.length = 0),
                                (this.dragging_ = !1),
                                (this.down_ = null));
                    }
                    isMouseActionButton_(e) {
                        return 0 === e.button;
                    }
                    handlePointerDown_(e) {
                        (this.emulateClicks_ = 0 === this.activePointers_.length), this.updateActivePointers_(e);
                        const t = new jr(tt.POINTERDOWN, this.map_, e, void 0, void 0, this.activePointers_);
                        if (
                            (this.dispatchEvent(t),
                            (this.down_ = new PointerEvent(e.type, e)),
                            Object.defineProperty(this.down_, 'target', { writable: !1, value: e.target }),
                            0 === this.dragListenerKeys_.length)
                        ) {
                            const i = this.map_.getOwnerDocument();
                            this.dragListenerKeys_.push(
                                me(i, tt.POINTERMOVE, this.handlePointerMove_, this),
                                me(i, tt.POINTERUP, this.handlePointerUp_, this),
                                me(this.element_, tt.POINTERCANCEL, this.handlePointerUp_, this),
                            ),
                                this.element_.getRootNode &&
                                    this.element_.getRootNode() !== i &&
                                    this.dragListenerKeys_.push(me(this.element_.getRootNode(), tt.POINTERUP, this.handlePointerUp_, this));
                        }
                    }
                    handlePointerMove_(e) {
                        if (this.isMoving_(e)) {
                            this.updateActivePointers_(e), (this.dragging_ = !0);
                            const t = new jr(tt.POINTERDRAG, this.map_, e, this.dragging_, void 0, this.activePointers_);
                            this.dispatchEvent(t);
                        }
                    }
                    relayMoveEvent_(e) {
                        this.originalPointerMoveEvent_ = e;
                        const t = !(!this.down_ || !this.isMoving_(e));
                        this.dispatchEvent(new jr(tt.POINTERMOVE, this.map_, e, t));
                    }
                    handleTouchMove_(e) {
                        const t = this.originalPointerMoveEvent_;
                        (!t || t.defaultPrevented) && ('boolean' != typeof e.cancelable || !0 === e.cancelable) && e.preventDefault();
                    }
                    isMoving_(e) {
                        return (
                            this.dragging_ ||
                            Math.abs(e.clientX - this.down_.clientX) > this.moveTolerance_ ||
                            Math.abs(e.clientY - this.down_.clientY) > this.moveTolerance_
                        );
                    }
                    disposeInternal() {
                        this.relayedListenerKey_ && (je(this.relayedListenerKey_), (this.relayedListenerKey_ = null)),
                            this.element_.removeEventListener('touchmove', this.boundHandleTouchMove_),
                            this.pointerdownListenerKey_ && (je(this.pointerdownListenerKey_), (this.pointerdownListenerKey_ = null)),
                            this.dragListenerKeys_.forEach(je),
                            (this.dragListenerKeys_.length = 0),
                            (this.element_ = null),
                            super.disposeInternal();
                    }
                },
                rf = 1 / 0,
                S4 = class x4 {
                    constructor(e, t) {
                        (this.priorityFunction_ = e),
                            (this.keyFunction_ = t),
                            (this.elements_ = []),
                            (this.priorities_ = []),
                            (this.queuedElements_ = {});
                    }
                    clear() {
                        (this.elements_.length = 0), (this.priorities_.length = 0), hc(this.queuedElements_);
                    }
                    dequeue() {
                        const e = this.elements_,
                            t = this.priorities_,
                            i = e[0];
                        1 == e.length ? ((e.length = 0), (t.length = 0)) : ((e[0] = e.pop()), (t[0] = t.pop()), this.siftUp_(0));
                        const r = this.keyFunction_(i);
                        return delete this.queuedElements_[r], i;
                    }
                    enqueue(e) {
                        pe(!(this.keyFunction_(e) in this.queuedElements_), 31);
                        const t = this.priorityFunction_(e);
                        return (
                            t != rf &&
                            (this.elements_.push(e),
                            this.priorities_.push(t),
                            (this.queuedElements_[this.keyFunction_(e)] = !0),
                            this.siftDown_(0, this.elements_.length - 1),
                            !0)
                        );
                    }
                    getCount() {
                        return this.elements_.length;
                    }
                    getLeftChildIndex_(e) {
                        return 2 * e + 1;
                    }
                    getRightChildIndex_(e) {
                        return 2 * e + 2;
                    }
                    getParentIndex_(e) {
                        return (e - 1) >> 1;
                    }
                    heapify_() {
                        let e;
                        for (e = (this.elements_.length >> 1) - 1; e >= 0; e--) this.siftUp_(e);
                    }
                    isEmpty() {
                        return 0 === this.elements_.length;
                    }
                    isKeyQueued(e) {
                        return e in this.queuedElements_;
                    }
                    isQueued(e) {
                        return this.isKeyQueued(this.keyFunction_(e));
                    }
                    siftUp_(e) {
                        const t = this.elements_,
                            i = this.priorities_,
                            r = t.length,
                            o = t[e],
                            s = i[e],
                            a = e;
                        for (; e < r >> 1; ) {
                            const l = this.getLeftChildIndex_(e),
                                c = this.getRightChildIndex_(e),
                                u = c < r && i[c] < i[l] ? c : l;
                            (t[e] = t[u]), (i[e] = i[u]), (e = u);
                        }
                        (t[e] = o), (i[e] = s), this.siftDown_(a, e);
                    }
                    siftDown_(e, t) {
                        const i = this.elements_,
                            r = this.priorities_,
                            o = i[t],
                            s = r[t];
                        for (; t > e; ) {
                            const a = this.getParentIndex_(t);
                            if (!(r[a] > s)) break;
                            (i[t] = i[a]), (r[t] = r[a]), (t = a);
                        }
                        (i[t] = o), (r[t] = s);
                    }
                    reprioritize() {
                        const e = this.priorityFunction_,
                            t = this.elements_,
                            i = this.priorities_;
                        let r = 0;
                        const o = t.length;
                        let s, a, l;
                        for (a = 0; a < o; ++a)
                            (s = t[a]),
                                (l = e(s)),
                                l == rf ? delete this.queuedElements_[this.keyFunction_(s)] : ((i[r] = l), (t[r++] = s));
                        (t.length = r), (i.length = r), this.heapify_();
                    }
                },
                M4 = class T4 extends S4 {
                    constructor(e, t) {
                        super(
                            function (i) {
                                return e.apply(null, i);
                            },
                            function (i) {
                                return i[0].getKey();
                            },
                        ),
                            (this.boundHandleTileChange_ = this.handleTileChange.bind(this)),
                            (this.tileChangeCallback_ = t),
                            (this.tilesLoading_ = 0),
                            (this.tilesLoadingKeys_ = {});
                    }
                    enqueue(e) {
                        const t = super.enqueue(e);
                        return t && e[0].addEventListener('change', this.boundHandleTileChange_), t;
                    }
                    getTilesLoading() {
                        return this.tilesLoading_;
                    }
                    handleTileChange(e) {
                        const t = e.target,
                            i = t.getState();
                        if (2 === i || 3 === i || 4 === i) {
                            3 !== i && t.removeEventListener('change', this.boundHandleTileChange_);
                            const r = t.getKey();
                            r in this.tilesLoadingKeys_ && (delete this.tilesLoadingKeys_[r], --this.tilesLoading_),
                                this.tileChangeCallback_();
                        }
                    }
                    loadMoreTiles(e, t) {
                        let r,
                            o,
                            s,
                            i = 0;
                        for (; this.tilesLoading_ < e && i < t && this.getCount() > 0; )
                            (o = this.dequeue()[0]),
                                (s = o.getKey()),
                                (r = o.getState()),
                                0 === r &&
                                    !(s in this.tilesLoadingKeys_) &&
                                    ((this.tilesLoadingKeys_[s] = !0), ++this.tilesLoading_, ++i, o.load());
                    }
                },
                Tc = class A4 extends Di {
                    constructor(e) {
                        super();
                        const t = e.element;
                        t && !e.target && !t.style.pointerEvents && (t.style.pointerEvents = 'auto'),
                            (this.element = t || null),
                            (this.target_ = null),
                            (this.map_ = null),
                            (this.listenerKeys = []),
                            e.render && (this.render = e.render),
                            e.target && this.setTarget(e.target);
                    }
                    disposeInternal() {
                        ab(this.element), super.disposeInternal();
                    }
                    getMap() {
                        return this.map_;
                    }
                    setMap(e) {
                        this.map_ && ab(this.element);
                        for (let t = 0, i = this.listenerKeys.length; t < i; ++t) je(this.listenerKeys[t]);
                        (this.listenerKeys.length = 0),
                            (this.map_ = e),
                            e &&
                                ((this.target_ ? this.target_ : e.getOverlayContainerStopEvent()).appendChild(this.element),
                                this.render !== fa && this.listenerKeys.push(me(e, 'postrender', this.render, this)),
                                e.render());
                    }
                    render(e) {}
                    setTarget(e) {
                        this.target_ = 'string' == typeof e ? document.getElementById(e) : e;
                    }
                },
                UR = class O4 extends Tc {
                    constructor(e) {
                        (e = e || {}),
                            super({ element: document.createElement('div'), render: e.render, target: e.target }),
                            (this.ulElement_ = document.createElement('ul')),
                            (this.collapsed_ = void 0 === e.collapsed || e.collapsed),
                            (this.userCollapsed_ = this.collapsed_),
                            (this.overrideCollapsible_ = void 0 !== e.collapsible),
                            (this.collapsible_ = void 0 === e.collapsible || e.collapsible),
                            this.collapsible_ || (this.collapsed_ = !1);
                        const t = void 0 !== e.className ? e.className : 'ol-attribution',
                            i = void 0 !== e.tipLabel ? e.tipLabel : 'Attributions',
                            r = void 0 !== e.expandClassName ? e.expandClassName : t + '-expand',
                            o = void 0 !== e.collapseLabel ? e.collapseLabel : '\u203a',
                            s = void 0 !== e.collapseClassName ? e.collapseClassName : t + '-collapse';
                        'string' == typeof o
                            ? ((this.collapseLabel_ = document.createElement('span')),
                              (this.collapseLabel_.textContent = o),
                              (this.collapseLabel_.className = s))
                            : (this.collapseLabel_ = o);
                        const a = void 0 !== e.label ? e.label : 'i';
                        'string' == typeof a
                            ? ((this.label_ = document.createElement('span')), (this.label_.textContent = a), (this.label_.className = r))
                            : (this.label_ = a);
                        const l = this.collapsible_ && !this.collapsed_ ? this.collapseLabel_ : this.label_;
                        (this.toggleButton_ = document.createElement('button')),
                            this.toggleButton_.setAttribute('type', 'button'),
                            this.toggleButton_.setAttribute('aria-expanded', String(!this.collapsed_)),
                            (this.toggleButton_.title = i),
                            this.toggleButton_.appendChild(l),
                            this.toggleButton_.addEventListener('click', this.handleClick_.bind(this), !1);
                        const u = this.element;
                        (u.className =
                            t +
                            ' ' +
                            wa +
                            ' ' +
                            Cc +
                            (this.collapsed_ && this.collapsible_ ? ' ' + FR : '') +
                            (this.collapsible_ ? '' : ' ol-uncollapsible')),
                            u.appendChild(this.toggleButton_),
                            u.appendChild(this.ulElement_),
                            (this.renderedAttributions_ = []),
                            (this.renderedVisible_ = !0);
                    }
                    collectSourceAttributions_(e) {
                        const t = Array.from(
                                new Set(
                                    this.getMap()
                                        .getAllLayers()
                                        .flatMap((r) => r.getAttributions(e)),
                                ),
                            ),
                            i = !this.getMap()
                                .getAllLayers()
                                .some((r) => r.getSource() && !1 === r.getSource().getAttributionsCollapsible());
                        return this.overrideCollapsible_ || this.setCollapsible(i), t;
                    }
                    updateElement_(e) {
                        if (!e)
                            return void (this.renderedVisible_ && ((this.element.style.display = 'none'), (this.renderedVisible_ = !1)));
                        const t = this.collectSourceAttributions_(e),
                            i = t.length > 0;
                        if (
                            (this.renderedVisible_ != i && ((this.element.style.display = i ? '' : 'none'), (this.renderedVisible_ = i)),
                            !Pr(t, this.renderedAttributions_))
                        ) {
                            !(function f4(n) {
                                for (; n.lastChild; ) n.removeChild(n.lastChild);
                            })(this.ulElement_);
                            for (let r = 0, o = t.length; r < o; ++r) {
                                const s = document.createElement('li');
                                (s.innerHTML = t[r]), this.ulElement_.appendChild(s);
                            }
                            this.renderedAttributions_ = t;
                        }
                    }
                    handleClick_(e) {
                        e.preventDefault(), this.handleToggle_(), (this.userCollapsed_ = this.collapsed_);
                    }
                    handleToggle_() {
                        this.element.classList.toggle(FR),
                            this.collapsed_ ? Qh(this.collapseLabel_, this.label_) : Qh(this.label_, this.collapseLabel_),
                            (this.collapsed_ = !this.collapsed_),
                            this.toggleButton_.setAttribute('aria-expanded', String(!this.collapsed_));
                    }
                    getCollapsible() {
                        return this.collapsible_;
                    }
                    setCollapsible(e) {
                        this.collapsible_ !== e &&
                            ((this.collapsible_ = e),
                            this.element.classList.toggle('ol-uncollapsible'),
                            this.userCollapsed_ && this.handleToggle_());
                    }
                    setCollapsed(e) {
                        (this.userCollapsed_ = e), this.collapsible_ && this.collapsed_ !== e && this.handleToggle_();
                    }
                    getCollapsed() {
                        return this.collapsed_;
                    }
                    render(e) {
                        this.updateElement_(e.frameState);
                    }
                },
                P4 = class N4 extends Tc {
                    constructor(e) {
                        (e = e || {}), super({ element: document.createElement('div'), render: e.render, target: e.target });
                        const t = void 0 !== e.className ? e.className : 'ol-rotate',
                            i = void 0 !== e.label ? e.label : '\u21e7',
                            r = void 0 !== e.compassClassName ? e.compassClassName : 'ol-compass';
                        (this.label_ = null),
                            'string' == typeof i
                                ? ((this.label_ = document.createElement('span')),
                                  (this.label_.className = r),
                                  (this.label_.textContent = i))
                                : ((this.label_ = i), this.label_.classList.add(r));
                        const o = e.tipLabel ? e.tipLabel : 'Reset rotation',
                            s = document.createElement('button');
                        (s.className = t + '-reset'),
                            s.setAttribute('type', 'button'),
                            (s.title = o),
                            s.appendChild(this.label_),
                            s.addEventListener('click', this.handleClick_.bind(this), !1);
                        const l = this.element;
                        (l.className = t + ' ' + wa + ' ' + Cc),
                            l.appendChild(s),
                            (this.callResetNorth_ = e.resetNorth ? e.resetNorth : void 0),
                            (this.duration_ = void 0 !== e.duration ? e.duration : 250),
                            (this.autoHide_ = void 0 === e.autoHide || e.autoHide),
                            (this.rotation_ = void 0),
                            this.autoHide_ && this.element.classList.add(Kh);
                    }
                    handleClick_(e) {
                        e.preventDefault(), void 0 !== this.callResetNorth_ ? this.callResetNorth_() : this.resetNorth_();
                    }
                    resetNorth_() {
                        const t = this.getMap().getView();
                        if (!t) return;
                        const i = t.getRotation();
                        void 0 !== i &&
                            (this.duration_ > 0 && i % (2 * Math.PI) != 0
                                ? t.animate({ rotation: 0, duration: this.duration_, easing: Ea })
                                : t.setRotation(0));
                    }
                    render(e) {
                        const t = e.frameState;
                        if (!t) return;
                        const i = t.viewState.rotation;
                        if (i != this.rotation_) {
                            const r = 'rotate(' + i + 'rad)';
                            if (this.autoHide_) {
                                const o = this.element.classList.contains(Kh);
                                o || 0 !== i ? o && 0 !== i && this.element.classList.remove(Kh) : this.element.classList.add(Kh);
                            }
                            this.label_.style.transform = r;
                        }
                        this.rotation_ = i;
                    }
                },
                F4 = class k4 extends Tc {
                    constructor(e) {
                        (e = e || {}), super({ element: document.createElement('div'), target: e.target });
                        const t = void 0 !== e.className ? e.className : 'ol-zoom',
                            i = void 0 !== e.delta ? e.delta : 1,
                            r = void 0 !== e.zoomInClassName ? e.zoomInClassName : t + '-in',
                            o = void 0 !== e.zoomOutClassName ? e.zoomOutClassName : t + '-out',
                            s = void 0 !== e.zoomInLabel ? e.zoomInLabel : '+',
                            a = void 0 !== e.zoomOutLabel ? e.zoomOutLabel : '\u2013',
                            l = void 0 !== e.zoomInTipLabel ? e.zoomInTipLabel : 'Zoom in',
                            c = void 0 !== e.zoomOutTipLabel ? e.zoomOutTipLabel : 'Zoom out',
                            u = document.createElement('button');
                        (u.className = r),
                            u.setAttribute('type', 'button'),
                            (u.title = l),
                            u.appendChild('string' == typeof s ? document.createTextNode(s) : s),
                            u.addEventListener('click', this.handleClick_.bind(this, i), !1);
                        const d = document.createElement('button');
                        (d.className = o),
                            d.setAttribute('type', 'button'),
                            (d.title = c),
                            d.appendChild('string' == typeof a ? document.createTextNode(a) : a),
                            d.addEventListener('click', this.handleClick_.bind(this, -i), !1);
                        const f = this.element;
                        (f.className = t + ' ' + wa + ' ' + Cc),
                            f.appendChild(u),
                            f.appendChild(d),
                            (this.duration_ = void 0 !== e.duration ? e.duration : 250);
                    }
                    handleClick_(e, t) {
                        t.preventDefault(), this.zoomByDelta_(e);
                    }
                    zoomByDelta_(e) {
                        const i = this.getMap().getView();
                        if (!i) return;
                        const r = i.getZoom();
                        if (void 0 !== r) {
                            const o = i.getConstrainedZoom(r + e);
                            this.duration_ > 0
                                ? (i.getAnimating() && i.cancelAnimations(), i.animate({ zoom: o, duration: this.duration_, easing: Ea }))
                                : i.setZoom(o);
                        }
                    }
                };
            function zR(n) {
                n = n || {};
                const e = new Ii();
                return (
                    (void 0 === n.zoom || n.zoom) && e.push(new F4(n.zoomOptions)),
                    (void 0 === n.rotate || n.rotate) && e.push(new P4(n.rotateOptions)),
                    (void 0 === n.attribution || n.attribution) && e.push(new UR(n.attributionOptions)),
                    e
                );
            }
            function fb(n, e, t, i) {
                const r = n.getZoom();
                if (void 0 === r) return;
                const o = n.getConstrainedZoom(r + e),
                    s = n.getResolutionForZoom(o);
                n.getAnimating() && n.cancelAnimations(),
                    n.animate({ resolution: s, anchor: t, duration: void 0 !== i ? i : 250, easing: Ea });
            }
            const xa = class L4 extends Di {
                    constructor(e) {
                        super(), e && e.handleEvent && (this.handleEvent = e.handleEvent), (this.map_ = null), this.setActive(!0);
                    }
                    getActive() {
                        return this.get('active');
                    }
                    getMap() {
                        return this.map_;
                    }
                    handleEvent(e) {
                        return !0;
                    }
                    setActive(e) {
                        this.set('active', e);
                    }
                    setMap(e) {
                        this.map_ = e;
                    }
                },
                V4 = class j4 extends xa {
                    constructor(e) {
                        super(),
                            (this.delta_ = (e = e || {}).delta ? e.delta : 1),
                            (this.duration_ = void 0 !== e.duration ? e.duration : 250);
                    }
                    handleEvent(e) {
                        let t = !1;
                        if (e.type == tt.DBLCLICK) {
                            const i = e.originalEvent,
                                o = e.coordinate,
                                s = i.shiftKey ? -this.delta_ : this.delta_;
                            fb(e.map.getView(), s, o, this.duration_), i.preventDefault(), (t = !0);
                        }
                        return !t;
                    }
                };
            function mb(n) {
                const e = n.length;
                let t = 0,
                    i = 0;
                for (let r = 0; r < e; r++) (t += n[r].clientX), (i += n[r].clientY);
                return { clientX: t / e, clientY: i / e };
            }
            const Mc = class H4 extends xa {
                constructor(e) {
                    super((e = e || {})),
                        e.handleDownEvent && (this.handleDownEvent = e.handleDownEvent),
                        e.handleDragEvent && (this.handleDragEvent = e.handleDragEvent),
                        e.handleMoveEvent && (this.handleMoveEvent = e.handleMoveEvent),
                        e.handleUpEvent && (this.handleUpEvent = e.handleUpEvent),
                        e.stopDown && (this.stopDown = e.stopDown),
                        (this.handlingDownUpSequence = !1),
                        (this.targetPointers = []);
                }
                getPointerCount() {
                    return this.targetPointers.length;
                }
                handleDownEvent(e) {
                    return !1;
                }
                handleDragEvent(e) {}
                handleEvent(e) {
                    if (!e.originalEvent) return !0;
                    let t = !1;
                    if ((this.updateTrackedPointers_(e), this.handlingDownUpSequence)) {
                        if (e.type == tt.POINTERDRAG) this.handleDragEvent(e), e.originalEvent.preventDefault();
                        else if (e.type == tt.POINTERUP) {
                            const i = this.handleUpEvent(e);
                            this.handlingDownUpSequence = i && this.targetPointers.length > 0;
                        }
                    } else if (e.type == tt.POINTERDOWN) {
                        const i = this.handleDownEvent(e);
                        (this.handlingDownUpSequence = i), (t = this.stopDown(i));
                    } else e.type == tt.POINTERMOVE && this.handleMoveEvent(e);
                    return !t;
                }
                handleMoveEvent(e) {}
                handleUpEvent(e) {
                    return !1;
                }
                stopDown(e) {
                    return e;
                }
                updateTrackedPointers_(e) {
                    e.activePointers && (this.targetPointers = e.activePointers);
                }
            };
            function pb(n) {
                const e = arguments;
                return function (t) {
                    let i = !0;
                    for (let r = 0, o = e.length; r < o && ((i = i && e[r](t)), i); ++r);
                    return i;
                };
            }
            const U4 = function (n) {
                    const e = n.originalEvent;
                    return e.altKey && !(e.metaKey || e.ctrlKey) && e.shiftKey;
                },
                WR = function (n) {
                    return (
                        !n.map.getTargetElement().hasAttribute('tabindex') ||
                        (function (n) {
                            const e = n.map.getTargetElement(),
                                t = n.map.getOwnerDocument().activeElement;
                            return e.contains(t);
                        })(n)
                    );
                },
                G4 = ha,
                $R = function (n) {
                    const e = n.originalEvent;
                    return 0 == e.button && !(P8 && PM && e.ctrlKey);
                },
                YR = function (n) {
                    const e = n.originalEvent;
                    return !e.altKey && !(e.metaKey || e.ctrlKey) && !e.shiftKey;
                },
                $4 = function (n) {
                    const e = n.originalEvent;
                    return !e.altKey && !(e.metaKey || e.ctrlKey) && e.shiftKey;
                },
                qR = function (n) {
                    const e = n.originalEvent,
                        t = e.target.tagName;
                    return 'INPUT' !== t && 'SELECT' !== t && 'TEXTAREA' !== t && !e.target.isContentEditable;
                },
                gb = function (n) {
                    const e = n.originalEvent;
                    return pe(void 0 !== e, 56), 'mouse' == e.pointerType;
                },
                Y4 = function (n) {
                    const e = n.originalEvent;
                    return pe(void 0 !== e, 56), e.isPrimary && 0 === e.button;
                },
                X4 = class q4 extends Mc {
                    constructor(e) {
                        super({ stopDown: bh }), (this.kinetic_ = (e = e || {}).kinetic), (this.lastCentroid = null), (this.panning_ = !1);
                        const t = e.condition ? e.condition : pb(YR, Y4);
                        (this.condition_ = e.onFocusOnly ? pb(WR, t) : t), (this.noKinetic_ = !1);
                    }
                    handleDragEvent(e) {
                        const t = e.map;
                        this.panning_ || ((this.panning_ = !0), t.getView().beginInteraction());
                        const i = this.targetPointers,
                            r = t.getEventPixel(mb(i));
                        if (i.length == this.lastPointersCount_) {
                            if ((this.kinetic_ && this.kinetic_.update(r[0], r[1]), this.lastCentroid)) {
                                const o = [this.lastCentroid[0] - r[0], r[1] - this.lastCentroid[1]],
                                    a = e.map.getView();
                                (function g5(n, e) {
                                    (n[0] *= e), (n[1] *= e);
                                })(o, a.getResolution()),
                                    Py(o, a.getRotation()),
                                    a.adjustCenterInternal(o);
                            }
                        } else this.kinetic_ && this.kinetic_.begin();
                        (this.lastCentroid = r), (this.lastPointersCount_ = i.length), e.originalEvent.preventDefault();
                    }
                    handleUpEvent(e) {
                        const t = e.map,
                            i = t.getView();
                        if (0 === this.targetPointers.length) {
                            if (!this.noKinetic_ && this.kinetic_ && this.kinetic_.end()) {
                                const r = this.kinetic_.getDistance(),
                                    o = this.kinetic_.getAngle(),
                                    s = i.getCenterInternal(),
                                    a = t.getPixelFromCoordinateInternal(s),
                                    l = t.getCoordinateFromPixelInternal([a[0] - r * Math.cos(o), a[1] - r * Math.sin(o)]);
                                i.animateInternal({ center: i.getConstrainedCenter(l), duration: 500, easing: Ea });
                            }
                            return this.panning_ && ((this.panning_ = !1), i.endInteraction()), !1;
                        }
                        return this.kinetic_ && this.kinetic_.begin(), (this.lastCentroid = null), !0;
                    }
                    handleDownEvent(e) {
                        if (this.targetPointers.length > 0 && this.condition_(e)) {
                            const i = e.map.getView();
                            return (
                                (this.lastCentroid = null),
                                i.getAnimating() && i.cancelAnimations(),
                                this.kinetic_ && this.kinetic_.begin(),
                                (this.noKinetic_ = this.targetPointers.length > 1),
                                !0
                            );
                        }
                        return !1;
                    }
                },
                Z4 = class K4 extends Mc {
                    constructor(e) {
                        (e = e || {}),
                            super({ stopDown: bh }),
                            (this.condition_ = e.condition ? e.condition : U4),
                            (this.lastAngle_ = void 0),
                            (this.duration_ = void 0 !== e.duration ? e.duration : 250);
                    }
                    handleDragEvent(e) {
                        if (!gb(e)) return;
                        const t = e.map,
                            i = t.getView();
                        if (i.getConstraints().rotation === Wy) return;
                        const r = t.getSize(),
                            o = e.pixel,
                            s = Math.atan2(r[1] / 2 - o[1], o[0] - r[0] / 2);
                        void 0 !== this.lastAngle_ && i.adjustRotationInternal(-(s - this.lastAngle_)), (this.lastAngle_ = s);
                    }
                    handleUpEvent(e) {
                        return !gb(e) || (e.map.getView().endInteraction(this.duration_), !1);
                    }
                    handleDownEvent(e) {
                        return (
                            !!(gb(e) && $R(e) && this.condition_(e)) && (e.map.getView().beginInteraction(), (this.lastAngle_ = void 0), !0)
                        );
                    }
                },
                J4 = class Q4 extends wy {
                    constructor(e) {
                        super(),
                            (this.geometry_ = null),
                            (this.element_ = document.createElement('div')),
                            (this.element_.style.position = 'absolute'),
                            (this.element_.style.pointerEvents = 'auto'),
                            (this.element_.className = 'ol-box ' + e),
                            (this.map_ = null),
                            (this.startPixel_ = null),
                            (this.endPixel_ = null);
                    }
                    disposeInternal() {
                        this.setMap(null);
                    }
                    render_() {
                        const e = this.startPixel_,
                            t = this.endPixel_,
                            i = 'px',
                            r = this.element_.style;
                        (r.left = Math.min(e[0], t[0]) + i),
                            (r.top = Math.min(e[1], t[1]) + i),
                            (r.width = Math.abs(t[0] - e[0]) + i),
                            (r.height = Math.abs(t[1] - e[1]) + i);
                    }
                    setMap(e) {
                        if (this.map_) {
                            this.map_.getOverlayContainer().removeChild(this.element_);
                            const t = this.element_.style;
                            (t.left = 'inherit'), (t.top = 'inherit'), (t.width = 'inherit'), (t.height = 'inherit');
                        }
                        (this.map_ = e), this.map_ && this.map_.getOverlayContainer().appendChild(this.element_);
                    }
                    setPixels(e, t) {
                        (this.startPixel_ = e), (this.endPixel_ = t), this.createOrUpdateGeometry(), this.render_();
                    }
                    createOrUpdateGeometry() {
                        const e = this.startPixel_,
                            t = this.endPixel_,
                            r = [e, [e[0], t[1]], t, [t[0], e[1]]].map(this.map_.getCoordinateFromPixelInternal, this.map_);
                        (r[4] = r[0].slice()), this.geometry_ ? this.geometry_.setCoordinates([r]) : (this.geometry_ = new Yh([r]));
                    }
                    getGeometry() {
                        return this.geometry_;
                    }
                };
            class _b extends Ci {
                constructor(e, t, i) {
                    super(e), (this.coordinate = t), (this.mapBrowserEvent = i);
                }
            }
            const tY = class eY extends Mc {
                    constructor(e) {
                        super(),
                            (this.box_ = new J4((e = e || {}).className || 'ol-dragbox')),
                            (this.minArea_ = void 0 !== e.minArea ? e.minArea : 64),
                            e.onBoxEnd && (this.onBoxEnd = e.onBoxEnd),
                            (this.startPixel_ = null),
                            (this.condition_ = e.condition ? e.condition : $R),
                            (this.boxEndCondition_ = e.boxEndCondition ? e.boxEndCondition : this.defaultBoxEndCondition);
                    }
                    defaultBoxEndCondition(e, t, i) {
                        const r = i[0] - t[0],
                            o = i[1] - t[1];
                        return r * r + o * o >= this.minArea_;
                    }
                    getGeometry() {
                        return this.box_.getGeometry();
                    }
                    handleDragEvent(e) {
                        this.box_.setPixels(this.startPixel_, e.pixel), this.dispatchEvent(new _b('boxdrag', e.coordinate, e));
                    }
                    handleUpEvent(e) {
                        this.box_.setMap(null);
                        const t = this.boxEndCondition_(e, this.startPixel_, e.pixel);
                        return t && this.onBoxEnd(e), this.dispatchEvent(new _b(t ? 'boxend' : 'boxcancel', e.coordinate, e)), !1;
                    }
                    handleDownEvent(e) {
                        return (
                            !!this.condition_(e) &&
                            ((this.startPixel_ = e.pixel),
                            this.box_.setMap(e.map),
                            this.box_.setPixels(this.startPixel_, this.startPixel_),
                            this.dispatchEvent(new _b('boxstart', e.coordinate, e)),
                            !0)
                        );
                    }
                    onBoxEnd(e) {}
                },
                iY = class nY extends tY {
                    constructor(e) {
                        super({
                            condition: (e = e || {}).condition ? e.condition : $4,
                            className: e.className || 'ol-dragzoom',
                            minArea: e.minArea,
                        }),
                            (this.duration_ = void 0 !== e.duration ? e.duration : 200),
                            (this.out_ = void 0 !== e.out && e.out);
                    }
                    onBoxEnd(e) {
                        const i = this.getMap().getView();
                        let r = this.getGeometry();
                        if (this.out_) {
                            const o = i.rotatedExtentForGeometry(r),
                                s = i.getResolutionForExtentInternal(o),
                                a = i.getResolution() / s;
                            (r = r.clone()), r.scale(a * a);
                        }
                        i.fitInternal(r, { duration: this.duration_, easing: Ea });
                    }
                },
                oY = class rY extends xa {
                    constructor(e) {
                        super(),
                            (e = e || {}),
                            (this.defaultCondition_ = function (t) {
                                return YR(t) && qR(t);
                            }),
                            (this.condition_ = void 0 !== e.condition ? e.condition : this.defaultCondition_),
                            (this.duration_ = void 0 !== e.duration ? e.duration : 100),
                            (this.pixelDelta_ = void 0 !== e.pixelDelta ? e.pixelDelta : 128);
                    }
                    handleEvent(e) {
                        let t = !1;
                        if ('keydown' == e.type) {
                            const i = e.originalEvent,
                                r = i.key;
                            if (this.condition_(e) && ('ArrowDown' == r || 'ArrowLeft' == r || 'ArrowRight' == r || 'ArrowUp' == r)) {
                                const s = e.map.getView(),
                                    a = s.getResolution() * this.pixelDelta_;
                                let l = 0,
                                    c = 0;
                                'ArrowDown' == r ? (c = -a) : 'ArrowLeft' == r ? (l = -a) : 'ArrowRight' == r ? (l = a) : (c = a);
                                const u = [l, c];
                                Py(u, s.getRotation()),
                                    (function B4(n, e, t) {
                                        const i = n.getCenterInternal();
                                        i &&
                                            n.animateInternal({
                                                duration: void 0 !== t ? t : 250,
                                                easing: N5,
                                                center: n.getConstrainedCenter([i[0] + e[0], i[1] + e[1]]),
                                            });
                                    })(s, u, this.duration_),
                                    i.preventDefault(),
                                    (t = !0);
                            }
                        }
                        return !t;
                    }
                },
                aY = class sY extends xa {
                    constructor(e) {
                        super(),
                            (this.condition_ = (e = e || {}).condition
                                ? e.condition
                                : function (t) {
                                      return (
                                          !(function (n) {
                                              const e = n.originalEvent;
                                              return PM ? e.metaKey : e.ctrlKey;
                                          })(t) && qR(t)
                                      );
                                  }),
                            (this.delta_ = e.delta ? e.delta : 1),
                            (this.duration_ = void 0 !== e.duration ? e.duration : 100);
                    }
                    handleEvent(e) {
                        let t = !1;
                        if ('keydown' == e.type || 'keypress' == e.type) {
                            const i = e.originalEvent,
                                r = i.key;
                            if (this.condition_(e) && ('+' === r || '-' === r)) {
                                const s = '+' === r ? this.delta_ : -this.delta_;
                                fb(e.map.getView(), s, void 0, this.duration_), i.preventDefault(), (t = !0);
                            }
                        }
                        return !t;
                    }
                },
                cY = class lY {
                    constructor(e, t, i) {
                        (this.decay_ = e),
                            (this.minVelocity_ = t),
                            (this.delay_ = i),
                            (this.points_ = []),
                            (this.angle_ = 0),
                            (this.initialVelocity_ = 0);
                    }
                    begin() {
                        (this.points_.length = 0), (this.angle_ = 0), (this.initialVelocity_ = 0);
                    }
                    update(e, t) {
                        this.points_.push(e, t, Date.now());
                    }
                    end() {
                        if (this.points_.length < 6) return !1;
                        const e = Date.now() - this.delay_,
                            t = this.points_.length - 3;
                        if (this.points_[t + 2] < e) return !1;
                        let i = t - 3;
                        for (; i > 0 && this.points_[i + 2] > e; ) i -= 3;
                        const r = this.points_[t + 2] - this.points_[i + 2];
                        if (r < 1e3 / 60) return !1;
                        const o = this.points_[t] - this.points_[i],
                            s = this.points_[t + 1] - this.points_[i + 1];
                        return (
                            (this.angle_ = Math.atan2(s, o)),
                            (this.initialVelocity_ = Math.sqrt(o * o + s * s) / r),
                            this.initialVelocity_ > this.minVelocity_
                        );
                    }
                    getDistance() {
                        return (this.minVelocity_ - this.initialVelocity_) / this.decay_;
                    }
                    getAngle() {
                        return this.angle_;
                    }
                },
                dY = class uY extends xa {
                    constructor(e) {
                        super((e = e || {})),
                            (this.totalDelta_ = 0),
                            (this.lastDelta_ = 0),
                            (this.maxDelta_ = void 0 !== e.maxDelta ? e.maxDelta : 1),
                            (this.duration_ = void 0 !== e.duration ? e.duration : 250),
                            (this.timeout_ = void 0 !== e.timeout ? e.timeout : 80),
                            (this.useAnchor_ = void 0 === e.useAnchor || e.useAnchor),
                            (this.constrainResolution_ = void 0 !== e.constrainResolution && e.constrainResolution);
                        const t = e.condition ? e.condition : G4;
                        (this.condition_ = e.onFocusOnly ? pb(WR, t) : t),
                            (this.lastAnchor_ = null),
                            (this.startTime_ = void 0),
                            (this.mode_ = void 0),
                            (this.trackpadEventGap_ = 400),
                            (this.deltaPerZoom_ = 300);
                    }
                    endInteraction_() {
                        this.trackpadTimeoutId_ = void 0;
                        const e = this.getMap();
                        e && e.getView().endInteraction(void 0, this.lastDelta_ ? (this.lastDelta_ > 0 ? 1 : -1) : 0, this.lastAnchor_);
                    }
                    handleEvent(e) {
                        if (!this.condition_(e) || 'wheel' !== e.type) return !0;
                        const i = e.map,
                            r = e.originalEvent;
                        let o;
                        if (
                            (r.preventDefault(),
                            this.useAnchor_ && (this.lastAnchor_ = e.coordinate),
                            'wheel' == e.type &&
                                ((o = r.deltaY),
                                N8 && r.deltaMode === WheelEvent.DOM_DELTA_PIXEL && (o /= kM),
                                r.deltaMode === WheelEvent.DOM_DELTA_LINE && (o *= 40)),
                            0 === o)
                        )
                            return !1;
                        this.lastDelta_ = o;
                        const s = Date.now();
                        void 0 === this.startTime_ && (this.startTime_ = s),
                            (!this.mode_ || s - this.startTime_ > this.trackpadEventGap_) &&
                                (this.mode_ = Math.abs(o) < 4 ? 'trackpad' : 'wheel');
                        const a = i.getView();
                        if ('trackpad' === this.mode_ && !a.getConstrainResolution() && !this.constrainResolution_)
                            return (
                                this.trackpadTimeoutId_
                                    ? clearTimeout(this.trackpadTimeoutId_)
                                    : (a.getAnimating() && a.cancelAnimations(), a.beginInteraction()),
                                (this.trackpadTimeoutId_ = setTimeout(this.endInteraction_.bind(this), this.timeout_)),
                                a.adjustZoom(-o / this.deltaPerZoom_, this.lastAnchor_),
                                (this.startTime_ = s),
                                !1
                            );
                        this.totalDelta_ += o;
                        const l = Math.max(this.timeout_ - (s - this.startTime_), 0);
                        return clearTimeout(this.timeoutId_), (this.timeoutId_ = setTimeout(this.handleWheelZoom_.bind(this, i), l)), !1;
                    }
                    handleWheelZoom_(e) {
                        const t = e.getView();
                        t.getAnimating() && t.cancelAnimations();
                        let i =
                            -gt(this.totalDelta_, -this.maxDelta_ * this.deltaPerZoom_, this.maxDelta_ * this.deltaPerZoom_) /
                            this.deltaPerZoom_;
                        (t.getConstrainResolution() || this.constrainResolution_) && (i = i ? (i > 0 ? 1 : -1) : 0),
                            fb(t, i, this.lastAnchor_, this.duration_),
                            (this.mode_ = void 0),
                            (this.totalDelta_ = 0),
                            (this.lastAnchor_ = null),
                            (this.startTime_ = void 0),
                            (this.timeoutId_ = void 0);
                    }
                    setMouseAnchor(e) {
                        (this.useAnchor_ = e), e || (this.lastAnchor_ = null);
                    }
                },
                fY = class hY extends Mc {
                    constructor(e) {
                        const t = (e = e || {});
                        t.stopDown || (t.stopDown = bh),
                            super(t),
                            (this.anchor_ = null),
                            (this.lastAngle_ = void 0),
                            (this.rotating_ = !1),
                            (this.rotationDelta_ = 0),
                            (this.threshold_ = void 0 !== e.threshold ? e.threshold : 0.3),
                            (this.duration_ = void 0 !== e.duration ? e.duration : 250);
                    }
                    handleDragEvent(e) {
                        let t = 0;
                        const i = this.targetPointers[0],
                            r = this.targetPointers[1],
                            o = Math.atan2(r.clientY - i.clientY, r.clientX - i.clientX);
                        if (void 0 !== this.lastAngle_) {
                            const l = o - this.lastAngle_;
                            (this.rotationDelta_ += l),
                                !this.rotating_ && Math.abs(this.rotationDelta_) > this.threshold_ && (this.rotating_ = !0),
                                (t = l);
                        }
                        this.lastAngle_ = o;
                        const s = e.map,
                            a = s.getView();
                        a.getConstraints().rotation !== Wy &&
                            ((this.anchor_ = s.getCoordinateFromPixelInternal(s.getEventPixel(mb(this.targetPointers)))),
                            this.rotating_ && (s.render(), a.adjustRotationInternal(t, this.anchor_)));
                    }
                    handleUpEvent(e) {
                        return !(this.targetPointers.length < 2 && (e.map.getView().endInteraction(this.duration_), 1));
                    }
                    handleDownEvent(e) {
                        if (this.targetPointers.length >= 2) {
                            const t = e.map;
                            return (
                                (this.anchor_ = null),
                                (this.lastAngle_ = void 0),
                                (this.rotating_ = !1),
                                (this.rotationDelta_ = 0),
                                this.handlingDownUpSequence || t.getView().beginInteraction(),
                                !0
                            );
                        }
                        return !1;
                    }
                },
                XR = class mY extends Mc {
                    constructor(e) {
                        const t = (e = e || {});
                        t.stopDown || (t.stopDown = bh),
                            super(t),
                            (this.anchor_ = null),
                            (this.duration_ = void 0 !== e.duration ? e.duration : 400),
                            (this.lastDistance_ = void 0),
                            (this.lastScaleDelta_ = 1);
                    }
                    handleDragEvent(e) {
                        let t = 1;
                        const i = this.targetPointers[0],
                            r = this.targetPointers[1],
                            o = i.clientX - r.clientX,
                            s = i.clientY - r.clientY,
                            a = Math.sqrt(o * o + s * s);
                        void 0 !== this.lastDistance_ && (t = this.lastDistance_ / a), (this.lastDistance_ = a);
                        const l = e.map,
                            c = l.getView();
                        1 != t && (this.lastScaleDelta_ = t),
                            (this.anchor_ = l.getCoordinateFromPixelInternal(l.getEventPixel(mb(this.targetPointers)))),
                            l.render(),
                            c.adjustResolutionInternal(t, this.anchor_);
                    }
                    handleUpEvent(e) {
                        return (
                            !(this.targetPointers.length < 2) ||
                            (e.map.getView().endInteraction(this.duration_, this.lastScaleDelta_ > 1 ? 1 : -1), !1)
                        );
                    }
                    handleDownEvent(e) {
                        if (this.targetPointers.length >= 2) {
                            const t = e.map;
                            return (
                                (this.anchor_ = null),
                                (this.lastDistance_ = void 0),
                                (this.lastScaleDelta_ = 1),
                                this.handlingDownUpSequence || t.getView().beginInteraction(),
                                !0
                            );
                        }
                        return !1;
                    }
                };
            function KR(n) {
                n = n || {};
                const e = new Ii(),
                    t = new cY(-0.005, 0.05, 100);
                return (
                    (void 0 === n.altShiftDragRotate || n.altShiftDragRotate) && e.push(new Z4()),
                    (void 0 === n.doubleClickZoom || n.doubleClickZoom) && e.push(new V4({ delta: n.zoomDelta, duration: n.zoomDuration })),
                    (void 0 === n.dragPan || n.dragPan) && e.push(new X4({ onFocusOnly: n.onFocusOnly, kinetic: t })),
                    (void 0 === n.pinchRotate || n.pinchRotate) && e.push(new fY()),
                    (void 0 === n.pinchZoom || n.pinchZoom) && e.push(new XR({ duration: n.zoomDuration })),
                    (void 0 === n.keyboard || n.keyboard) &&
                        (e.push(new oY()), e.push(new aY({ delta: n.zoomDelta, duration: n.zoomDuration }))),
                    (void 0 === n.mouseWheelZoom || n.mouseWheelZoom) &&
                        e.push(new dY({ onFocusOnly: n.onFocusOnly, duration: n.zoomDuration })),
                    (void 0 === n.shiftDragZoom || n.shiftDragZoom) && e.push(new iY({ duration: n.zoomDuration })),
                    e
                );
            }
            function ZR(n) {
                return n[0] > 0 && n[1] > 0;
            }
            function Fn(n, e) {
                return Array.isArray(n) ? n : (void 0 === e ? (e = [n, n]) : ((e[0] = n), (e[1] = n)), e);
            }
            function QR(n) {
                n instanceof Xh ? n.setMapInternal(null) : n instanceof nf && n.getLayers().forEach(QR);
            }
            function JR(n, e) {
                if (n instanceof Xh) n.setMapInternal(e);
                else if (n instanceof nf) {
                    const t = n.getLayers().getArray();
                    for (let i = 0, r = t.length; i < r; ++i) JR(t[i], e);
                }
            }
            const yY = class gY extends Di {
                    constructor(e) {
                        super();
                        const t = (function _Y(n) {
                            let e = null;
                            void 0 !== n.keyboardEventTarget &&
                                (e =
                                    'string' == typeof n.keyboardEventTarget
                                        ? document.getElementById(n.keyboardEventTarget)
                                        : n.keyboardEventTarget);
                            const t = {},
                                i = n.layers && 'function' == typeof n.layers.getLayers ? n.layers : new nf({ layers: n.layers });
                            let r, o, s;
                            return (
                                (t.layergroup = i),
                                (t.target = n.target),
                                (t.view = n.view instanceof Si ? n.view : new Si()),
                                void 0 !== n.controls &&
                                    (Array.isArray(n.controls)
                                        ? (r = new Ii(n.controls.slice()))
                                        : (pe('function' == typeof n.controls.getArray, 47), (r = n.controls))),
                                void 0 !== n.interactions &&
                                    (Array.isArray(n.interactions)
                                        ? (o = new Ii(n.interactions.slice()))
                                        : (pe('function' == typeof n.interactions.getArray, 48), (o = n.interactions))),
                                void 0 !== n.overlays
                                    ? Array.isArray(n.overlays)
                                        ? (s = new Ii(n.overlays.slice()))
                                        : (pe('function' == typeof n.overlays.getArray, 49), (s = n.overlays))
                                    : (s = new Ii()),
                                { controls: r, interactions: o, keyboardEventTarget: e, overlays: s, values: t }
                            );
                        })((e = e || {}));
                        (this.loaded_ = !0),
                            (this.boundHandleBrowserEvent_ = this.handleBrowserEvent.bind(this)),
                            (this.maxTilesLoading_ = void 0 !== e.maxTilesLoading ? e.maxTilesLoading : 16),
                            (this.pixelRatio_ = void 0 !== e.pixelRatio ? e.pixelRatio : kM),
                            (this.animationDelay_ = this.animationDelay_.bind(this)),
                            (this.coordinateToPixelTransform_ = [1, 0, 0, 1, 0, 0]),
                            (this.pixelToCoordinateTransform_ = [1, 0, 0, 1, 0, 0]),
                            (this.frameIndex_ = 0),
                            (this.frameState_ = null),
                            (this.previousExtent_ = null),
                            (this.viewPropertyListenerKey_ = null),
                            (this.viewChangeListenerKey_ = null),
                            (this.layerGroupPropertyListenerKeys_ = null),
                            (this.viewport_ = document.createElement('div')),
                            (this.viewport_.className = 'ol-viewport' + ('ontouchstart' in window ? ' ol-touch' : '')),
                            (this.viewport_.style.position = 'relative'),
                            (this.viewport_.style.overflow = 'hidden'),
                            (this.viewport_.style.width = '100%'),
                            (this.viewport_.style.height = '100%'),
                            (this.overlayContainer_ = document.createElement('div')),
                            (this.overlayContainer_.style.position = 'absolute'),
                            (this.overlayContainer_.style.zIndex = '0'),
                            (this.overlayContainer_.style.width = '100%'),
                            (this.overlayContainer_.style.height = '100%'),
                            (this.overlayContainer_.style.pointerEvents = 'none'),
                            (this.overlayContainer_.className = 'ol-overlaycontainer'),
                            this.viewport_.appendChild(this.overlayContainer_),
                            (this.overlayContainerStopEvent_ = document.createElement('div')),
                            (this.overlayContainerStopEvent_.style.position = 'absolute'),
                            (this.overlayContainerStopEvent_.style.zIndex = '0'),
                            (this.overlayContainerStopEvent_.style.width = '100%'),
                            (this.overlayContainerStopEvent_.style.height = '100%'),
                            (this.overlayContainerStopEvent_.style.pointerEvents = 'none'),
                            (this.overlayContainerStopEvent_.className = 'ol-overlaycontainer-stopevent'),
                            this.viewport_.appendChild(this.overlayContainerStopEvent_),
                            (this.mapBrowserEventHandler_ = null),
                            (this.moveTolerance_ = e.moveTolerance),
                            (this.keyboardEventTarget_ = t.keyboardEventTarget),
                            (this.targetChangeHandlerKeys_ = null),
                            (this.targetElement_ = null),
                            (this.resizeObserver_ = new ResizeObserver(() => this.updateSize())),
                            (this.controls = t.controls || zR()),
                            (this.interactions = t.interactions || KR({ onFocusOnly: !0 })),
                            (this.overlays_ = t.overlays),
                            (this.overlayIdIndex_ = {}),
                            (this.renderer_ = null),
                            (this.postRenderFunctions_ = []),
                            (this.tileQueue_ = new M4(this.getTilePriority.bind(this), this.handleTileChange_.bind(this))),
                            this.addChangeListener('layergroup', this.handleLayerGroupChanged_),
                            this.addChangeListener('view', this.handleViewChanged_),
                            this.addChangeListener('size', this.handleSizeChanged_),
                            this.addChangeListener('target', this.handleTargetChanged_),
                            this.setProperties(t.values);
                        const i = this;
                        e.view &&
                            !(e.view instanceof Si) &&
                            e.view.then(function (r) {
                                i.setView(new Si(r));
                            }),
                            this.controls.addEventListener('add', (r) => {
                                r.element.setMap(this);
                            }),
                            this.controls.addEventListener('remove', (r) => {
                                r.element.setMap(null);
                            }),
                            this.interactions.addEventListener('add', (r) => {
                                r.element.setMap(this);
                            }),
                            this.interactions.addEventListener('remove', (r) => {
                                r.element.setMap(null);
                            }),
                            this.overlays_.addEventListener('add', (r) => {
                                this.addOverlayInternal_(r.element);
                            }),
                            this.overlays_.addEventListener('remove', (r) => {
                                const o = r.element.getId();
                                void 0 !== o && delete this.overlayIdIndex_[o.toString()], r.element.setMap(null);
                            }),
                            this.controls.forEach((r) => {
                                r.setMap(this);
                            }),
                            this.interactions.forEach((r) => {
                                r.setMap(this);
                            }),
                            this.overlays_.forEach(this.addOverlayInternal_.bind(this));
                    }
                    addControl(e) {
                        this.getControls().push(e);
                    }
                    addInteraction(e) {
                        this.getInteractions().push(e);
                    }
                    addLayer(e) {
                        this.getLayerGroup().getLayers().push(e);
                    }
                    handleLayerAdd_(e) {
                        JR(e.layer, this);
                    }
                    addOverlay(e) {
                        this.getOverlays().push(e);
                    }
                    addOverlayInternal_(e) {
                        const t = e.getId();
                        void 0 !== t && (this.overlayIdIndex_[t.toString()] = e), e.setMap(this);
                    }
                    disposeInternal() {
                        this.controls.clear(),
                            this.interactions.clear(),
                            this.overlays_.clear(),
                            this.resizeObserver_.disconnect(),
                            this.setTarget(null),
                            super.disposeInternal();
                    }
                    forEachFeatureAtPixel(e, t, i) {
                        if (!this.frameState_ || !this.renderer_) return;
                        const r = this.getCoordinateFromPixelInternal(e);
                        return this.renderer_.forEachFeatureAtCoordinate(
                            r,
                            this.frameState_,
                            void 0 !== (i = void 0 !== i ? i : {}).hitTolerance ? i.hitTolerance : 0,
                            !1 !== i.checkWrapped,
                            t,
                            null,
                            void 0 !== i.layerFilter ? i.layerFilter : ha,
                            null,
                        );
                    }
                    getFeaturesAtPixel(e, t) {
                        const i = [];
                        return (
                            this.forEachFeatureAtPixel(
                                e,
                                function (r) {
                                    i.push(r);
                                },
                                t,
                            ),
                            i
                        );
                    }
                    getAllLayers() {
                        const e = [];
                        return (
                            (function t(i) {
                                i.forEach(function (r) {
                                    r instanceof nf ? t(r.getLayers()) : e.push(r);
                                });
                            })(this.getLayers()),
                            e
                        );
                    }
                    hasFeatureAtPixel(e, t) {
                        if (!this.frameState_ || !this.renderer_) return !1;
                        const i = this.getCoordinateFromPixelInternal(e);
                        return this.renderer_.hasFeatureAtCoordinate(
                            i,
                            this.frameState_,
                            void 0 !== (t = void 0 !== t ? t : {}).hitTolerance ? t.hitTolerance : 0,
                            !1 !== t.checkWrapped,
                            void 0 !== t.layerFilter ? t.layerFilter : ha,
                            null,
                        );
                    }
                    getEventCoordinate(e) {
                        return this.getCoordinateFromPixel(this.getEventPixel(e));
                    }
                    getEventCoordinateInternal(e) {
                        return this.getCoordinateFromPixelInternal(this.getEventPixel(e));
                    }
                    getEventPixel(e) {
                        const i = this.viewport_.getBoundingClientRect(),
                            r = this.getSize(),
                            a = 'changedTouches' in e ? e.changedTouches[0] : e;
                        return [(a.clientX - i.left) / (i.width / r[0]), (a.clientY - i.top) / (i.height / r[1])];
                    }
                    getTarget() {
                        return this.get('target');
                    }
                    getTargetElement() {
                        return this.targetElement_;
                    }
                    getCoordinateFromPixel(e) {
                        return Hy(this.getCoordinateFromPixelInternal(e), this.getView().getProjection());
                    }
                    getCoordinateFromPixelInternal(e) {
                        const t = this.frameState_;
                        return t ? Ct(t.pixelToCoordinateTransform, e.slice()) : null;
                    }
                    getControls() {
                        return this.controls;
                    }
                    getOverlays() {
                        return this.overlays_;
                    }
                    getOverlayById(e) {
                        const t = this.overlayIdIndex_[e.toString()];
                        return void 0 !== t ? t : null;
                    }
                    getInteractions() {
                        return this.interactions;
                    }
                    getLayerGroup() {
                        return this.get('layergroup');
                    }
                    setLayers(e) {
                        const t = this.getLayerGroup();
                        if (e instanceof Ii) return void t.setLayers(e);
                        const i = t.getLayers();
                        i.clear(), i.extend(e);
                    }
                    getLayers() {
                        return this.getLayerGroup().getLayers();
                    }
                    getLoadingOrNotReady() {
                        const e = this.getLayerGroup().getLayerStatesArray();
                        for (let t = 0, i = e.length; t < i; ++t) {
                            const r = e[t];
                            if (!r.visible) continue;
                            const o = r.layer.getRenderer();
                            if (o && !o.ready) return !0;
                            const s = r.layer.getSource();
                            if (s && s.loading) return !0;
                        }
                        return !1;
                    }
                    getPixelFromCoordinate(e) {
                        const t = er(e, this.getView().getProjection());
                        return this.getPixelFromCoordinateInternal(t);
                    }
                    getPixelFromCoordinateInternal(e) {
                        const t = this.frameState_;
                        return t ? Ct(t.coordinateToPixelTransform, e.slice(0, 2)) : null;
                    }
                    getRenderer() {
                        return this.renderer_;
                    }
                    getSize() {
                        return this.get('size');
                    }
                    getView() {
                        return this.get('view');
                    }
                    getViewport() {
                        return this.viewport_;
                    }
                    getOverlayContainer() {
                        return this.overlayContainer_;
                    }
                    getOverlayContainerStopEvent() {
                        return this.overlayContainerStopEvent_;
                    }
                    getOwnerDocument() {
                        const e = this.getTargetElement();
                        return e ? e.ownerDocument : document;
                    }
                    getTilePriority(e, t, i, r) {
                        return (function R4(n, e, t, i, r) {
                            if (!n || !(t in n.wantedTiles) || !n.wantedTiles[t][e.getKey()]) return rf;
                            const o = n.viewState.center,
                                s = i[0] - o[0],
                                a = i[1] - o[1];
                            return 65536 * Math.log(r) + Math.sqrt(s * s + a * a) / r;
                        })(this.frameState_, e, t, i, r);
                    }
                    handleBrowserEvent(e, t) {
                        const i = new jr((t = t || e.type), this, e);
                        this.handleMapBrowserEvent(i);
                    }
                    handleMapBrowserEvent(e) {
                        if (!this.frameState_) return;
                        const t = e.originalEvent,
                            i = t.type;
                        if ('pointerdown' === i || 'wheel' === i || 'keydown' === i) {
                            const r = this.getOwnerDocument(),
                                o = this.viewport_.getRootNode ? this.viewport_.getRootNode() : r,
                                s = t.target;
                            if (this.overlayContainerStopEvent_.contains(s) || !(o === r ? r.documentElement : o).contains(s)) return;
                        }
                        if (((e.frameState = this.frameState_), !1 !== this.dispatchEvent(e))) {
                            const r = this.getInteractions().getArray().slice();
                            for (let o = r.length - 1; o >= 0; o--) {
                                const s = r[o];
                                if (
                                    s.getMap() === this &&
                                    s.getActive() &&
                                    this.getTargetElement() &&
                                    (!s.handleEvent(e) || e.propagationStopped)
                                )
                                    break;
                            }
                        }
                    }
                    handlePostRender() {
                        const e = this.frameState_,
                            t = this.tileQueue_;
                        if (!t.isEmpty()) {
                            let r = this.maxTilesLoading_,
                                o = r;
                            if (e) {
                                const s = e.viewHints;
                                if (s[0] || s[1]) {
                                    const a = Date.now() - e.time > 8;
                                    (r = a ? 0 : 8), (o = a ? 0 : 2);
                                }
                            }
                            t.getTilesLoading() < r && (t.reprioritize(), t.loadMoreTiles(r, o));
                        }
                        e &&
                            this.renderer_ &&
                            !e.animate &&
                            (!0 === this.renderComplete_
                                ? (this.hasListener('rendercomplete') && this.renderer_.dispatchRenderEvent('rendercomplete', e),
                                  !1 === this.loaded_ && ((this.loaded_ = !0), this.dispatchEvent(new Ia('loadend', this, e))))
                                : !0 === this.loaded_ && ((this.loaded_ = !1), this.dispatchEvent(new Ia('loadstart', this, e))));
                        const i = this.postRenderFunctions_;
                        for (let r = 0, o = i.length; r < o; ++r) i[r](this, e);
                        i.length = 0;
                    }
                    handleSizeChanged_() {
                        this.getView() && !this.getView().getAnimating() && this.getView().resolveConstraints(0), this.render();
                    }
                    handleTargetChanged_() {
                        if (this.mapBrowserEventHandler_) {
                            for (let i = 0, r = this.targetChangeHandlerKeys_.length; i < r; ++i) je(this.targetChangeHandlerKeys_[i]);
                            (this.targetChangeHandlerKeys_ = null),
                                this.viewport_.removeEventListener('contextmenu', this.boundHandleBrowserEvent_),
                                this.viewport_.removeEventListener('wheel', this.boundHandleBrowserEvent_),
                                this.mapBrowserEventHandler_.dispose(),
                                (this.mapBrowserEventHandler_ = null),
                                ab(this.viewport_);
                        }
                        if (this.targetElement_) {
                            this.resizeObserver_.unobserve(this.targetElement_);
                            const i = this.targetElement_.getRootNode();
                            i instanceof ShadowRoot && this.resizeObserver_.unobserve(i.host), this.setSize(void 0);
                        }
                        const e = this.getTarget(),
                            t = 'string' == typeof e ? document.getElementById(e) : e;
                        if (((this.targetElement_ = t), t)) {
                            t.appendChild(this.viewport_),
                                this.renderer_ || (this.renderer_ = new E4(this)),
                                (this.mapBrowserEventHandler_ = new I4(this, this.moveTolerance_));
                            for (const o in tt) this.mapBrowserEventHandler_.addEventListener(tt[o], this.handleMapBrowserEvent.bind(this));
                            this.viewport_.addEventListener('contextmenu', this.boundHandleBrowserEvent_, !1),
                                this.viewport_.addEventListener('wheel', this.boundHandleBrowserEvent_, !!FM && { passive: !1 });
                            const i = this.keyboardEventTarget_ ? this.keyboardEventTarget_ : t;
                            this.targetChangeHandlerKeys_ = [
                                me(i, 'keydown', this.handleBrowserEvent, this),
                                me(i, 'keypress', this.handleBrowserEvent, this),
                            ];
                            const r = t.getRootNode();
                            r instanceof ShadowRoot && this.resizeObserver_.observe(r.host), this.resizeObserver_.observe(t);
                        } else
                            this.renderer_ &&
                                (clearTimeout(this.postRenderTimeoutHandle_),
                                (this.postRenderTimeoutHandle_ = void 0),
                                (this.postRenderFunctions_.length = 0),
                                this.renderer_.dispose(),
                                (this.renderer_ = null)),
                                this.animationDelayKey_ &&
                                    (cancelAnimationFrame(this.animationDelayKey_), (this.animationDelayKey_ = void 0));
                        this.updateSize();
                    }
                    handleTileChange_() {
                        this.render();
                    }
                    handleViewPropertyChanged_() {
                        this.render();
                    }
                    handleViewChanged_() {
                        this.viewPropertyListenerKey_ && (je(this.viewPropertyListenerKey_), (this.viewPropertyListenerKey_ = null)),
                            this.viewChangeListenerKey_ && (je(this.viewChangeListenerKey_), (this.viewChangeListenerKey_ = null));
                        const e = this.getView();
                        e &&
                            (this.updateViewportSize_(),
                            (this.viewPropertyListenerKey_ = me(e, 'propertychange', this.handleViewPropertyChanged_, this)),
                            (this.viewChangeListenerKey_ = me(e, 'change', this.handleViewPropertyChanged_, this)),
                            e.resolveConstraints(0)),
                            this.render();
                    }
                    handleLayerGroupChanged_() {
                        this.layerGroupPropertyListenerKeys_ &&
                            (this.layerGroupPropertyListenerKeys_.forEach(je), (this.layerGroupPropertyListenerKeys_ = null));
                        const e = this.getLayerGroup();
                        e &&
                            (this.handleLayerAdd_(new Br('addlayer', e)),
                            (this.layerGroupPropertyListenerKeys_ = [
                                me(e, 'propertychange', this.render, this),
                                me(e, 'change', this.render, this),
                                me(e, 'addlayer', this.handleLayerAdd_, this),
                                me(e, 'removelayer', this.handleLayerRemove_, this),
                            ])),
                            this.render();
                    }
                    isRendered() {
                        return !!this.frameState_;
                    }
                    animationDelay_() {
                        (this.animationDelayKey_ = void 0), this.renderFrame_(Date.now());
                    }
                    renderSync() {
                        this.animationDelayKey_ && cancelAnimationFrame(this.animationDelayKey_), this.animationDelay_();
                    }
                    redrawText() {
                        const e = this.getLayerGroup().getLayerStatesArray();
                        for (let t = 0, i = e.length; t < i; ++t) {
                            const r = e[t].layer;
                            r.hasRenderer() && r.getRenderer().handleFontsChanged();
                        }
                    }
                    render() {
                        this.renderer_ &&
                            void 0 === this.animationDelayKey_ &&
                            (this.animationDelayKey_ = requestAnimationFrame(this.animationDelay_));
                    }
                    flushDeclutterItems() {
                        const e = this.frameState_;
                        e && this.renderer_.flushDeclutterItems(e);
                    }
                    removeControl(e) {
                        return this.getControls().remove(e);
                    }
                    removeInteraction(e) {
                        return this.getInteractions().remove(e);
                    }
                    removeLayer(e) {
                        return this.getLayerGroup().getLayers().remove(e);
                    }
                    handleLayerRemove_(e) {
                        QR(e.layer);
                    }
                    removeOverlay(e) {
                        return this.getOverlays().remove(e);
                    }
                    renderFrame_(e) {
                        const t = this.getSize(),
                            i = this.getView(),
                            r = this.frameState_;
                        let o = null;
                        if (void 0 !== t && ZR(t) && i && i.isDef()) {
                            const s = i.getHints(this.frameState_ ? this.frameState_.viewHints : void 0),
                                a = i.getState();
                            if (
                                ((o = {
                                    animate: !1,
                                    coordinateToPixelTransform: this.coordinateToPixelTransform_,
                                    declutterTree: null,
                                    extent: Ay(a.center, a.resolution, a.rotation, t),
                                    index: this.frameIndex_++,
                                    layerIndex: 0,
                                    layerStatesArray: this.getLayerGroup().getLayerStatesArray(),
                                    pixelRatio: this.pixelRatio_,
                                    pixelToCoordinateTransform: this.pixelToCoordinateTransform_,
                                    postRenderFunctions: [],
                                    size: t,
                                    tileQueue: this.tileQueue_,
                                    time: e,
                                    usedTiles: {},
                                    viewState: a,
                                    viewHints: s,
                                    wantedTiles: {},
                                    mapId: Se(this),
                                    renderTargets: {},
                                }),
                                a.nextCenter && a.nextResolution)
                            ) {
                                const l = isNaN(a.nextRotation) ? a.rotation : a.nextRotation;
                                o.nextExtent = Ay(a.nextCenter, a.nextResolution, l, t);
                            }
                        }
                        (this.frameState_ = o),
                            this.renderer_.renderFrame(o),
                            o &&
                                (o.animate && this.render(),
                                Array.prototype.push.apply(this.postRenderFunctions_, o.postRenderFunctions),
                                r &&
                                    (!this.previousExtent_ || (!gc(this.previousExtent_) && !pc(o.extent, this.previousExtent_))) &&
                                    (this.dispatchEvent(new Ia('movestart', this, r)), (this.previousExtent_ = Fr(this.previousExtent_))),
                                this.previousExtent_ &&
                                    !o.viewHints[0] &&
                                    !o.viewHints[1] &&
                                    !pc(o.extent, this.previousExtent_) &&
                                    (this.dispatchEvent(new Ia('moveend', this, o)), jM(o.extent, this.previousExtent_))),
                            this.dispatchEvent(new Ia('postrender', this, o)),
                            (this.renderComplete_ =
                                this.hasListener('loadstart') || this.hasListener('loadend') || this.hasListener('rendercomplete')
                                    ? !this.tileQueue_.getTilesLoading() && !this.tileQueue_.getCount() && !this.getLoadingOrNotReady()
                                    : void 0),
                            this.postRenderTimeoutHandle_ ||
                                (this.postRenderTimeoutHandle_ = setTimeout(() => {
                                    (this.postRenderTimeoutHandle_ = void 0), this.handlePostRender();
                                }, 0));
                    }
                    setLayerGroup(e) {
                        const t = this.getLayerGroup();
                        t && this.handleLayerRemove_(new Br('removelayer', t)), this.set('layergroup', e);
                    }
                    setSize(e) {
                        this.set('size', e);
                    }
                    setTarget(e) {
                        this.set('target', e);
                    }
                    setView(e) {
                        if (!e || e instanceof Si) return void this.set('view', e);
                        this.set('view', new Si());
                        const t = this;
                        e.then(function (i) {
                            t.setView(new Si(i));
                        });
                    }
                    updateSize() {
                        const e = this.getTargetElement();
                        let t;
                        if (e) {
                            const r = getComputedStyle(e),
                                o =
                                    e.offsetWidth -
                                    parseFloat(r.borderLeftWidth) -
                                    parseFloat(r.paddingLeft) -
                                    parseFloat(r.paddingRight) -
                                    parseFloat(r.borderRightWidth),
                                s =
                                    e.offsetHeight -
                                    parseFloat(r.borderTopWidth) -
                                    parseFloat(r.paddingTop) -
                                    parseFloat(r.paddingBottom) -
                                    parseFloat(r.borderBottomWidth);
                            !isNaN(o) &&
                                !isNaN(s) &&
                                ((t = [o, s]),
                                !ZR(t) &&
                                    (e.offsetWidth || e.offsetHeight || e.getClientRects().length) &&
                                    aR("No map visible because the map container's width or height are 0."));
                        }
                        const i = this.getSize();
                        t && (!i || !Pr(t, i)) && (this.setSize(t), this.updateViewportSize_());
                    }
                    updateViewportSize_() {
                        const e = this.getView();
                        if (e) {
                            let t;
                            const i = getComputedStyle(this.viewport_);
                            i.width && i.height && (t = [parseInt(i.width, 10), parseInt(i.height, 10)]), e.setViewportSize(t);
                        }
                    }
                },
                vY = class bY extends Xh {
                    constructor(e) {
                        e = e || {};
                        const t = Object.assign({}, e);
                        delete t.preload,
                            delete t.useInterimTilesOnError,
                            super(t),
                            this.setPreload(void 0 !== e.preload ? e.preload : 0),
                            this.setUseInterimTilesOnError(void 0 === e.useInterimTilesOnError || e.useInterimTilesOnError);
                    }
                    getPreload() {
                        return this.get('preload');
                    }
                    setPreload(e) {
                        this.set('preload', e);
                    }
                    getUseInterimTilesOnError() {
                        return this.get('useInterimTilesOnError');
                    }
                    setUseInterimTilesOnError(e) {
                        this.set('useInterimTilesOnError', e);
                    }
                    getData(e) {
                        return super.getData(e);
                    }
                },
                wY = class EY extends RM {
                    constructor(e) {
                        super(),
                            (this.ready = !0),
                            (this.boundHandleImageChange_ = this.handleImageChange_.bind(this)),
                            (this.layer_ = e),
                            (this.declutterExecutorGroup = null);
                    }
                    getFeatures(e) {
                        return J();
                    }
                    getData(e) {
                        return null;
                    }
                    prepareFrame(e) {
                        return J();
                    }
                    renderFrame(e, t) {
                        return J();
                    }
                    loadedTileCallback(e, t, i) {
                        e[t] || (e[t] = {}), (e[t][i.tileCoord.toString()] = i);
                    }
                    createLoadedTileFinder(e, t, i) {
                        return (r, o) => {
                            const s = this.loadedTileCallback.bind(this, i, r);
                            return e.forEachLoadedTile(t, r, o, s);
                        };
                    }
                    forEachFeatureAtCoordinate(e, t, i, r, o) {}
                    getLayer() {
                        return this.layer_;
                    }
                    handleFontsChanged() {}
                    handleImageChange_(e) {
                        const t = e.target;
                        (2 === t.getState() || 3 === t.getState()) && this.renderIfReadyAndVisible();
                    }
                    loadImage(e) {
                        let t = e.getState();
                        return (
                            2 != t && 3 != t && e.addEventListener('change', this.boundHandleImageChange_),
                            0 == t && (e.load(), (t = e.getState())),
                            2 == t
                        );
                    }
                    renderIfReadyAndVisible() {
                        const e = this.getLayer();
                        e && e.getVisible() && 'ready' === e.getSourceState() && e.changed();
                    }
                    disposeInternal() {
                        delete this.layer_, super.disposeInternal();
                    }
                },
                eA = [];
            let Sa = null;
            const tA = class DY extends wY {
                    constructor(e) {
                        super(e),
                            (this.container = null),
                            (this.tempTransform = [1, 0, 0, 1, 0, 0]),
                            (this.pixelTransform = [1, 0, 0, 1, 0, 0]),
                            (this.inversePixelTransform = [1, 0, 0, 1, 0, 0]),
                            (this.context = null),
                            (this.containerReused = !1),
                            (this.pixelContext_ = null),
                            (this.frameState = null);
                    }
                    getImageData(e, t, i) {
                        let r;
                        Sa ||
                            (function CY() {
                                Sa = Zt(1, 1, void 0, { willReadFrequently: !0 });
                            })(),
                            Sa.clearRect(0, 0, 1, 1);
                        try {
                            Sa.drawImage(e, t, i, 1, 1, 0, 0, 1, 1), (r = Sa.getImageData(0, 0, 1, 1).data);
                        } catch {
                            return (Sa = null), null;
                        }
                        return r;
                    }
                    getBackground(e) {
                        let i = this.getLayer().getBackground();
                        return 'function' == typeof i && (i = i(e.viewState.resolution)), i || void 0;
                    }
                    useContainer(e, t, i) {
                        const r = this.getLayer().getClassName();
                        let o, s;
                        if (e && e.className === r && (!i || (e && e.style.backgroundColor && Pr(Nh(e.style.backgroundColor), Nh(i))))) {
                            const a = e.firstElementChild;
                            a instanceof HTMLCanvasElement && (s = a.getContext('2d'));
                        }
                        if (
                            (s && s.canvas.style.transform === t
                                ? ((this.container = e), (this.context = s), (this.containerReused = !0))
                                : this.containerReused
                                  ? ((this.container = null), (this.context = null), (this.containerReused = !1))
                                  : this.container && (this.container.style.backgroundColor = null),
                            !this.container)
                        ) {
                            (o = document.createElement('div')), (o.className = r);
                            let a = o.style;
                            (a.position = 'absolute'), (a.width = '100%'), (a.height = '100%'), (s = Zt());
                            const l = s.canvas;
                            o.appendChild(l),
                                (a = l.style),
                                (a.position = 'absolute'),
                                (a.left = '0'),
                                (a.transformOrigin = 'top left'),
                                (this.container = o),
                                (this.context = s);
                        }
                        !this.containerReused && i && !this.container.style.backgroundColor && (this.container.style.backgroundColor = i);
                    }
                    clipUnrotated(e, t, i) {
                        const r = Oo(i),
                            o = Th(i),
                            s = Sh(i),
                            a = xh(i);
                        Ct(t.coordinateToPixelTransform, r),
                            Ct(t.coordinateToPixelTransform, o),
                            Ct(t.coordinateToPixelTransform, s),
                            Ct(t.coordinateToPixelTransform, a);
                        const l = this.inversePixelTransform;
                        Ct(l, r),
                            Ct(l, o),
                            Ct(l, s),
                            Ct(l, a),
                            e.save(),
                            e.beginPath(),
                            e.moveTo(Math.round(r[0]), Math.round(r[1])),
                            e.lineTo(Math.round(o[0]), Math.round(o[1])),
                            e.lineTo(Math.round(s[0]), Math.round(s[1])),
                            e.lineTo(Math.round(a[0]), Math.round(a[1])),
                            e.clip();
                    }
                    dispatchRenderEvent_(e, t, i) {
                        const r = this.getLayer();
                        if (r.hasListener(e)) {
                            const o = new PR(e, this.inversePixelTransform, i, t);
                            r.dispatchEvent(o);
                        }
                    }
                    preRender(e, t) {
                        (this.frameState = t), this.dispatchRenderEvent_('prerender', e, t);
                    }
                    postRender(e, t) {
                        this.dispatchRenderEvent_('postrender', e, t);
                    }
                    getRenderTransform(e, t, i, r, o, s, a) {
                        const u = r / t;
                        return Qi(this.tempTransform, o / 2, s / 2, u, -u, -i, -e[0] + a, -e[1]);
                    }
                    disposeInternal() {
                        delete this.frameState, super.disposeInternal();
                    }
                },
                nA = class IY extends fc {
                    constructor(e, t, i) {
                        super(),
                            (i = i || {}),
                            (this.tileCoord = e),
                            (this.state = t),
                            (this.interimTile = null),
                            (this.key = ''),
                            (this.transition_ = void 0 === i.transition ? 250 : i.transition),
                            (this.transitionStarts_ = {}),
                            (this.interpolate = !!i.interpolate);
                    }
                    changed() {
                        this.dispatchEvent('change');
                    }
                    release() {
                        3 === this.state && this.setState(4);
                    }
                    getKey() {
                        return this.key + '/' + this.tileCoord;
                    }
                    getInterimTile() {
                        if (!this.interimTile) return this;
                        let e = this.interimTile;
                        do {
                            if (2 == e.getState()) return (this.transition_ = 0), e;
                            e = e.interimTile;
                        } while (e);
                        return this;
                    }
                    refreshInterimChain() {
                        if (!this.interimTile) return;
                        let e = this.interimTile,
                            t = this;
                        do {
                            if (2 == e.getState()) {
                                e.interimTile = null;
                                break;
                            }
                            1 == e.getState() ? (t = e) : 0 == e.getState() ? (t.interimTile = e.interimTile) : (t = e),
                                (e = t.interimTile);
                        } while (e);
                    }
                    getTileCoord() {
                        return this.tileCoord;
                    }
                    getState() {
                        return this.state;
                    }
                    setState(e) {
                        if (3 !== this.state && this.state > e) throw new Error('Tile load sequence violation');
                        (this.state = e), this.changed();
                    }
                    load() {
                        J();
                    }
                    getAlpha(e, t) {
                        if (!this.transition_) return 1;
                        let i = this.transitionStarts_[e];
                        if (i) {
                            if (-1 === i) return 1;
                        } else (i = t), (this.transitionStarts_[e] = i);
                        const r = t - i + 1e3 / 60;
                        return r >= this.transition_ ? 1 : _R(r / this.transition_);
                    }
                    inTransition(e) {
                        return !!this.transition_ && -1 !== this.transitionStarts_[e];
                    }
                    endTransition(e) {
                        this.transition_ && (this.transitionStarts_[e] = -1);
                    }
                };
            function yb(n, e, t) {
                const i = n;
                let r = !0,
                    o = !1,
                    s = !1;
                const a = [
                    vh(i, 'load', function () {
                        (s = !0), o || e();
                    }),
                ];
                return (
                    i.src && k8
                        ? ((o = !0),
                          i
                              .decode()
                              .then(function () {
                                  r && e();
                              })
                              .catch(function (l) {
                                  r && (s ? e() : t());
                              }))
                        : a.push(vh(i, 'error', t)),
                    function () {
                        (r = !1), a.forEach(je);
                    }
                );
            }
            const iA = class TY extends nA {
                    constructor(e, t, i, r, o, s) {
                        super(e, t, s),
                            (this.crossOrigin_ = r),
                            (this.src_ = i),
                            (this.key = i),
                            (this.image_ = new Image()),
                            null !== r && (this.image_.crossOrigin = r),
                            (this.unlisten_ = null),
                            (this.tileLoadFunction_ = o);
                    }
                    getImage() {
                        return this.image_;
                    }
                    setImage(e) {
                        (this.image_ = e), (this.state = 2), this.unlistenImage_(), this.changed();
                    }
                    handleImageError_() {
                        (this.state = 3),
                            this.unlistenImage_(),
                            (this.image_ = (function MY() {
                                const n = Zt(1, 1);
                                return (n.fillStyle = 'rgba(0,0,0,0)'), n.fillRect(0, 0, 1, 1), n.canvas;
                            })()),
                            this.changed();
                    }
                    handleImageLoad_() {
                        const e = this.image_;
                        (this.state = e.naturalWidth && e.naturalHeight ? 2 : 4), this.unlistenImage_(), this.changed();
                    }
                    load() {
                        3 == this.state &&
                            ((this.state = 0),
                            (this.image_ = new Image()),
                            null !== this.crossOrigin_ && (this.image_.crossOrigin = this.crossOrigin_)),
                            0 == this.state &&
                                ((this.state = 1),
                                this.changed(),
                                this.tileLoadFunction_(this, this.src_),
                                (this.unlisten_ = yb(this.image_, this.handleImageLoad_.bind(this), this.handleImageError_.bind(this))));
                    }
                    unlistenImage_() {
                        this.unlisten_ && (this.unlisten_(), (this.unlisten_ = null));
                    }
                },
                NY = class OY {
                    constructor(e, t, i, r, o, s) {
                        (this.sourceProj_ = e), (this.targetProj_ = t);
                        let a = {};
                        const l = vc(this.targetProj_, this.sourceProj_);
                        (this.transformInv_ = function (_) {
                            const b = _[0] + '/' + _[1];
                            return a[b] || (a[b] = l(_)), a[b];
                        }),
                            (this.maxSourceExtent_ = r),
                            (this.errorThresholdSquared_ = o * o),
                            (this.triangles_ = []),
                            (this.wrapsXInSource_ = !1),
                            (this.canWrapXInSource_ =
                                this.sourceProj_.canWrapX() &&
                                !!r &&
                                !!this.sourceProj_.getExtent() &&
                                qe(r) >= qe(this.sourceProj_.getExtent())),
                            (this.sourceWorldWidth_ = this.sourceProj_.getExtent() ? qe(this.sourceProj_.getExtent()) : null),
                            (this.targetWorldWidth_ = this.targetProj_.getExtent() ? qe(this.targetProj_.getExtent()) : null);
                        const c = Oo(i),
                            u = Th(i),
                            d = Sh(i),
                            h = xh(i),
                            f = this.transformInv_(c),
                            m = this.transformInv_(u),
                            p = this.transformInv_(d),
                            g = this.transformInv_(h),
                            y = 10 + (s ? Math.max(0, Math.ceil(Math.log2(Ih(i) / (s * s * 256 * 256)))) : 0);
                        if ((this.addQuad_(c, u, d, h, f, m, p, g, y), this.wrapsXInSource_)) {
                            let _ = 1 / 0;
                            this.triangles_.forEach(function (b, v, E) {
                                _ = Math.min(_, b.source[0][0], b.source[1][0], b.source[2][0]);
                            }),
                                this.triangles_.forEach((b) => {
                                    if (Math.max(b.source[0][0], b.source[1][0], b.source[2][0]) - _ > this.sourceWorldWidth_ / 2) {
                                        const v = [
                                            [b.source[0][0], b.source[0][1]],
                                            [b.source[1][0], b.source[1][1]],
                                            [b.source[2][0], b.source[2][1]],
                                        ];
                                        v[0][0] - _ > this.sourceWorldWidth_ / 2 && (v[0][0] -= this.sourceWorldWidth_),
                                            v[1][0] - _ > this.sourceWorldWidth_ / 2 && (v[1][0] -= this.sourceWorldWidth_),
                                            v[2][0] - _ > this.sourceWorldWidth_ / 2 && (v[2][0] -= this.sourceWorldWidth_);
                                        const E = Math.min(v[0][0], v[1][0], v[2][0]);
                                        Math.max(v[0][0], v[1][0], v[2][0]) - E < this.sourceWorldWidth_ / 2 && (b.source = v);
                                    }
                                });
                        }
                        a = {};
                    }
                    addTriangle_(e, t, i, r, o, s) {
                        this.triangles_.push({ source: [r, o, s], target: [e, t, i] });
                    }
                    addQuad_(e, t, i, r, o, s, a, l, c) {
                        const u = BM([o, s, a, l]),
                            d = this.sourceWorldWidth_ ? qe(u) / this.sourceWorldWidth_ : null,
                            h = this.sourceWorldWidth_,
                            f = this.sourceProj_.canWrapX() && d > 0.5 && d < 1;
                        let m = !1;
                        if (
                            (c > 0 &&
                                (this.targetProj_.isGlobal() &&
                                    this.targetWorldWidth_ &&
                                    (m = qe(BM([e, t, i, r])) / this.targetWorldWidth_ > 0.25 || m),
                                !f && this.sourceProj_.isGlobal() && d && (m = d > 0.25 || m)),
                            !m &&
                                this.maxSourceExtent_ &&
                                isFinite(u[0]) &&
                                isFinite(u[1]) &&
                                isFinite(u[2]) &&
                                isFinite(u[3]) &&
                                !dn(u, this.maxSourceExtent_))
                        )
                            return;
                        let p = 0;
                        if (
                            !(
                                m ||
                                (isFinite(o[0]) &&
                                    isFinite(o[1]) &&
                                    isFinite(s[0]) &&
                                    isFinite(s[1]) &&
                                    isFinite(a[0]) &&
                                    isFinite(a[1]) &&
                                    isFinite(l[0]) &&
                                    isFinite(l[1]))
                            )
                        )
                            if (c > 0) m = !0;
                            else if (
                                ((p =
                                    (isFinite(o[0]) && isFinite(o[1]) ? 0 : 8) +
                                    (isFinite(s[0]) && isFinite(s[1]) ? 0 : 4) +
                                    (isFinite(a[0]) && isFinite(a[1]) ? 0 : 2) +
                                    (isFinite(l[0]) && isFinite(l[1]) ? 0 : 1)),
                                1 != p && 2 != p && 4 != p && 8 != p)
                            )
                                return;
                        if (c > 0) {
                            if (!m) {
                                const y = this.transformInv_([(e[0] + i[0]) / 2, (e[1] + i[1]) / 2]);
                                let _;
                                _ = f ? (ya(o[0], h) + ya(a[0], h)) / 2 - ya(y[0], h) : (o[0] + a[0]) / 2 - y[0];
                                const b = (o[1] + a[1]) / 2 - y[1];
                                m = _ * _ + b * b > this.errorThresholdSquared_;
                            }
                            if (m) {
                                if (Math.abs(e[0] - i[0]) <= Math.abs(e[1] - i[1])) {
                                    const g = [(t[0] + i[0]) / 2, (t[1] + i[1]) / 2],
                                        y = this.transformInv_(g),
                                        _ = [(r[0] + e[0]) / 2, (r[1] + e[1]) / 2],
                                        b = this.transformInv_(_);
                                    this.addQuad_(e, t, g, _, o, s, y, b, c - 1), this.addQuad_(_, g, i, r, b, y, a, l, c - 1);
                                } else {
                                    const g = [(e[0] + t[0]) / 2, (e[1] + t[1]) / 2],
                                        y = this.transformInv_(g),
                                        _ = [(i[0] + r[0]) / 2, (i[1] + r[1]) / 2],
                                        b = this.transformInv_(_);
                                    this.addQuad_(e, g, _, r, o, y, b, l, c - 1), this.addQuad_(g, t, i, _, y, s, a, b, c - 1);
                                }
                                return;
                            }
                        }
                        if (f) {
                            if (!this.canWrapXInSource_) return;
                            this.wrapsXInSource_ = !0;
                        }
                        11 & p || this.addTriangle_(e, i, r, o, a, l),
                            14 & p || this.addTriangle_(e, i, t, o, a, s),
                            p && (13 & p || this.addTriangle_(t, r, e, s, l, o), 7 & p || this.addTriangle_(t, r, i, s, l, a));
                    }
                    calculateSourceExtent() {
                        const e = [1 / 0, 1 / 0, -1 / 0, -1 / 0];
                        return (
                            this.triangles_.forEach(function (t, i, r) {
                                const o = t.source;
                                ga(e, o[0]), ga(e, o[1]), ga(e, o[2]);
                            }),
                            e
                        );
                    }
                    getTriangles() {
                        return this.triangles_;
                    }
                };
            let bb;
            const Ta = [];
            function oA(n, e, t, i, r) {
                n.beginPath(),
                    n.moveTo(0, 0),
                    n.lineTo(e, t),
                    n.lineTo(i, r),
                    n.closePath(),
                    n.save(),
                    n.clip(),
                    n.fillRect(0, 0, Math.max(e, i) + 1, Math.max(t, r)),
                    n.restore();
            }
            function vb(n, e) {
                return Math.abs(n[4 * e] - 210) > 2 || Math.abs(n[4 * e + 3] - 191.25) > 2;
            }
            function sA(n, e, t, i) {
                const r = Ec(t, e, n);
                let o = uR(e, i, t);
                const s = e.getMetersPerUnit();
                void 0 !== s && (o *= s);
                const a = n.getMetersPerUnit();
                void 0 !== a && (o /= a);
                const l = n.getExtent();
                if (!l || Dh(l, r)) {
                    const c = uR(n, o, r) / o;
                    isFinite(c) && c > 0 && (o /= c);
                }
                return o;
            }
            const Eb = class LY extends nA {
                constructor(e, t, i, r, o, s, a, l, c, u, d, h) {
                    super(o, 0, { interpolate: !!h }),
                        (this.renderEdges_ = void 0 !== d && d),
                        (this.pixelRatio_ = a),
                        (this.gutter_ = l),
                        (this.canvas_ = null),
                        (this.sourceTileGrid_ = t),
                        (this.targetTileGrid_ = r),
                        (this.wrappedTileCoord_ = s || o),
                        (this.sourceTiles_ = []),
                        (this.sourcesListenerKeys_ = null),
                        (this.sourceZ_ = 0);
                    const f = r.getTileCoordExtent(this.wrappedTileCoord_),
                        m = this.targetTileGrid_.getExtent();
                    let p = this.sourceTileGrid_.getExtent();
                    const g = m ? _a(f, m) : f;
                    if (0 === Ih(g)) return void (this.state = 4);
                    const y = e.getExtent();
                    y && (p = p ? _a(p, y) : y);
                    const _ = r.getResolution(this.wrappedTileCoord_[0]),
                        b = (function kY(n, e, t, i) {
                            const r = Ao(t);
                            let o = sA(n, e, r, i);
                            return (
                                (!isFinite(o) || o <= 0) &&
                                    GM(t, function (s) {
                                        return (o = sA(n, e, s, i)), isFinite(o) && o > 0;
                                    }),
                                o
                            );
                        })(e, i, g, _);
                    if (!isFinite(b) || b <= 0) return void (this.state = 4);
                    if (
                        ((this.triangulation_ = new NY(e, i, g, p, b * (void 0 !== u ? u : 0.5), _)),
                        0 === this.triangulation_.getTriangles().length)
                    )
                        return void (this.state = 4);
                    this.sourceZ_ = t.getZForResolution(b);
                    let E = this.triangulation_.calculateSourceExtent();
                    if ((p && (e.canWrapX() ? ((E[1] = gt(E[1], p[1], p[3])), (E[3] = gt(E[3], p[1], p[3]))) : (E = _a(E, p))), Ih(E))) {
                        const R = t.getTileRangeForExtentAndZ(E, this.sourceZ_);
                        for (let N = R.minX; N <= R.maxX; N++)
                            for (let k = R.minY; k <= R.maxY; k++) {
                                const U = c(this.sourceZ_, N, k, a);
                                U && this.sourceTiles_.push(U);
                            }
                        0 === this.sourceTiles_.length && (this.state = 4);
                    } else this.state = 4;
                }
                getImage() {
                    return this.canvas_;
                }
                reproject_() {
                    const e = [];
                    if (
                        (this.sourceTiles_.forEach((t) => {
                            t &&
                                2 == t.getState() &&
                                e.push({ extent: this.sourceTileGrid_.getTileCoordExtent(t.tileCoord), image: t.getImage() });
                        }),
                        (this.sourceTiles_.length = 0),
                        0 === e.length)
                    )
                        this.state = 3;
                    else {
                        const t = this.wrappedTileCoord_[0],
                            i = this.targetTileGrid_.getTileSize(t),
                            r = 'number' == typeof i ? i : i[0],
                            o = 'number' == typeof i ? i : i[1],
                            s = this.targetTileGrid_.getResolution(t),
                            a = this.sourceTileGrid_.getResolution(this.sourceZ_),
                            l = this.targetTileGrid_.getTileCoordExtent(this.wrappedTileCoord_);
                        (this.canvas_ = (function FY(n, e, t, i, r, o, s, a, l, c, u, d) {
                            const h = Zt(Math.round(t * n), Math.round(t * e), Ta);
                            if ((d || (h.imageSmoothingEnabled = !1), 0 === l.length)) return h.canvas;
                            function f(v) {
                                return Math.round(v * t) / t;
                            }
                            h.scale(t, t), (h.globalCompositeOperation = 'lighter');
                            const m = [1 / 0, 1 / 0, -1 / 0, -1 / 0];
                            l.forEach(function (v, E, R) {
                                HM(m, v.extent);
                            });
                            const p = qe(m),
                                g = wn(m),
                                y = Zt(Math.round((t * p) / i), Math.round((t * g) / i), Ta);
                            d || (y.imageSmoothingEnabled = !1);
                            const _ = t / i;
                            l.forEach(function (v, E, R) {
                                const N = v.extent[0] - m[0],
                                    k = -(v.extent[3] - m[3]),
                                    U = qe(v.extent),
                                    Y = wn(v.extent);
                                v.image.width > 0 &&
                                    v.image.height > 0 &&
                                    y.drawImage(v.image, c, c, v.image.width - 2 * c, v.image.height - 2 * c, N * _, k * _, U * _, Y * _);
                            });
                            const b = Oo(s);
                            return (
                                a.getTriangles().forEach(function (v, E, R) {
                                    const N = v.source,
                                        k = v.target;
                                    let U = N[0][0],
                                        Y = N[0][1],
                                        be = N[1][0],
                                        de = N[1][1],
                                        le = N[2][0],
                                        nt = N[2][1];
                                    const ue = f((k[0][0] - b[0]) / o),
                                        I = f(-(k[0][1] - b[1]) / o),
                                        x = f((k[1][0] - b[0]) / o),
                                        M = f(-(k[1][1] - b[1]) / o),
                                        B = f((k[2][0] - b[0]) / o),
                                        ie = f(-(k[2][1] - b[1]) / o),
                                        ke = U,
                                        A = Y;
                                    (U = 0), (Y = 0), (be -= ke), (de -= A), (le -= ke), (nt -= A);
                                    const q = (function X8(n) {
                                        const e = n.length;
                                        for (let i = 0; i < e; i++) {
                                            let r = i,
                                                o = Math.abs(n[i][i]);
                                            for (let a = i + 1; a < e; a++) {
                                                const l = Math.abs(n[a][i]);
                                                l > o && ((o = l), (r = a));
                                            }
                                            if (0 === o) return null;
                                            const s = n[r];
                                            (n[r] = n[i]), (n[i] = s);
                                            for (let a = i + 1; a < e; a++) {
                                                const l = -n[a][i] / n[i][i];
                                                for (let c = i; c < e + 1; c++) i == c ? (n[a][c] = 0) : (n[a][c] += l * n[i][c]);
                                            }
                                        }
                                        const t = new Array(e);
                                        for (let i = e - 1; i >= 0; i--) {
                                            t[i] = n[i][e] / n[i][i];
                                            for (let r = i - 1; r >= 0; r--) n[r][e] -= n[r][i] * t[i];
                                        }
                                        return t;
                                    })([
                                        [be, de, 0, 0, x - ue],
                                        [le, nt, 0, 0, B - ue],
                                        [0, 0, be, de, M - I],
                                        [0, 0, le, nt, ie - I],
                                    ]);
                                    if (q) {
                                        if (
                                            (h.save(),
                                            h.beginPath(),
                                            (function PY() {
                                                if (void 0 === bb) {
                                                    const n = Zt(6, 6, Ta);
                                                    (n.globalCompositeOperation = 'lighter'),
                                                        (n.fillStyle = 'rgba(210, 0, 0, 0.75)'),
                                                        oA(n, 4, 5, 4, 0),
                                                        oA(n, 4, 5, 0, 5);
                                                    const e = n.getImageData(0, 0, 3, 3).data;
                                                    (bb = vb(e, 0) || vb(e, 4) || vb(e, 8)), Zh(n), Ta.push(n.canvas);
                                                }
                                                return bb;
                                            })() || !d)
                                        ) {
                                            h.moveTo(x, M);
                                            const Ae = 4,
                                                Ai = ue - x,
                                                Ve = I - M;
                                            for (let Ke = 0; Ke < Ae; Ke++)
                                                h.lineTo(x + f(((Ke + 1) * Ai) / Ae), M + f((Ke * Ve) / (Ae - 1))),
                                                    Ke != Ae - 1 &&
                                                        h.lineTo(x + f(((Ke + 1) * Ai) / Ae), M + f(((Ke + 1) * Ve) / (Ae - 1)));
                                            h.lineTo(B, ie);
                                        } else h.moveTo(x, M), h.lineTo(ue, I), h.lineTo(B, ie);
                                        h.clip(),
                                            h.transform(q[0], q[2], q[1], q[3], ue, I),
                                            h.translate(m[0] - ke, m[3] - A),
                                            h.scale(i / t, -i / t),
                                            h.drawImage(y.canvas, 0, 0),
                                            h.restore();
                                    }
                                }),
                                Zh(y),
                                Ta.push(y.canvas),
                                u &&
                                    (h.save(),
                                    (h.globalCompositeOperation = 'source-over'),
                                    (h.strokeStyle = 'black'),
                                    (h.lineWidth = 1),
                                    a.getTriangles().forEach(function (v, E, R) {
                                        const N = v.target,
                                            k = (N[0][0] - b[0]) / o,
                                            U = -(N[0][1] - b[1]) / o,
                                            Y = (N[1][0] - b[0]) / o,
                                            be = -(N[1][1] - b[1]) / o,
                                            de = (N[2][0] - b[0]) / o,
                                            le = -(N[2][1] - b[1]) / o;
                                        h.beginPath(), h.moveTo(Y, be), h.lineTo(k, U), h.lineTo(de, le), h.closePath(), h.stroke();
                                    }),
                                    h.restore()),
                                h.canvas
                            );
                        })(
                            r,
                            o,
                            this.pixelRatio_,
                            a,
                            this.sourceTileGrid_.getExtent(),
                            s,
                            l,
                            this.triangulation_,
                            e,
                            this.gutter_,
                            this.renderEdges_,
                            this.interpolate,
                        )),
                            (this.state = 2);
                    }
                    this.changed();
                }
                load() {
                    if (0 == this.state) {
                        (this.state = 1), this.changed();
                        let e = 0;
                        (this.sourcesListenerKeys_ = []),
                            this.sourceTiles_.forEach((t) => {
                                const i = t.getState();
                                if (0 == i || 1 == i) {
                                    e++;
                                    const r = me(
                                        t,
                                        'change',
                                        function (o) {
                                            const s = t.getState();
                                            (2 == s || 3 == s || 4 == s) &&
                                                (je(r), e--, 0 === e && (this.unlistenSources_(), this.reproject_()));
                                        },
                                        this,
                                    );
                                    this.sourcesListenerKeys_.push(r);
                                }
                            }),
                            0 === e
                                ? setTimeout(this.reproject_.bind(this), 0)
                                : this.sourceTiles_.forEach(function (t, i, r) {
                                      0 == t.getState() && t.load();
                                  });
                    }
                }
                unlistenSources_() {
                    this.sourcesListenerKeys_.forEach(je), (this.sourcesListenerKeys_ = null);
                }
                release() {
                    this.canvas_ && (Zh(this.canvas_.getContext('2d')), Ta.push(this.canvas_), (this.canvas_ = null)), super.release();
                }
            };
            class aA {
                constructor(e, t, i, r) {
                    (this.minX = e), (this.maxX = t), (this.minY = i), (this.maxY = r);
                }
                contains(e) {
                    return this.containsXY(e[1], e[2]);
                }
                containsTileRange(e) {
                    return this.minX <= e.minX && e.maxX <= this.maxX && this.minY <= e.minY && e.maxY <= this.maxY;
                }
                containsXY(e, t) {
                    return this.minX <= e && e <= this.maxX && this.minY <= t && t <= this.maxY;
                }
                equals(e) {
                    return this.minX == e.minX && this.minY == e.minY && this.maxX == e.maxX && this.maxY == e.maxY;
                }
                extend(e) {
                    e.minX < this.minX && (this.minX = e.minX),
                        e.maxX > this.maxX && (this.maxX = e.maxX),
                        e.minY < this.minY && (this.minY = e.minY),
                        e.maxY > this.maxY && (this.maxY = e.maxY);
                }
                getHeight() {
                    return this.maxY - this.minY + 1;
                }
                getSize() {
                    return [this.getWidth(), this.getHeight()];
                }
                getWidth() {
                    return this.maxX - this.minX + 1;
                }
                intersects(e) {
                    return this.minX <= e.maxX && this.maxX >= e.minX && this.minY <= e.maxY && this.maxY >= e.minY;
                }
            }
            function Ma(n, e, t, i, r) {
                return void 0 !== r ? ((r.minX = n), (r.maxX = e), (r.minY = t), (r.maxY = i), r) : new aA(n, e, t, i);
            }
            const lA = aA,
                jY = class BY extends tA {
                    constructor(e) {
                        super(e),
                            (this.extentChanged = !0),
                            (this.renderedExtent_ = null),
                            (this.renderedProjection = null),
                            (this.renderedTiles = []),
                            (this.newTiles_ = !1),
                            (this.tmpExtent = [1 / 0, 1 / 0, -1 / 0, -1 / 0]),
                            (this.tmpTileRange_ = new lA(0, 0, 0, 0));
                    }
                    isDrawableTile(e) {
                        const t = this.getLayer(),
                            i = e.getState(),
                            r = t.getUseInterimTilesOnError();
                        return 2 == i || 4 == i || (3 == i && !r);
                    }
                    getTile(e, t, i, r) {
                        const o = r.pixelRatio,
                            s = r.viewState.projection,
                            a = this.getLayer();
                        let c = a.getSource().getTile(e, t, i, o, s);
                        return (
                            3 == c.getState() && a.getUseInterimTilesOnError() && a.getPreload() > 0 && (this.newTiles_ = !0),
                            this.isDrawableTile(c) || (c = c.getInterimTile()),
                            c
                        );
                    }
                    getData(e) {
                        const t = this.frameState;
                        if (!t) return null;
                        const i = this.getLayer(),
                            r = Ct(t.pixelToCoordinateTransform, e.slice()),
                            o = i.getExtent();
                        if (o && !Dh(o, r)) return null;
                        const s = t.pixelRatio,
                            a = t.viewState.projection,
                            l = t.viewState,
                            c = i.getRenderSource(),
                            u = c.getTileGridForProjection(l.projection),
                            d = c.getTilePixelRatio(t.pixelRatio);
                        for (let h = u.getZForResolution(l.resolution); h >= u.getMinZoom(); --h) {
                            const f = u.getTileCoordForCoordAndZ(r, h),
                                m = c.getTile(h, f[1], f[2], s, a);
                            if (!(m instanceof iA || m instanceof Eb) || (m instanceof Eb && 4 === m.getState())) return null;
                            if (2 !== m.getState()) continue;
                            const p = u.getOrigin(h),
                                g = Fn(u.getTileSize(h)),
                                y = u.getResolution(h),
                                _ = Math.floor(d * ((r[0] - p[0]) / y - f[1] * g[0])),
                                b = Math.floor(d * ((p[1] - r[1]) / y - f[2] * g[1])),
                                v = Math.round(d * c.getGutterForProjection(l.projection));
                            return this.getImageData(m.getImage(), _ + v, b + v);
                        }
                        return null;
                    }
                    loadedTileCallback(e, t, i) {
                        return !!this.isDrawableTile(i) && super.loadedTileCallback(e, t, i);
                    }
                    prepareFrame(e) {
                        return !!this.getLayer().getSource();
                    }
                    renderFrame(e, t) {
                        const i = e.layerStatesArray[e.layerIndex],
                            r = e.viewState,
                            o = r.projection,
                            s = r.resolution,
                            a = r.center,
                            l = r.rotation,
                            c = e.pixelRatio,
                            u = this.getLayer(),
                            d = u.getSource(),
                            h = d.getRevision(),
                            f = d.getTileGridForProjection(o),
                            m = f.getZForResolution(s, d.zDirection),
                            p = f.getResolution(m);
                        let g = e.extent;
                        const y = e.viewState.resolution,
                            _ = d.getTilePixelRatio(c),
                            b = Math.round((qe(g) / y) * c),
                            v = Math.round((wn(g) / y) * c),
                            E = i.extent && Lo(i.extent);
                        E && (g = _a(g, Lo(i.extent)));
                        const R = (p * b) / 2 / _,
                            N = (p * v) / 2 / _,
                            k = [a[0] - R, a[1] - N, a[0] + R, a[1] + N],
                            U = f.getTileRangeForExtentAndZ(g, m),
                            Y = {};
                        Y[m] = {};
                        const be = this.createLoadedTileFinder(d, o, Y),
                            de = this.tmpExtent,
                            le = this.tmpTileRange_;
                        this.newTiles_ = !1;
                        const nt = l ? Oy(r.center, y, l, e.size) : void 0;
                        for (let it = U.minX; it <= U.maxX; ++it)
                            for (let q = U.minY; q <= U.maxY; ++q) {
                                if (l && !f.tileCoordIntersectsViewport([m, it, q], nt)) continue;
                                const Ae = this.getTile(m, it, q, e);
                                if (this.isDrawableTile(Ae)) {
                                    const Ke = Se(this);
                                    if (2 == Ae.getState()) {
                                        Y[m][Ae.tileCoord.toString()] = Ae;
                                        let rt = Ae.inTransition(Ke);
                                        rt && 1 !== i.opacity && (Ae.endTransition(Ke), (rt = !1)),
                                            !this.newTiles_ && (rt || !this.renderedTiles.includes(Ae)) && (this.newTiles_ = !0);
                                    }
                                    if (1 === Ae.getAlpha(Ke, e.time)) continue;
                                }
                                const Ai = f.getTileCoordChildTileRange(Ae.tileCoord, le, de);
                                let Ve = !1;
                                Ai && (Ve = be(m + 1, Ai)), Ve || f.forEachTileCoordParentTileRange(Ae.tileCoord, be, le, de);
                            }
                        const ue = ((p / s) * c) / _;
                        Qi(this.pixelTransform, e.size[0] / 2, e.size[1] / 2, 1 / c, 1 / c, l, -b / 2, -v / 2);
                        const I = Sy(this.pixelTransform);
                        this.useContainer(t, I, this.getBackground(e));
                        const x = this.context,
                            M = x.canvas;
                        Ch(this.inversePixelTransform, this.pixelTransform),
                            Qi(this.tempTransform, b / 2, v / 2, ue, ue, 0, -b / 2, -v / 2),
                            M.width != b || M.height != v
                                ? ((M.width = b), (M.height = v))
                                : this.containerReused || x.clearRect(0, 0, b, v),
                            E && this.clipUnrotated(x, e, E),
                            d.getInterpolate() || (x.imageSmoothingEnabled = !1),
                            this.preRender(x, e),
                            (this.renderedTiles.length = 0);
                        let ie,
                            ke,
                            A,
                            B = Object.keys(Y).map(Number);
                        B.sort(Mo),
                            1 !== i.opacity || (this.containerReused && !d.getOpaque(e.viewState.projection))
                                ? ((ie = []), (ke = []))
                                : (B = B.reverse());
                        for (let it = B.length - 1; it >= 0; --it) {
                            const q = B[it],
                                Ae = d.getTilePixelSize(q, c, o),
                                Ve = f.getResolution(q) / p,
                                Ke = Ae[0] * Ve * ue,
                                rt = Ae[1] * Ve * ue,
                                ri = f.getTileCoordForCoordAndZ(Oo(k), q),
                                qr = f.getTileCoordExtent(ri),
                                ka = Ct(this.tempTransform, [(_ * (qr[0] - k[0])) / p, (_ * (k[3] - qr[3])) / p]),
                                Of = _ * d.getGutterForProjection(o),
                                Xr = Y[q];
                            for (const zc in Xr) {
                                const Kr = Xr[zc],
                                    Nf = Kr.tileCoord,
                                    Pf = ri[1] - Nf[1],
                                    kf = Math.round(ka[0] - (Pf - 1) * Ke),
                                    Fa = ri[2] - Nf[2],
                                    Rv = Math.round(ka[1] - (Fa - 1) * rt),
                                    fn = Math.round(ka[0] - Pf * Ke),
                                    Bn = Math.round(ka[1] - Fa * rt),
                                    oi = kf - fn,
                                    lr = Rv - Bn,
                                    La = m === q,
                                    Zo = La && 1 !== Kr.getAlpha(Se(this), e.time);
                                let Zr = !1;
                                if (!Zo)
                                    if (ie) {
                                        A = [fn, Bn, fn + oi, Bn, fn + oi, Bn + lr, fn, Bn + lr];
                                        for (let Ba = 0, Ff = ie.length; Ba < Ff; ++Ba)
                                            if (m !== q && q < ke[Ba]) {
                                                const Qt = ie[Ba];
                                                dn([fn, Bn, fn + oi, Bn + lr], [Qt[0], Qt[3], Qt[4], Qt[7]]) &&
                                                    (Zr || (x.save(), (Zr = !0)),
                                                    x.beginPath(),
                                                    x.moveTo(A[0], A[1]),
                                                    x.lineTo(A[2], A[3]),
                                                    x.lineTo(A[4], A[5]),
                                                    x.lineTo(A[6], A[7]),
                                                    x.moveTo(Qt[6], Qt[7]),
                                                    x.lineTo(Qt[4], Qt[5]),
                                                    x.lineTo(Qt[2], Qt[3]),
                                                    x.lineTo(Qt[0], Qt[1]),
                                                    x.clip());
                                            }
                                        ie.push(A), ke.push(q);
                                    } else x.clearRect(fn, Bn, oi, lr);
                                this.drawTileImage(Kr, e, fn, Bn, oi, lr, Of, La),
                                    ie && !Zo ? (Zr && x.restore(), this.renderedTiles.unshift(Kr)) : this.renderedTiles.push(Kr),
                                    this.updateUsedTiles(e.usedTiles, d, Kr);
                            }
                        }
                        return (
                            (this.renderedRevision = h),
                            (this.renderedResolution = p),
                            (this.extentChanged = !this.renderedExtent_ || !pc(this.renderedExtent_, k)),
                            (this.renderedExtent_ = k),
                            (this.renderedPixelRatio = c),
                            (this.renderedProjection = o),
                            this.manageTilePyramid(e, d, f, c, o, g, m, u.getPreload()),
                            this.scheduleExpireCache(e, d),
                            this.postRender(x, e),
                            i.extent && x.restore(),
                            (x.imageSmoothingEnabled = !0),
                            I !== M.style.transform && (M.style.transform = I),
                            this.container
                        );
                    }
                    drawTileImage(e, t, i, r, o, s, a, l) {
                        const c = this.getTileImage(e);
                        if (!c) return;
                        const u = Se(this),
                            d = t.layerStatesArray[t.layerIndex],
                            h = d.opacity * (l ? e.getAlpha(u, t.time) : 1),
                            f = h !== this.context.globalAlpha;
                        f && (this.context.save(), (this.context.globalAlpha = h)),
                            this.context.drawImage(c, a, a, c.width - 2 * a, c.height - 2 * a, i, r, o, s),
                            f && this.context.restore(),
                            h !== d.opacity ? (t.animate = !0) : l && e.endTransition(u);
                    }
                    getImage() {
                        const e = this.context;
                        return e ? e.canvas : null;
                    }
                    getTileImage(e) {
                        return e.getImage();
                    }
                    scheduleExpireCache(e, t) {
                        if (t.canExpireCache()) {
                            const i = function (r, o, s) {
                                const a = Se(r);
                                a in s.usedTiles && r.expireCache(s.viewState.projection, s.usedTiles[a]);
                            }.bind(null, t);
                            e.postRenderFunctions.push(i);
                        }
                    }
                    updateUsedTiles(e, t, i) {
                        const r = Se(t);
                        r in e || (e[r] = {}), (e[r][i.getKey()] = !0);
                    }
                    manageTilePyramid(e, t, i, r, o, s, a, l, c) {
                        const u = Se(t);
                        u in e.wantedTiles || (e.wantedTiles[u] = {});
                        const d = e.wantedTiles[u],
                            h = e.tileQueue,
                            f = i.getMinZoom(),
                            m = e.viewState.rotation,
                            p = m ? Oy(e.viewState.center, e.viewState.resolution, m, e.size) : void 0;
                        let y,
                            _,
                            b,
                            v,
                            E,
                            R,
                            g = 0;
                        for (R = f; R <= a; ++R)
                            for (_ = i.getTileRangeForExtentAndZ(s, R, _), b = i.getResolution(R), v = _.minX; v <= _.maxX; ++v)
                                for (E = _.minY; E <= _.maxY; ++E)
                                    (m && !i.tileCoordIntersectsViewport([R, v, E], p)) ||
                                        (a - R <= l
                                            ? (++g,
                                              (y = t.getTile(R, v, E, r, o)),
                                              0 == y.getState() &&
                                                  ((d[y.getKey()] = !0),
                                                  h.isKeyQueued(y.getKey()) || h.enqueue([y, u, i.getTileCoordCenter(y.tileCoord), b])),
                                              void 0 !== c && c(y))
                                            : t.useTile(R, v, E, o));
                        t.updateCacheSize(g, o);
                    }
                },
                HY = class VY extends vY {
                    constructor(e) {
                        super(e);
                    }
                    createRenderer() {
                        return new jY(this);
                    }
                };
            var cA = si(688);
            class wb {
                constructor(e) {
                    (this.opacity_ = e.opacity),
                        (this.rotateWithView_ = e.rotateWithView),
                        (this.rotation_ = e.rotation),
                        (this.scale_ = e.scale),
                        (this.scaleArray_ = Fn(e.scale)),
                        (this.displacement_ = e.displacement),
                        (this.declutterMode_ = e.declutterMode);
                }
                clone() {
                    const e = this.getScale();
                    return new wb({
                        opacity: this.getOpacity(),
                        scale: Array.isArray(e) ? e.slice() : e,
                        rotation: this.getRotation(),
                        rotateWithView: this.getRotateWithView(),
                        displacement: this.getDisplacement().slice(),
                        declutterMode: this.getDeclutterMode(),
                    });
                }
                getOpacity() {
                    return this.opacity_;
                }
                getRotateWithView() {
                    return this.rotateWithView_;
                }
                getRotation() {
                    return this.rotation_;
                }
                getScale() {
                    return this.scale_;
                }
                getScaleArray() {
                    return this.scaleArray_;
                }
                getDisplacement() {
                    return this.displacement_;
                }
                getDeclutterMode() {
                    return this.declutterMode_;
                }
                getAnchor() {
                    return J();
                }
                getImage(e) {
                    return J();
                }
                getHitDetectionImage() {
                    return J();
                }
                getPixelRatio(e) {
                    return 1;
                }
                getImageState() {
                    return J();
                }
                getImageSize() {
                    return J();
                }
                getOrigin() {
                    return J();
                }
                getSize() {
                    return J();
                }
                setDisplacement(e) {
                    this.displacement_ = e;
                }
                setOpacity(e) {
                    this.opacity_ = e;
                }
                setRotateWithView(e) {
                    this.rotateWithView_ = e;
                }
                setRotation(e) {
                    this.rotation_ = e;
                }
                setScale(e) {
                    (this.scale_ = e), (this.scaleArray_ = Fn(e));
                }
                listenImageChange(e) {
                    J();
                }
                load() {
                    J();
                }
                unlistenImageChange(e) {
                    J();
                }
            }
            const uA = wb;
            function Ti(n) {
                return Array.isArray(n) ? ZM(n) : n;
            }
            class Cb extends uA {
                constructor(e) {
                    super({
                        opacity: 1,
                        rotateWithView: void 0 !== e.rotateWithView && e.rotateWithView,
                        rotation: void 0 !== e.rotation ? e.rotation : 0,
                        scale: void 0 !== e.scale ? e.scale : 1,
                        displacement: void 0 !== e.displacement ? e.displacement : [0, 0],
                        declutterMode: e.declutterMode,
                    }),
                        (this.canvas_ = void 0),
                        (this.hitDetectionCanvas_ = null),
                        (this.fill_ = void 0 !== e.fill ? e.fill : null),
                        (this.origin_ = [0, 0]),
                        (this.points_ = e.points),
                        (this.radius_ = void 0 !== e.radius ? e.radius : e.radius1),
                        (this.radius2_ = e.radius2),
                        (this.angle_ = void 0 !== e.angle ? e.angle : 0),
                        (this.stroke_ = void 0 !== e.stroke ? e.stroke : null),
                        (this.size_ = null),
                        (this.renderOptions_ = null),
                        this.render();
                }
                clone() {
                    const e = this.getScale(),
                        t = new Cb({
                            fill: this.getFill() ? this.getFill().clone() : void 0,
                            points: this.getPoints(),
                            radius: this.getRadius(),
                            radius2: this.getRadius2(),
                            angle: this.getAngle(),
                            stroke: this.getStroke() ? this.getStroke().clone() : void 0,
                            rotation: this.getRotation(),
                            rotateWithView: this.getRotateWithView(),
                            scale: Array.isArray(e) ? e.slice() : e,
                            displacement: this.getDisplacement().slice(),
                            declutterMode: this.getDeclutterMode(),
                        });
                    return t.setOpacity(this.getOpacity()), t;
                }
                getAnchor() {
                    const e = this.size_;
                    if (!e) return null;
                    const t = this.getDisplacement(),
                        i = this.getScaleArray();
                    return [e[0] / 2 - t[0] / i[0], e[1] / 2 + t[1] / i[1]];
                }
                getAngle() {
                    return this.angle_;
                }
                getFill() {
                    return this.fill_;
                }
                setFill(e) {
                    (this.fill_ = e), this.render();
                }
                getHitDetectionImage() {
                    return this.hitDetectionCanvas_ || this.createHitDetectionCanvas_(this.renderOptions_), this.hitDetectionCanvas_;
                }
                getImage(e) {
                    let t = this.canvas_[e];
                    if (!t) {
                        const i = this.renderOptions_,
                            r = Zt(i.size * e, i.size * e);
                        this.draw_(i, r, e), (t = r.canvas), (this.canvas_[e] = t);
                    }
                    return t;
                }
                getPixelRatio(e) {
                    return e;
                }
                getImageSize() {
                    return this.size_;
                }
                getImageState() {
                    return 2;
                }
                getOrigin() {
                    return this.origin_;
                }
                getPoints() {
                    return this.points_;
                }
                getRadius() {
                    return this.radius_;
                }
                getRadius2() {
                    return this.radius2_;
                }
                getSize() {
                    return this.size_;
                }
                getStroke() {
                    return this.stroke_;
                }
                setStroke(e) {
                    (this.stroke_ = e), this.render();
                }
                listenImageChange(e) {}
                load() {}
                unlistenImageChange(e) {}
                calculateLineJoinSize_(e, t, i) {
                    if (0 === t || this.points_ === 1 / 0 || ('bevel' !== e && 'miter' !== e)) return t;
                    let r = this.radius_,
                        o = void 0 === this.radius2_ ? r : this.radius2_;
                    if (r < o) {
                        const R = r;
                        (r = o), (o = R);
                    }
                    const a = (2 * Math.PI) / (void 0 === this.radius2_ ? this.points_ : 2 * this.points_),
                        l = o * Math.sin(a),
                        u = r - Math.sqrt(o * o - l * l),
                        d = Math.sqrt(l * l + u * u),
                        h = d / l;
                    if ('miter' === e && h <= i) return h * t;
                    const f = t / 2 / h,
                        m = (t / 2) * (u / d),
                        g = Math.sqrt((r + f) * (r + f) + m * m) - r;
                    if (void 0 === this.radius2_ || 'bevel' === e) return 2 * g;
                    const y = r * Math.sin(a),
                        b = o - Math.sqrt(r * r - y * y),
                        E = Math.sqrt(y * y + b * b) / y;
                    return E <= i ? 2 * Math.max(g, (E * t) / 2 - o - r) : 2 * g;
                }
                createRenderOptions() {
                    let o,
                        e = Ca,
                        t = 0,
                        i = null,
                        r = 0,
                        s = 0;
                    this.stroke_ &&
                        ((o = this.stroke_.getColor()),
                        null === o && (o = Ic),
                        (o = Ti(o)),
                        (s = this.stroke_.getWidth()),
                        void 0 === s && (s = 1),
                        (i = this.stroke_.getLineDash()),
                        (r = this.stroke_.getLineDashOffset()),
                        (e = this.stroke_.getLineJoin()),
                        void 0 === e && (e = Ca),
                        (t = this.stroke_.getMiterLimit()),
                        void 0 === t && (t = 10));
                    const a = this.calculateLineJoinSize_(e, s, t),
                        l = Math.max(this.radius_, this.radius2_ || 0);
                    return {
                        strokeStyle: o,
                        strokeWidth: s,
                        size: Math.ceil(2 * l + a),
                        lineDash: i,
                        lineDashOffset: r,
                        lineJoin: e,
                        miterLimit: t,
                    };
                }
                render() {
                    this.renderOptions_ = this.createRenderOptions();
                    const e = this.renderOptions_.size;
                    (this.canvas_ = {}), (this.size_ = [e, e]);
                }
                draw_(e, t, i) {
                    if ((t.scale(i, i), t.translate(e.size / 2, e.size / 2), this.createPath_(t), this.fill_)) {
                        let r = this.fill_.getColor();
                        null === r && (r = hn), (t.fillStyle = Ti(r)), t.fill();
                    }
                    this.stroke_ &&
                        ((t.strokeStyle = e.strokeStyle),
                        (t.lineWidth = e.strokeWidth),
                        e.lineDash && (t.setLineDash(e.lineDash), (t.lineDashOffset = e.lineDashOffset)),
                        (t.lineJoin = e.lineJoin),
                        (t.miterLimit = e.miterLimit),
                        t.stroke());
                }
                createHitDetectionCanvas_(e) {
                    if (this.fill_) {
                        let t = this.fill_.getColor(),
                            i = 0;
                        if (
                            ('string' == typeof t && (t = Nh(t)),
                            null === t ? (i = 1) : Array.isArray(t) && (i = 4 === t.length ? t[3] : 1),
                            0 === i)
                        ) {
                            const r = Zt(e.size, e.size);
                            (this.hitDetectionCanvas_ = r.canvas), this.drawHitDetectionCanvas_(e, r);
                        }
                    }
                    this.hitDetectionCanvas_ || (this.hitDetectionCanvas_ = this.getImage(1));
                }
                createPath_(e) {
                    let t = this.points_;
                    const i = this.radius_;
                    if (t === 1 / 0) e.arc(0, 0, i, 0, 2 * Math.PI);
                    else {
                        const r = void 0 === this.radius2_ ? i : this.radius2_;
                        void 0 !== this.radius2_ && (t *= 2);
                        const o = this.angle_ - Math.PI / 2,
                            s = (2 * Math.PI) / t;
                        for (let a = 0; a < t; a++) {
                            const l = o + a * s,
                                c = a % 2 == 0 ? i : r;
                            e.lineTo(c * Math.cos(l), c * Math.sin(l));
                        }
                        e.closePath();
                    }
                }
                drawHitDetectionCanvas_(e, t) {
                    t.translate(e.size / 2, e.size / 2),
                        this.createPath_(t),
                        (t.fillStyle = hn),
                        t.fill(),
                        this.stroke_ &&
                            ((t.strokeStyle = e.strokeStyle),
                            (t.lineWidth = e.strokeWidth),
                            e.lineDash && (t.setLineDash(e.lineDash), (t.lineDashOffset = e.lineDashOffset)),
                            (t.lineJoin = e.lineJoin),
                            (t.miterLimit = e.miterLimit),
                            t.stroke());
                }
            }
            const dA = Cb;
            class Db extends dA {
                constructor(e) {
                    super({
                        points: 1 / 0,
                        fill: (e = e || { radius: 5 }).fill,
                        radius: e.radius,
                        stroke: e.stroke,
                        scale: void 0 !== e.scale ? e.scale : 1,
                        rotation: void 0 !== e.rotation ? e.rotation : 0,
                        rotateWithView: void 0 !== e.rotateWithView && e.rotateWithView,
                        displacement: void 0 !== e.displacement ? e.displacement : [0, 0],
                        declutterMode: e.declutterMode,
                    });
                }
                clone() {
                    const e = this.getScale(),
                        t = new Db({
                            fill: this.getFill() ? this.getFill().clone() : void 0,
                            stroke: this.getStroke() ? this.getStroke().clone() : void 0,
                            radius: this.getRadius(),
                            scale: Array.isArray(e) ? e.slice() : e,
                            rotation: this.getRotation(),
                            rotateWithView: this.getRotateWithView(),
                            displacement: this.getDisplacement().slice(),
                            declutterMode: this.getDeclutterMode(),
                        });
                    return t.setOpacity(this.getOpacity()), t;
                }
                setRadius(e) {
                    (this.radius_ = e), this.render();
                }
            }
            const hA = Db;
            class Ib {
                constructor(e) {
                    this.color_ = void 0 !== (e = e || {}).color ? e.color : null;
                }
                clone() {
                    const e = this.getColor();
                    return new Ib({ color: Array.isArray(e) ? e.slice() : e || void 0 });
                }
                getColor() {
                    return this.color_;
                }
                setColor(e) {
                    this.color_ = e;
                }
            }
            const xb = Ib;
            class Sb {
                constructor(e) {
                    (this.color_ = void 0 !== (e = e || {}).color ? e.color : null),
                        (this.lineCap_ = e.lineCap),
                        (this.lineDash_ = void 0 !== e.lineDash ? e.lineDash : null),
                        (this.lineDashOffset_ = e.lineDashOffset),
                        (this.lineJoin_ = e.lineJoin),
                        (this.miterLimit_ = e.miterLimit),
                        (this.width_ = e.width);
                }
                clone() {
                    const e = this.getColor();
                    return new Sb({
                        color: Array.isArray(e) ? e.slice() : e || void 0,
                        lineCap: this.getLineCap(),
                        lineDash: this.getLineDash() ? this.getLineDash().slice() : void 0,
                        lineDashOffset: this.getLineDashOffset(),
                        lineJoin: this.getLineJoin(),
                        miterLimit: this.getMiterLimit(),
                        width: this.getWidth(),
                    });
                }
                getColor() {
                    return this.color_;
                }
                getLineCap() {
                    return this.lineCap_;
                }
                getLineDash() {
                    return this.lineDash_;
                }
                getLineDashOffset() {
                    return this.lineDashOffset_;
                }
                getLineJoin() {
                    return this.lineJoin_;
                }
                getMiterLimit() {
                    return this.miterLimit_;
                }
                getWidth() {
                    return this.width_;
                }
                setColor(e) {
                    this.color_ = e;
                }
                setLineCap(e) {
                    this.lineCap_ = e;
                }
                setLineDash(e) {
                    this.lineDash_ = e;
                }
                setLineDashOffset(e) {
                    this.lineDashOffset_ = e;
                }
                setLineJoin(e) {
                    this.lineJoin_ = e;
                }
                setMiterLimit(e) {
                    this.miterLimit_ = e;
                }
                setWidth(e) {
                    this.width_ = e;
                }
            }
            const fA = Sb;
            class Hr {
                constructor(e) {
                    (e = e || {}),
                        (this.geometry_ = null),
                        (this.geometryFunction_ = mA),
                        void 0 !== e.geometry && this.setGeometry(e.geometry),
                        (this.fill_ = void 0 !== e.fill ? e.fill : null),
                        (this.image_ = void 0 !== e.image ? e.image : null),
                        (this.renderer_ = void 0 !== e.renderer ? e.renderer : null),
                        (this.hitDetectionRenderer_ = void 0 !== e.hitDetectionRenderer ? e.hitDetectionRenderer : null),
                        (this.stroke_ = void 0 !== e.stroke ? e.stroke : null),
                        (this.text_ = void 0 !== e.text ? e.text : null),
                        (this.zIndex_ = e.zIndex);
                }
                clone() {
                    let e = this.getGeometry();
                    return (
                        e && 'object' == typeof e && (e = e.clone()),
                        new Hr({
                            geometry: e,
                            fill: this.getFill() ? this.getFill().clone() : void 0,
                            image: this.getImage() ? this.getImage().clone() : void 0,
                            renderer: this.getRenderer(),
                            stroke: this.getStroke() ? this.getStroke().clone() : void 0,
                            text: this.getText() ? this.getText().clone() : void 0,
                            zIndex: this.getZIndex(),
                        })
                    );
                }
                getRenderer() {
                    return this.renderer_;
                }
                setRenderer(e) {
                    this.renderer_ = e;
                }
                setHitDetectionRenderer(e) {
                    this.hitDetectionRenderer_ = e;
                }
                getHitDetectionRenderer() {
                    return this.hitDetectionRenderer_;
                }
                getGeometry() {
                    return this.geometry_;
                }
                getGeometryFunction() {
                    return this.geometryFunction_;
                }
                getFill() {
                    return this.fill_;
                }
                setFill(e) {
                    this.fill_ = e;
                }
                getImage() {
                    return this.image_;
                }
                setImage(e) {
                    this.image_ = e;
                }
                getStroke() {
                    return this.stroke_;
                }
                setStroke(e) {
                    this.stroke_ = e;
                }
                getText() {
                    return this.text_;
                }
                setText(e) {
                    this.text_ = e;
                }
                getZIndex() {
                    return this.zIndex_;
                }
                setGeometry(e) {
                    'function' == typeof e
                        ? (this.geometryFunction_ = e)
                        : 'string' == typeof e
                          ? (this.geometryFunction_ = function (t) {
                                return t.get(e);
                            })
                          : e
                            ? void 0 !== e &&
                              (this.geometryFunction_ = function () {
                                  return e;
                              })
                            : (this.geometryFunction_ = mA),
                        (this.geometry_ = e);
                }
                setZIndex(e) {
                    this.zIndex_ = e;
                }
            }
            let Tb = null;
            function zY(n, e) {
                if (!Tb) {
                    const t = new xb({ color: 'rgba(255,255,255,0.4)' }),
                        i = new fA({ color: '#3399CC', width: 1.25 });
                    Tb = [new Hr({ image: new hA({ fill: t, stroke: i, radius: 5 }), fill: t, stroke: i })];
                }
                return Tb;
            }
            function mA(n) {
                return n.getGeometry();
            }
            const Mb = Hr;
            let Rc = null;
            class GY extends fc {
                constructor(e, t, i, r, o, s) {
                    super(),
                        (this.hitDetectionImage_ = null),
                        (this.image_ = e),
                        (this.crossOrigin_ = r),
                        (this.canvas_ = {}),
                        (this.color_ = s),
                        (this.unlisten_ = null),
                        (this.imageState_ = o),
                        (this.size_ = i),
                        (this.src_ = t);
                }
                initializeImage_() {
                    (this.image_ = new Image()), null !== this.crossOrigin_ && (this.image_.crossOrigin = this.crossOrigin_);
                }
                isTainted_() {
                    if (void 0 === this.tainted_ && 2 === this.imageState_) {
                        Rc || (Rc = Zt(1, 1, void 0, { willReadFrequently: !0 })), Rc.drawImage(this.image_, 0, 0);
                        try {
                            Rc.getImageData(0, 0, 1, 1), (this.tainted_ = !1);
                        } catch {
                            (Rc = null), (this.tainted_ = !0);
                        }
                    }
                    return !0 === this.tainted_;
                }
                dispatchChangeEvent_() {
                    this.dispatchEvent('change');
                }
                handleImageError_() {
                    (this.imageState_ = 3), this.unlistenImage_(), this.dispatchChangeEvent_();
                }
                handleImageLoad_() {
                    (this.imageState_ = 2),
                        this.size_
                            ? ((this.image_.width = this.size_[0]), (this.image_.height = this.size_[1]))
                            : (this.size_ = [this.image_.width, this.image_.height]),
                        this.unlistenImage_(),
                        this.dispatchChangeEvent_();
                }
                getImage(e) {
                    return this.image_ || this.initializeImage_(), this.replaceColor_(e), this.canvas_[e] ? this.canvas_[e] : this.image_;
                }
                getPixelRatio(e) {
                    return this.replaceColor_(e), this.canvas_[e] ? e : 1;
                }
                getImageState() {
                    return this.imageState_;
                }
                getHitDetectionImage() {
                    if ((this.image_ || this.initializeImage_(), !this.hitDetectionImage_))
                        if (this.isTainted_()) {
                            const e = this.size_[0],
                                t = this.size_[1],
                                i = Zt(e, t);
                            i.fillRect(0, 0, e, t), (this.hitDetectionImage_ = i.canvas);
                        } else this.hitDetectionImage_ = this.image_;
                    return this.hitDetectionImage_;
                }
                getSize() {
                    return this.size_;
                }
                getSrc() {
                    return this.src_;
                }
                load() {
                    if (0 === this.imageState_) {
                        this.image_ || this.initializeImage_(), (this.imageState_ = 1);
                        try {
                            this.image_.src = this.src_;
                        } catch {
                            this.handleImageError_();
                        }
                        this.unlisten_ = yb(this.image_, this.handleImageLoad_.bind(this), this.handleImageError_.bind(this));
                    }
                }
                replaceColor_(e) {
                    if (!this.color_ || this.canvas_[e] || 2 !== this.imageState_) return;
                    const t = this.image_,
                        i = document.createElement('canvas');
                    (i.width = Math.ceil(t.width * e)), (i.height = Math.ceil(t.height * e));
                    const r = i.getContext('2d');
                    r.scale(e, e),
                        r.drawImage(t, 0, 0),
                        (r.globalCompositeOperation = 'multiply'),
                        (r.fillStyle = qM(this.color_)),
                        r.fillRect(0, 0, i.width / e, i.height / e),
                        (r.globalCompositeOperation = 'destination-in'),
                        r.drawImage(t, 0, 0),
                        (this.canvas_[e] = i);
                }
                unlistenImage_() {
                    this.unlisten_ && (this.unlisten_(), (this.unlisten_ = null));
                }
            }
            function pA(n, e, t, i) {
                return void 0 !== t && void 0 !== i ? [t / n, i / e] : void 0 !== t ? t / n : void 0 !== i ? i / e : 1;
            }
            class Rb extends uA {
                constructor(e) {
                    super({
                        opacity: void 0 !== (e = e || {}).opacity ? e.opacity : 1,
                        rotation: void 0 !== e.rotation ? e.rotation : 0,
                        scale: void 0 !== e.scale ? e.scale : 1,
                        displacement: void 0 !== e.displacement ? e.displacement : [0, 0],
                        rotateWithView: void 0 !== e.rotateWithView && e.rotateWithView,
                        declutterMode: e.declutterMode,
                    }),
                        (this.anchor_ = void 0 !== e.anchor ? e.anchor : [0.5, 0.5]),
                        (this.normalizedAnchor_ = null),
                        (this.anchorOrigin_ = void 0 !== e.anchorOrigin ? e.anchorOrigin : 'top-left'),
                        (this.anchorXUnits_ = void 0 !== e.anchorXUnits ? e.anchorXUnits : 'fraction'),
                        (this.anchorYUnits_ = void 0 !== e.anchorYUnits ? e.anchorYUnits : 'fraction'),
                        (this.crossOrigin_ = void 0 !== e.crossOrigin ? e.crossOrigin : null);
                    const s = void 0 !== e.img ? e.img : null;
                    this.imgSize_ = e.imgSize;
                    let a = e.src;
                    pe(!(void 0 !== a && s), 4),
                        pe(!s || (s && this.imgSize_), 5),
                        (void 0 === a || 0 === a.length) && s && (a = s.src || Se(s)),
                        pe(void 0 !== a && a.length > 0, 6),
                        pe(!((void 0 !== e.width || void 0 !== e.height) && void 0 !== e.scale), 69);
                    const l = void 0 !== e.src ? 0 : 2;
                    if (
                        ((this.color_ = void 0 !== e.color ? Nh(e.color) : null),
                        (this.iconImage_ = (function WY(n, e, t, i, r, o) {
                            let s = Ph.get(e, i, o);
                            return s || ((s = new GY(n, e, t, i, r, o)), Ph.set(e, i, o, s)), s;
                        })(s, a, void 0 !== this.imgSize_ ? this.imgSize_ : null, this.crossOrigin_, l, this.color_)),
                        (this.offset_ = void 0 !== e.offset ? e.offset : [0, 0]),
                        (this.offsetOrigin_ = void 0 !== e.offsetOrigin ? e.offsetOrigin : 'top-left'),
                        (this.origin_ = null),
                        (this.size_ = void 0 !== e.size ? e.size : null),
                        void 0 !== e.width || void 0 !== e.height)
                    ) {
                        let c, u;
                        if (e.size) [c, u] = e.size;
                        else {
                            const d = this.getImage(1);
                            if (!(d instanceof HTMLCanvasElement || (d.src && d.complete))) {
                                this.initialOptions_ = e;
                                const h = () => {
                                    if ((this.unlistenImageChange(h), !this.initialOptions_)) return;
                                    const f = this.iconImage_.getSize();
                                    this.setScale(pA(f[0], f[1], e.width, e.height));
                                };
                                return void this.listenImageChange(h);
                            }
                            (c = d.width), (u = d.height);
                        }
                        void 0 !== c && this.setScale(pA(c, u, e.width, e.height));
                    }
                }
                clone() {
                    let e, t, i;
                    return (
                        this.initialOptions_
                            ? ((t = this.initialOptions_.width), (i = this.initialOptions_.height))
                            : ((e = this.getScale()), (e = Array.isArray(e) ? e.slice() : e)),
                        new Rb({
                            anchor: this.anchor_.slice(),
                            anchorOrigin: this.anchorOrigin_,
                            anchorXUnits: this.anchorXUnits_,
                            anchorYUnits: this.anchorYUnits_,
                            color: this.color_ && this.color_.slice ? this.color_.slice() : this.color_ || void 0,
                            crossOrigin: this.crossOrigin_,
                            imgSize: this.imgSize_,
                            offset: this.offset_.slice(),
                            offsetOrigin: this.offsetOrigin_,
                            opacity: this.getOpacity(),
                            rotateWithView: this.getRotateWithView(),
                            rotation: this.getRotation(),
                            scale: e,
                            width: t,
                            height: i,
                            size: null !== this.size_ ? this.size_.slice() : void 0,
                            src: this.getSrc(),
                            displacement: this.getDisplacement().slice(),
                            declutterMode: this.getDeclutterMode(),
                        })
                    );
                }
                getAnchor() {
                    let e = this.normalizedAnchor_;
                    if (!e) {
                        e = this.anchor_;
                        const r = this.getSize();
                        if ('fraction' == this.anchorXUnits_ || 'fraction' == this.anchorYUnits_) {
                            if (!r) return null;
                            (e = this.anchor_.slice()),
                                'fraction' == this.anchorXUnits_ && (e[0] *= r[0]),
                                'fraction' == this.anchorYUnits_ && (e[1] *= r[1]);
                        }
                        if ('top-left' != this.anchorOrigin_) {
                            if (!r) return null;
                            e === this.anchor_ && (e = this.anchor_.slice()),
                                ('top-right' == this.anchorOrigin_ || 'bottom-right' == this.anchorOrigin_) && (e[0] = -e[0] + r[0]),
                                ('bottom-left' == this.anchorOrigin_ || 'bottom-right' == this.anchorOrigin_) && (e[1] = -e[1] + r[1]);
                        }
                        this.normalizedAnchor_ = e;
                    }
                    const t = this.getDisplacement(),
                        i = this.getScaleArray();
                    return [e[0] - t[0] / i[0], e[1] + t[1] / i[1]];
                }
                setAnchor(e) {
                    (this.anchor_ = e), (this.normalizedAnchor_ = null);
                }
                getColor() {
                    return this.color_;
                }
                getImage(e) {
                    return this.iconImage_.getImage(e);
                }
                getPixelRatio(e) {
                    return this.iconImage_.getPixelRatio(e);
                }
                getImageSize() {
                    return this.iconImage_.getSize();
                }
                getImageState() {
                    return this.iconImage_.getImageState();
                }
                getHitDetectionImage() {
                    return this.iconImage_.getHitDetectionImage();
                }
                getOrigin() {
                    if (this.origin_) return this.origin_;
                    let e = this.offset_;
                    if ('top-left' != this.offsetOrigin_) {
                        const t = this.getSize(),
                            i = this.iconImage_.getSize();
                        if (!t || !i) return null;
                        (e = e.slice()),
                            ('top-right' == this.offsetOrigin_ || 'bottom-right' == this.offsetOrigin_) && (e[0] = i[0] - t[0] - e[0]),
                            ('bottom-left' == this.offsetOrigin_ || 'bottom-right' == this.offsetOrigin_) && (e[1] = i[1] - t[1] - e[1]);
                    }
                    return (this.origin_ = e), this.origin_;
                }
                getSrc() {
                    return this.iconImage_.getSrc();
                }
                getSize() {
                    return this.size_ ? this.size_ : this.iconImage_.getSize();
                }
                getWidth() {
                    const e = this.getScaleArray();
                    return this.size_
                        ? this.size_[0] * e[0]
                        : 2 == this.iconImage_.getImageState()
                          ? this.iconImage_.getSize()[0] * e[0]
                          : void 0;
                }
                getHeight() {
                    const e = this.getScaleArray();
                    return this.size_
                        ? this.size_[1] * e[1]
                        : 2 == this.iconImage_.getImageState()
                          ? this.iconImage_.getSize()[1] * e[1]
                          : void 0;
                }
                setScale(e) {
                    delete this.initialOptions_, super.setScale(e);
                }
                listenImageChange(e) {
                    this.iconImage_.addEventListener('change', e);
                }
                load() {
                    this.iconImage_.load();
                }
                unlistenImageChange(e) {
                    this.iconImage_.removeEventListener('change', e);
                }
            }
            const gA = Rb;
            class Ab {
                constructor(e) {
                    (this.font_ = (e = e || {}).font),
                        (this.rotation_ = e.rotation),
                        (this.rotateWithView_ = e.rotateWithView),
                        (this.scale_ = e.scale),
                        (this.scaleArray_ = Fn(void 0 !== e.scale ? e.scale : 1)),
                        (this.text_ = e.text),
                        (this.textAlign_ = e.textAlign),
                        (this.justify_ = e.justify),
                        (this.repeat_ = e.repeat),
                        (this.textBaseline_ = e.textBaseline),
                        (this.fill_ = void 0 !== e.fill ? e.fill : new xb({ color: '#333' })),
                        (this.maxAngle_ = void 0 !== e.maxAngle ? e.maxAngle : Math.PI / 4),
                        (this.placement_ = void 0 !== e.placement ? e.placement : 'point'),
                        (this.overflow_ = !!e.overflow),
                        (this.stroke_ = void 0 !== e.stroke ? e.stroke : null),
                        (this.offsetX_ = void 0 !== e.offsetX ? e.offsetX : 0),
                        (this.offsetY_ = void 0 !== e.offsetY ? e.offsetY : 0),
                        (this.backgroundFill_ = e.backgroundFill ? e.backgroundFill : null),
                        (this.backgroundStroke_ = e.backgroundStroke ? e.backgroundStroke : null),
                        (this.padding_ = void 0 === e.padding ? null : e.padding);
                }
                clone() {
                    const e = this.getScale();
                    return new Ab({
                        font: this.getFont(),
                        placement: this.getPlacement(),
                        repeat: this.getRepeat(),
                        maxAngle: this.getMaxAngle(),
                        overflow: this.getOverflow(),
                        rotation: this.getRotation(),
                        rotateWithView: this.getRotateWithView(),
                        scale: Array.isArray(e) ? e.slice() : e,
                        text: this.getText(),
                        textAlign: this.getTextAlign(),
                        justify: this.getJustify(),
                        textBaseline: this.getTextBaseline(),
                        fill: this.getFill() ? this.getFill().clone() : void 0,
                        stroke: this.getStroke() ? this.getStroke().clone() : void 0,
                        offsetX: this.getOffsetX(),
                        offsetY: this.getOffsetY(),
                        backgroundFill: this.getBackgroundFill() ? this.getBackgroundFill().clone() : void 0,
                        backgroundStroke: this.getBackgroundStroke() ? this.getBackgroundStroke().clone() : void 0,
                        padding: this.getPadding() || void 0,
                    });
                }
                getOverflow() {
                    return this.overflow_;
                }
                getFont() {
                    return this.font_;
                }
                getMaxAngle() {
                    return this.maxAngle_;
                }
                getPlacement() {
                    return this.placement_;
                }
                getRepeat() {
                    return this.repeat_;
                }
                getOffsetX() {
                    return this.offsetX_;
                }
                getOffsetY() {
                    return this.offsetY_;
                }
                getFill() {
                    return this.fill_;
                }
                getRotateWithView() {
                    return this.rotateWithView_;
                }
                getRotation() {
                    return this.rotation_;
                }
                getScale() {
                    return this.scale_;
                }
                getScaleArray() {
                    return this.scaleArray_;
                }
                getStroke() {
                    return this.stroke_;
                }
                getText() {
                    return this.text_;
                }
                getTextAlign() {
                    return this.textAlign_;
                }
                getJustify() {
                    return this.justify_;
                }
                getTextBaseline() {
                    return this.textBaseline_;
                }
                getBackgroundFill() {
                    return this.backgroundFill_;
                }
                getBackgroundStroke() {
                    return this.backgroundStroke_;
                }
                getPadding() {
                    return this.padding_;
                }
                setOverflow(e) {
                    this.overflow_ = e;
                }
                setFont(e) {
                    this.font_ = e;
                }
                setMaxAngle(e) {
                    this.maxAngle_ = e;
                }
                setOffsetX(e) {
                    this.offsetX_ = e;
                }
                setOffsetY(e) {
                    this.offsetY_ = e;
                }
                setPlacement(e) {
                    this.placement_ = e;
                }
                setRepeat(e) {
                    this.repeat_ = e;
                }
                setRotateWithView(e) {
                    this.rotateWithView_ = e;
                }
                setFill(e) {
                    this.fill_ = e;
                }
                setRotation(e) {
                    this.rotation_ = e;
                }
                setScale(e) {
                    (this.scale_ = e), (this.scaleArray_ = Fn(void 0 !== e ? e : 1));
                }
                setStroke(e) {
                    this.stroke_ = e;
                }
                setText(e) {
                    this.text_ = e;
                }
                setTextAlign(e) {
                    this.textAlign_ = e;
                }
                setJustify(e) {
                    this.justify_ = e;
                }
                setTextBaseline(e) {
                    this.textBaseline_ = e;
                }
                setBackgroundFill(e) {
                    this.backgroundFill_ = e;
                }
                setBackgroundStroke(e) {
                    this.backgroundStroke_ = e;
                }
                setPadding(e) {
                    this.padding_ = e;
                }
            }
            const YY = Ab;
            function _A(n) {
                return new Mb({ fill: Ac(n, ''), stroke: Oc(n, ''), text: qY(n), image: XY(n) });
            }
            function Ac(n, e) {
                const t = n[e + 'fill-color'];
                if (t) return 'none' === t ? null : new xb({ color: t });
            }
            function Oc(n, e) {
                const t = n[e + 'stroke-width'],
                    i = n[e + 'stroke-color'];
                if (t || i)
                    return new fA({
                        width: t,
                        color: i,
                        lineCap: n[e + 'stroke-line-cap'],
                        lineJoin: n[e + 'stroke-line-join'],
                        lineDash: n[e + 'stroke-line-dash'],
                        lineDashOffset: n[e + 'stroke-line-dash-offset'],
                        miterLimit: n[e + 'stroke-miter-limit'],
                    });
            }
            function qY(n) {
                const e = n['text-value'];
                return e
                    ? new YY({
                          text: e,
                          font: n['text-font'],
                          maxAngle: n['text-max-angle'],
                          offsetX: n['text-offset-x'],
                          offsetY: n['text-offset-y'],
                          overflow: n['text-overflow'],
                          placement: n['text-placement'],
                          repeat: n['text-repeat'],
                          scale: n['text-scale'],
                          rotateWithView: n['text-rotate-with-view'],
                          rotation: n['text-rotation'],
                          textAlign: n['text-align'],
                          justify: n['text-justify'],
                          textBaseline: n['text-baseline'],
                          padding: n['text-padding'],
                          fill: Ac(n, 'text-'),
                          backgroundFill: Ac(n, 'text-background-'),
                          stroke: Oc(n, 'text-'),
                          backgroundStroke: Oc(n, 'text-background-'),
                      })
                    : void 0;
            }
            function XY(n) {
                const e = n['icon-src'],
                    t = n['icon-img'];
                if (e || t)
                    return new gA({
                        src: e,
                        img: t,
                        imgSize: n['icon-img-size'],
                        anchor: n['icon-anchor'],
                        anchorOrigin: n['icon-anchor-origin'],
                        anchorXUnits: n['icon-anchor-x-units'],
                        anchorYUnits: n['icon-anchor-y-units'],
                        color: n['icon-color'],
                        crossOrigin: n['icon-cross-origin'],
                        offset: n['icon-offset'],
                        displacement: n['icon-displacement'],
                        opacity: n['icon-opacity'],
                        scale: n['icon-scale'],
                        width: n['icon-width'],
                        height: n['icon-height'],
                        rotation: n['icon-rotation'],
                        rotateWithView: n['icon-rotate-with-view'],
                        size: n['icon-size'],
                        declutterMode: n['icon-declutter-mode'],
                    });
                const i = n['shape-points'];
                if (i) {
                    const o = 'shape-';
                    return new dA({
                        points: i,
                        fill: Ac(n, o),
                        stroke: Oc(n, o),
                        radius: n['shape-radius'],
                        radius1: n['shape-radius1'],
                        radius2: n['shape-radius2'],
                        angle: n['shape-angle'],
                        displacement: n['shape-displacement'],
                        rotation: n['shape-rotation'],
                        rotateWithView: n['shape-rotate-with-view'],
                        scale: n['shape-scale'],
                        declutterMode: n['shape-declutter-mode'],
                    });
                }
                const r = n['circle-radius'];
                if (r) {
                    const o = 'circle-';
                    return new hA({
                        radius: r,
                        fill: Ac(n, o),
                        stroke: Oc(n, o),
                        displacement: n['circle-displacement'],
                        scale: n['circle-scale'],
                        rotation: n['circle-rotation'],
                        rotateWithView: n['circle-rotate-with-view'],
                        declutterMode: n['circle-declutter-mode'],
                    });
                }
            }
            const ZY = class KY extends Xh {
                    constructor(e) {
                        e = e || {};
                        const t = Object.assign({}, e);
                        delete t.style,
                            delete t.renderBuffer,
                            delete t.updateWhileAnimating,
                            delete t.updateWhileInteracting,
                            super(t),
                            (this.declutter_ = void 0 !== e.declutter && e.declutter),
                            (this.renderBuffer_ = void 0 !== e.renderBuffer ? e.renderBuffer : 100),
                            (this.style_ = null),
                            (this.styleFunction_ = void 0),
                            this.setStyle(e.style),
                            (this.updateWhileAnimating_ = void 0 !== e.updateWhileAnimating && e.updateWhileAnimating),
                            (this.updateWhileInteracting_ = void 0 !== e.updateWhileInteracting && e.updateWhileInteracting);
                    }
                    getDeclutter() {
                        return this.declutter_;
                    }
                    getFeatures(e) {
                        return super.getFeatures(e);
                    }
                    getRenderBuffer() {
                        return this.renderBuffer_;
                    }
                    getRenderOrder() {
                        return this.get('renderOrder');
                    }
                    getStyle() {
                        return this.style_;
                    }
                    getStyleFunction() {
                        return this.styleFunction_;
                    }
                    getUpdateWhileAnimating() {
                        return this.updateWhileAnimating_;
                    }
                    getUpdateWhileInteracting() {
                        return this.updateWhileInteracting_;
                    }
                    renderDeclutter(e) {
                        e.declutterTree || (e.declutterTree = new cA(9)), this.getRenderer().renderDeclutter(e);
                    }
                    setRenderOrder(e) {
                        this.set('renderOrder', e);
                    }
                    setStyle(e) {
                        let t;
                        if (void 0 === e) t = zY;
                        else if (null === e) t = null;
                        else if ('function' == typeof e) t = e;
                        else if (e instanceof Mb) t = e;
                        else if (Array.isArray(e)) {
                            const i = e.length,
                                r = new Array(i);
                            for (let o = 0; o < i; ++o) {
                                const s = e[o];
                                r[o] = s instanceof Mb ? s : _A(s);
                            }
                            t = r;
                        } else t = _A(e);
                        (this.style_ = t),
                            (this.styleFunction_ =
                                null === e
                                    ? void 0
                                    : (function UY(n) {
                                          let e;
                                          if ('function' == typeof n) e = n;
                                          else {
                                              let t;
                                              Array.isArray(n) ? (t = n) : (pe('function' == typeof n.getZIndex, 41), (t = [n])),
                                                  (e = function () {
                                                      return t;
                                                  });
                                          }
                                          return e;
                                      })(this.style_)),
                            this.changed();
                    }
                },
                Nc = {
                    BEGIN_GEOMETRY: 0,
                    BEGIN_PATH: 1,
                    CIRCLE: 2,
                    CLOSE_PATH: 3,
                    CUSTOM: 4,
                    DRAW_CHARS: 5,
                    DRAW_IMAGE: 6,
                    END_GEOMETRY: 7,
                    FILL: 8,
                    MOVE_TO_LINE_TO: 9,
                    SET_FILL_STYLE: 10,
                    SET_STROKE_STYLE: 11,
                    STROKE: 12,
                },
                lf = [Nc.FILL],
                Ur = [Nc.STROKE],
                Wo = [Nc.BEGIN_PATH],
                bA = [Nc.CLOSE_PATH],
                ee = Nc,
                vA = class QY {
                    drawCustom(e, t, i, r) {}
                    drawGeometry(e) {}
                    setStyle(e) {}
                    drawCircle(e, t) {}
                    drawFeature(e, t) {}
                    drawGeometryCollection(e, t) {}
                    drawLineString(e, t) {}
                    drawMultiLineString(e, t) {}
                    drawMultiPoint(e, t) {}
                    drawMultiPolygon(e, t) {}
                    drawPoint(e, t) {}
                    drawPolygon(e, t) {}
                    drawText(e, t) {}
                    setFillStrokeStyle(e, t) {}
                    setImageStyle(e, t) {}
                    setTextStyle(e, t) {}
                },
                Pc = class JY extends vA {
                    constructor(e, t, i, r) {
                        super(),
                            (this.tolerance = e),
                            (this.maxExtent = t),
                            (this.pixelRatio = r),
                            (this.maxLineWidth = 0),
                            (this.resolution = i),
                            (this.beginGeometryInstruction1_ = null),
                            (this.beginGeometryInstruction2_ = null),
                            (this.bufferedMaxExtent_ = null),
                            (this.instructions = []),
                            (this.coordinates = []),
                            (this.tmpCoordinate_ = []),
                            (this.hitDetectionInstructions = []),
                            (this.state = {});
                    }
                    applyPixelRatio(e) {
                        const t = this.pixelRatio;
                        return 1 == t
                            ? e
                            : e.map(function (i) {
                                  return i * t;
                              });
                    }
                    appendFlatPointCoordinates(e, t) {
                        const i = this.getBufferedMaxExtent(),
                            r = this.tmpCoordinate_,
                            o = this.coordinates;
                        let s = o.length;
                        for (let a = 0, l = e.length; a < l; a += t)
                            (r[0] = e[a]), (r[1] = e[a + 1]), Dh(i, r) && ((o[s++] = r[0]), (o[s++] = r[1]));
                        return s;
                    }
                    appendFlatLineCoordinates(e, t, i, r, o, s) {
                        const a = this.coordinates;
                        let l = a.length;
                        const c = this.getBufferedMaxExtent();
                        s && (t += r);
                        let u = e[t],
                            d = e[t + 1];
                        const h = this.tmpCoordinate_;
                        let m,
                            p,
                            g,
                            f = !0;
                        for (m = t + r; m < i; m += r)
                            (h[0] = e[m]),
                                (h[1] = e[m + 1]),
                                (g = Ry(c, h)),
                                g !== p
                                    ? (f && ((a[l++] = u), (a[l++] = d), (f = !1)), (a[l++] = h[0]), (a[l++] = h[1]))
                                    : g === Dt.INTERSECTING
                                      ? ((a[l++] = h[0]), (a[l++] = h[1]), (f = !1))
                                      : (f = !0),
                                (u = h[0]),
                                (d = h[1]),
                                (p = g);
                        return ((o && f) || m === t + r) && ((a[l++] = u), (a[l++] = d)), l;
                    }
                    drawCustomCoordinates_(e, t, i, r, o) {
                        for (let s = 0, a = i.length; s < a; ++s) {
                            const l = i[s],
                                c = this.appendFlatLineCoordinates(e, t, l, r, !1, !1);
                            o.push(c), (t = l);
                        }
                        return t;
                    }
                    drawCustom(e, t, i, r) {
                        this.beginGeometry(e, t);
                        const o = e.getType(),
                            s = e.getStride(),
                            a = this.coordinates.length;
                        let l, c, u, d, h;
                        switch (o) {
                            case 'MultiPolygon':
                                (l = e.getOrientedFlatCoordinates()), (d = []);
                                const f = e.getEndss();
                                h = 0;
                                for (let m = 0, p = f.length; m < p; ++m) {
                                    const g = [];
                                    (h = this.drawCustomCoordinates_(l, h, f[m], s, g)), d.push(g);
                                }
                                this.instructions.push([ee.CUSTOM, a, d, e, i, Qy]),
                                    this.hitDetectionInstructions.push([ee.CUSTOM, a, d, e, r || i, Qy]);
                                break;
                            case 'Polygon':
                            case 'MultiLineString':
                                (u = []),
                                    (l = 'Polygon' == o ? e.getOrientedFlatCoordinates() : e.getFlatCoordinates()),
                                    (h = this.drawCustomCoordinates_(l, 0, e.getEnds(), s, u)),
                                    this.instructions.push([ee.CUSTOM, a, u, e, i, wc]),
                                    this.hitDetectionInstructions.push([ee.CUSTOM, a, u, e, r || i, wc]);
                                break;
                            case 'LineString':
                            case 'Circle':
                                (l = e.getFlatCoordinates()),
                                    (c = this.appendFlatLineCoordinates(l, 0, l.length, s, !1, !1)),
                                    this.instructions.push([ee.CUSTOM, a, c, e, i, Lr]),
                                    this.hitDetectionInstructions.push([ee.CUSTOM, a, c, e, r || i, Lr]);
                                break;
                            case 'MultiPoint':
                                (l = e.getFlatCoordinates()),
                                    (c = this.appendFlatPointCoordinates(l, s)),
                                    c > a &&
                                        (this.instructions.push([ee.CUSTOM, a, c, e, i, Lr]),
                                        this.hitDetectionInstructions.push([ee.CUSTOM, a, c, e, r || i, Lr]));
                                break;
                            case 'Point':
                                (l = e.getFlatCoordinates()),
                                    this.coordinates.push(l[0], l[1]),
                                    (c = this.coordinates.length),
                                    this.instructions.push([ee.CUSTOM, a, c, e, i]),
                                    this.hitDetectionInstructions.push([ee.CUSTOM, a, c, e, r || i]);
                        }
                        this.endGeometry(t);
                    }
                    beginGeometry(e, t) {
                        (this.beginGeometryInstruction1_ = [ee.BEGIN_GEOMETRY, t, 0, e]),
                            this.instructions.push(this.beginGeometryInstruction1_),
                            (this.beginGeometryInstruction2_ = [ee.BEGIN_GEOMETRY, t, 0, e]),
                            this.hitDetectionInstructions.push(this.beginGeometryInstruction2_);
                    }
                    finish() {
                        return {
                            instructions: this.instructions,
                            hitDetectionInstructions: this.hitDetectionInstructions,
                            coordinates: this.coordinates,
                        };
                    }
                    reverseHitDetectionInstructions() {
                        const e = this.hitDetectionInstructions;
                        let t;
                        e.reverse();
                        const i = e.length;
                        let r,
                            o,
                            s = -1;
                        for (t = 0; t < i; ++t)
                            (r = e[t]),
                                (o = r[0]),
                                o == ee.END_GEOMETRY
                                    ? (s = t)
                                    : o == ee.BEGIN_GEOMETRY && ((r[2] = t), C8(this.hitDetectionInstructions, s, t), (s = -1));
                    }
                    setFillStrokeStyle(e, t) {
                        const i = this.state;
                        if (e) {
                            const r = e.getColor();
                            i.fillStyle = Ti(r || hn);
                        } else i.fillStyle = void 0;
                        if (t) {
                            const r = t.getColor();
                            i.strokeStyle = Ti(r || Ic);
                            const o = t.getLineCap();
                            i.lineCap = void 0 !== o ? o : Jh;
                            const s = t.getLineDash();
                            i.lineDash = s ? s.slice() : tr;
                            const a = t.getLineDashOffset();
                            i.lineDashOffset = a || 0;
                            const l = t.getLineJoin();
                            i.lineJoin = void 0 !== l ? l : Ca;
                            const c = t.getWidth();
                            i.lineWidth = void 0 !== c ? c : 1;
                            const u = t.getMiterLimit();
                            (i.miterLimit = void 0 !== u ? u : 10),
                                i.lineWidth > this.maxLineWidth && ((this.maxLineWidth = i.lineWidth), (this.bufferedMaxExtent_ = null));
                        } else
                            (i.strokeStyle = void 0),
                                (i.lineCap = void 0),
                                (i.lineDash = null),
                                (i.lineDashOffset = void 0),
                                (i.lineJoin = void 0),
                                (i.lineWidth = void 0),
                                (i.miterLimit = void 0);
                    }
                    createFill(e) {
                        const t = e.fillStyle,
                            i = [ee.SET_FILL_STYLE, t];
                        return 'string' != typeof t && i.push(!0), i;
                    }
                    applyStroke(e) {
                        this.instructions.push(this.createStroke(e));
                    }
                    createStroke(e) {
                        return [
                            ee.SET_STROKE_STYLE,
                            e.strokeStyle,
                            e.lineWidth * this.pixelRatio,
                            e.lineCap,
                            e.lineJoin,
                            e.miterLimit,
                            this.applyPixelRatio(e.lineDash),
                            e.lineDashOffset * this.pixelRatio,
                        ];
                    }
                    updateFillStyle(e, t) {
                        const i = e.fillStyle;
                        ('string' != typeof i || e.currentFillStyle != i) &&
                            (void 0 !== i && this.instructions.push(t.call(this, e)), (e.currentFillStyle = i));
                    }
                    updateStrokeStyle(e, t) {
                        const i = e.strokeStyle,
                            r = e.lineCap,
                            o = e.lineDash,
                            s = e.lineDashOffset,
                            a = e.lineJoin,
                            l = e.lineWidth,
                            c = e.miterLimit;
                        (e.currentStrokeStyle != i ||
                            e.currentLineCap != r ||
                            (o != e.currentLineDash && !Pr(e.currentLineDash, o)) ||
                            e.currentLineDashOffset != s ||
                            e.currentLineJoin != a ||
                            e.currentLineWidth != l ||
                            e.currentMiterLimit != c) &&
                            (void 0 !== i && t.call(this, e),
                            (e.currentStrokeStyle = i),
                            (e.currentLineCap = r),
                            (e.currentLineDash = o),
                            (e.currentLineDashOffset = s),
                            (e.currentLineJoin = a),
                            (e.currentLineWidth = l),
                            (e.currentMiterLimit = c));
                    }
                    endGeometry(e) {
                        (this.beginGeometryInstruction1_[2] = this.instructions.length),
                            (this.beginGeometryInstruction1_ = null),
                            (this.beginGeometryInstruction2_[2] = this.hitDetectionInstructions.length),
                            (this.beginGeometryInstruction2_ = null);
                        const t = [ee.END_GEOMETRY, e];
                        this.instructions.push(t), this.hitDetectionInstructions.push(t);
                    }
                    getBufferedMaxExtent() {
                        return (
                            !this.bufferedMaxExtent_ &&
                                ((this.bufferedMaxExtent_ = jM(this.maxExtent)), this.maxLineWidth > 0) &&
                                Ty(this.bufferedMaxExtent_, (this.resolution * (this.maxLineWidth + 1)) / 2, this.bufferedMaxExtent_),
                            this.bufferedMaxExtent_
                        );
                    }
                },
                EA = class rq extends Pc {
                    constructor(e, t, i, r) {
                        super(e, t, i, r);
                    }
                    drawFlatCoordinatess_(e, t, i, r) {
                        const o = this.state,
                            s = void 0 !== o.fillStyle,
                            a = void 0 !== o.strokeStyle,
                            l = i.length;
                        this.instructions.push(Wo), this.hitDetectionInstructions.push(Wo);
                        for (let c = 0; c < l; ++c) {
                            const u = i[c],
                                d = this.coordinates.length,
                                h = this.appendFlatLineCoordinates(e, t, u, r, !0, !a),
                                f = [ee.MOVE_TO_LINE_TO, d, h];
                            this.instructions.push(f),
                                this.hitDetectionInstructions.push(f),
                                a && (this.instructions.push(bA), this.hitDetectionInstructions.push(bA)),
                                (t = u);
                        }
                        return (
                            s && (this.instructions.push(lf), this.hitDetectionInstructions.push(lf)),
                            a && (this.instructions.push(Ur), this.hitDetectionInstructions.push(Ur)),
                            t
                        );
                    }
                    drawCircle(e, t) {
                        const i = this.state;
                        if (void 0 === i.fillStyle && void 0 === i.strokeStyle) return;
                        this.setFillStrokeStyles_(),
                            this.beginGeometry(e, t),
                            void 0 !== i.fillStyle && this.hitDetectionInstructions.push([ee.SET_FILL_STYLE, hn]),
                            void 0 !== i.strokeStyle &&
                                this.hitDetectionInstructions.push([
                                    ee.SET_STROKE_STYLE,
                                    i.strokeStyle,
                                    i.lineWidth,
                                    i.lineCap,
                                    i.lineJoin,
                                    i.miterLimit,
                                    tr,
                                    0,
                                ]);
                        const s = e.getFlatCoordinates(),
                            a = e.getStride(),
                            l = this.coordinates.length;
                        this.appendFlatLineCoordinates(s, 0, s.length, a, !1, !1);
                        const c = [ee.CIRCLE, l];
                        this.instructions.push(Wo, c),
                            this.hitDetectionInstructions.push(Wo, c),
                            void 0 !== i.fillStyle && (this.instructions.push(lf), this.hitDetectionInstructions.push(lf)),
                            void 0 !== i.strokeStyle && (this.instructions.push(Ur), this.hitDetectionInstructions.push(Ur)),
                            this.endGeometry(t);
                    }
                    drawPolygon(e, t) {
                        const i = this.state;
                        if (void 0 === i.fillStyle && void 0 === i.strokeStyle) return;
                        this.setFillStrokeStyles_(),
                            this.beginGeometry(e, t),
                            void 0 !== i.fillStyle && this.hitDetectionInstructions.push([ee.SET_FILL_STYLE, hn]),
                            void 0 !== i.strokeStyle &&
                                this.hitDetectionInstructions.push([
                                    ee.SET_STROKE_STYLE,
                                    i.strokeStyle,
                                    i.lineWidth,
                                    i.lineCap,
                                    i.lineJoin,
                                    i.miterLimit,
                                    tr,
                                    0,
                                ]);
                        const s = e.getEnds(),
                            a = e.getOrientedFlatCoordinates(),
                            l = e.getStride();
                        this.drawFlatCoordinatess_(a, 0, s, l), this.endGeometry(t);
                    }
                    drawMultiPolygon(e, t) {
                        const i = this.state;
                        if (void 0 === i.fillStyle && void 0 === i.strokeStyle) return;
                        this.setFillStrokeStyles_(),
                            this.beginGeometry(e, t),
                            void 0 !== i.fillStyle && this.hitDetectionInstructions.push([ee.SET_FILL_STYLE, hn]),
                            void 0 !== i.strokeStyle &&
                                this.hitDetectionInstructions.push([
                                    ee.SET_STROKE_STYLE,
                                    i.strokeStyle,
                                    i.lineWidth,
                                    i.lineCap,
                                    i.lineJoin,
                                    i.miterLimit,
                                    tr,
                                    0,
                                ]);
                        const s = e.getEndss(),
                            a = e.getOrientedFlatCoordinates(),
                            l = e.getStride();
                        let c = 0;
                        for (let u = 0, d = s.length; u < d; ++u) c = this.drawFlatCoordinatess_(a, c, s[u], l);
                        this.endGeometry(t);
                    }
                    finish() {
                        this.reverseHitDetectionInstructions(), (this.state = null);
                        const e = this.tolerance;
                        if (0 !== e) {
                            const t = this.coordinates;
                            for (let i = 0, r = t.length; i < r; ++i) t[i] = Vo(t[i], e);
                        }
                        return super.finish();
                    }
                    setFillStrokeStyles_() {
                        const e = this.state;
                        void 0 !== e.fillStyle && this.updateFillStyle(e, this.createFill),
                            void 0 !== e.strokeStyle && this.updateStrokeStyle(e, this.applyStroke);
                    }
                };
            function oq(n, e, t, i, r) {
                const o = [];
                let s = t,
                    a = 0,
                    l = e.slice(t, 2);
                for (; a < n && s + r < i; ) {
                    const [c, u] = l.slice(-2),
                        d = e[s + r],
                        h = e[s + r + 1],
                        f = Math.sqrt((d - c) * (d - c) + (h - u) * (h - u));
                    if (((a += f), a >= n)) {
                        const m = (n - a + f) / f,
                            p = Cn(c, d, m),
                            g = Cn(u, h, m);
                        l.push(p, g), o.push(l), (l = [p, g]), a == n && (s += r), (a = 0);
                    } else if (a < n) l.push(e[s + r], e[s + r + 1]), (s += r);
                    else {
                        const m = f - a,
                            p = Cn(c, d, m / f),
                            g = Cn(u, h, m / f);
                        l.push(p, g), o.push(l), (l = [p, g]), (a = 0), (s += r);
                    }
                }
                return a > 0 && o.push(l), o;
            }
            function sq(n, e, t, i, r) {
                let u,
                    d,
                    h,
                    f,
                    m,
                    p,
                    g,
                    y,
                    _,
                    b,
                    o = t,
                    s = t,
                    a = 0,
                    l = 0,
                    c = t;
                for (d = t; d < i; d += r) {
                    const v = e[d],
                        E = e[d + 1];
                    void 0 !== m &&
                        ((_ = v - m),
                        (b = E - p),
                        (f = Math.sqrt(_ * _ + b * b)),
                        void 0 !== g &&
                            ((l += h),
                            (u = Math.acos((g * _ + y * b) / (h * f))),
                            u > n && (l > a && ((a = l), (o = c), (s = d)), (l = 0), (c = d - r))),
                        (h = f),
                        (g = _),
                        (y = b)),
                        (m = v),
                        (p = E);
                }
                return (l += f), l > a ? [c, d] : [o, s];
            }
            const cf = { left: 0, center: 0.5, right: 1, top: 0, middle: 0.5, hanging: 0.2, alphabetic: 0.8, ideographic: 0.8, bottom: 1 },
                lq = {
                    Circle: EA,
                    Default: Pc,
                    Image: class eq extends Pc {
                        constructor(e, t, i, r) {
                            super(e, t, i, r),
                                (this.hitDetectionImage_ = null),
                                (this.image_ = null),
                                (this.imagePixelRatio_ = void 0),
                                (this.anchorX_ = void 0),
                                (this.anchorY_ = void 0),
                                (this.height_ = void 0),
                                (this.opacity_ = void 0),
                                (this.originX_ = void 0),
                                (this.originY_ = void 0),
                                (this.rotateWithView_ = void 0),
                                (this.rotation_ = void 0),
                                (this.scale_ = void 0),
                                (this.width_ = void 0),
                                (this.declutterMode_ = void 0),
                                (this.declutterImageWithText_ = void 0);
                        }
                        drawPoint(e, t) {
                            if (!this.image_) return;
                            this.beginGeometry(e, t);
                            const i = e.getFlatCoordinates(),
                                r = e.getStride(),
                                o = this.coordinates.length,
                                s = this.appendFlatPointCoordinates(i, r);
                            this.instructions.push([
                                ee.DRAW_IMAGE,
                                o,
                                s,
                                this.image_,
                                this.anchorX_ * this.imagePixelRatio_,
                                this.anchorY_ * this.imagePixelRatio_,
                                Math.ceil(this.height_ * this.imagePixelRatio_),
                                this.opacity_,
                                this.originX_ * this.imagePixelRatio_,
                                this.originY_ * this.imagePixelRatio_,
                                this.rotateWithView_,
                                this.rotation_,
                                [
                                    (this.scale_[0] * this.pixelRatio) / this.imagePixelRatio_,
                                    (this.scale_[1] * this.pixelRatio) / this.imagePixelRatio_,
                                ],
                                Math.ceil(this.width_ * this.imagePixelRatio_),
                                this.declutterMode_,
                                this.declutterImageWithText_,
                            ]),
                                this.hitDetectionInstructions.push([
                                    ee.DRAW_IMAGE,
                                    o,
                                    s,
                                    this.hitDetectionImage_,
                                    this.anchorX_,
                                    this.anchorY_,
                                    this.height_,
                                    1,
                                    this.originX_,
                                    this.originY_,
                                    this.rotateWithView_,
                                    this.rotation_,
                                    this.scale_,
                                    this.width_,
                                    this.declutterMode_,
                                    this.declutterImageWithText_,
                                ]),
                                this.endGeometry(t);
                        }
                        drawMultiPoint(e, t) {
                            if (!this.image_) return;
                            this.beginGeometry(e, t);
                            const i = e.getFlatCoordinates(),
                                r = e.getStride(),
                                o = this.coordinates.length,
                                s = this.appendFlatPointCoordinates(i, r);
                            this.instructions.push([
                                ee.DRAW_IMAGE,
                                o,
                                s,
                                this.image_,
                                this.anchorX_ * this.imagePixelRatio_,
                                this.anchorY_ * this.imagePixelRatio_,
                                Math.ceil(this.height_ * this.imagePixelRatio_),
                                this.opacity_,
                                this.originX_ * this.imagePixelRatio_,
                                this.originY_ * this.imagePixelRatio_,
                                this.rotateWithView_,
                                this.rotation_,
                                [
                                    (this.scale_[0] * this.pixelRatio) / this.imagePixelRatio_,
                                    (this.scale_[1] * this.pixelRatio) / this.imagePixelRatio_,
                                ],
                                Math.ceil(this.width_ * this.imagePixelRatio_),
                                this.declutterMode_,
                                this.declutterImageWithText_,
                            ]),
                                this.hitDetectionInstructions.push([
                                    ee.DRAW_IMAGE,
                                    o,
                                    s,
                                    this.hitDetectionImage_,
                                    this.anchorX_,
                                    this.anchorY_,
                                    this.height_,
                                    1,
                                    this.originX_,
                                    this.originY_,
                                    this.rotateWithView_,
                                    this.rotation_,
                                    this.scale_,
                                    this.width_,
                                    this.declutterMode_,
                                    this.declutterImageWithText_,
                                ]),
                                this.endGeometry(t);
                        }
                        finish() {
                            return (
                                this.reverseHitDetectionInstructions(),
                                (this.anchorX_ = void 0),
                                (this.anchorY_ = void 0),
                                (this.hitDetectionImage_ = null),
                                (this.image_ = null),
                                (this.imagePixelRatio_ = void 0),
                                (this.height_ = void 0),
                                (this.scale_ = void 0),
                                (this.opacity_ = void 0),
                                (this.originX_ = void 0),
                                (this.originY_ = void 0),
                                (this.rotateWithView_ = void 0),
                                (this.rotation_ = void 0),
                                (this.width_ = void 0),
                                super.finish()
                            );
                        }
                        setImageStyle(e, t) {
                            const i = e.getAnchor(),
                                r = e.getSize(),
                                o = e.getOrigin();
                            (this.imagePixelRatio_ = e.getPixelRatio(this.pixelRatio)),
                                (this.anchorX_ = i[0]),
                                (this.anchorY_ = i[1]),
                                (this.hitDetectionImage_ = e.getHitDetectionImage()),
                                (this.image_ = e.getImage(this.pixelRatio)),
                                (this.height_ = r[1]),
                                (this.opacity_ = e.getOpacity()),
                                (this.originX_ = o[0]),
                                (this.originY_ = o[1]),
                                (this.rotateWithView_ = e.getRotateWithView()),
                                (this.rotation_ = e.getRotation()),
                                (this.scale_ = e.getScaleArray()),
                                (this.width_ = r[0]),
                                (this.declutterMode_ = e.getDeclutterMode()),
                                (this.declutterImageWithText_ = t);
                        }
                    },
                    LineString: class nq extends Pc {
                        constructor(e, t, i, r) {
                            super(e, t, i, r);
                        }
                        drawFlatCoordinates_(e, t, i, r) {
                            const o = this.coordinates.length,
                                s = this.appendFlatLineCoordinates(e, t, i, r, !1, !1),
                                a = [ee.MOVE_TO_LINE_TO, o, s];
                            return this.instructions.push(a), this.hitDetectionInstructions.push(a), i;
                        }
                        drawLineString(e, t) {
                            const i = this.state;
                            if (void 0 === i.strokeStyle || void 0 === i.lineWidth) return;
                            this.updateStrokeStyle(i, this.applyStroke),
                                this.beginGeometry(e, t),
                                this.hitDetectionInstructions.push(
                                    [ee.SET_STROKE_STYLE, i.strokeStyle, i.lineWidth, i.lineCap, i.lineJoin, i.miterLimit, tr, 0],
                                    Wo,
                                );
                            const s = e.getFlatCoordinates(),
                                a = e.getStride();
                            this.drawFlatCoordinates_(s, 0, s.length, a), this.hitDetectionInstructions.push(Ur), this.endGeometry(t);
                        }
                        drawMultiLineString(e, t) {
                            const i = this.state;
                            if (void 0 === i.strokeStyle || void 0 === i.lineWidth) return;
                            this.updateStrokeStyle(i, this.applyStroke),
                                this.beginGeometry(e, t),
                                this.hitDetectionInstructions.push(
                                    [ee.SET_STROKE_STYLE, i.strokeStyle, i.lineWidth, i.lineCap, i.lineJoin, i.miterLimit, tr, 0],
                                    Wo,
                                );
                            const s = e.getEnds(),
                                a = e.getFlatCoordinates(),
                                l = e.getStride();
                            let c = 0;
                            for (let u = 0, d = s.length; u < d; ++u) c = this.drawFlatCoordinates_(a, c, s[u], l);
                            this.hitDetectionInstructions.push(Ur), this.endGeometry(t);
                        }
                        finish() {
                            const e = this.state;
                            return (
                                null != e.lastStroke && e.lastStroke != this.coordinates.length && this.instructions.push(Ur),
                                this.reverseHitDetectionInstructions(),
                                (this.state = null),
                                super.finish()
                            );
                        }
                        applyStroke(e) {
                            null != e.lastStroke &&
                                e.lastStroke != this.coordinates.length &&
                                (this.instructions.push(Ur), (e.lastStroke = this.coordinates.length)),
                                (e.lastStroke = 0),
                                super.applyStroke(e),
                                this.instructions.push(Wo);
                        }
                    },
                    Polygon: EA,
                    Text: class aq extends Pc {
                        constructor(e, t, i, r) {
                            super(e, t, i, r),
                                (this.labels_ = null),
                                (this.text_ = ''),
                                (this.textOffsetX_ = 0),
                                (this.textOffsetY_ = 0),
                                (this.textRotateWithView_ = void 0),
                                (this.textRotation_ = 0),
                                (this.textFillState_ = null),
                                (this.fillStates = {}),
                                (this.fillStates[hn] = { fillStyle: hn }),
                                (this.textStrokeState_ = null),
                                (this.strokeStates = {}),
                                (this.textState_ = {}),
                                (this.textStates = {}),
                                (this.textKey_ = ''),
                                (this.fillKey_ = ''),
                                (this.strokeKey_ = ''),
                                (this.declutterImageWithText_ = void 0);
                        }
                        finish() {
                            const e = super.finish();
                            return (
                                (e.textStates = this.textStates), (e.fillStates = this.fillStates), (e.strokeStates = this.strokeStates), e
                            );
                        }
                        drawText(e, t) {
                            const o = this.textState_;
                            if ('' === this.text_ || !o || (!this.textFillState_ && !this.textStrokeState_)) return;
                            const s = this.coordinates;
                            let a = s.length;
                            const l = e.getType();
                            let c = null,
                                u = e.getStride();
                            if (
                                'line' !== o.placement ||
                                ('LineString' != l && 'MultiLineString' != l && 'Polygon' != l && 'MultiPolygon' != l)
                            ) {
                                let d = o.overflow ? null : [];
                                switch (l) {
                                    case 'Point':
                                    case 'MultiPoint':
                                        c = e.getFlatCoordinates();
                                        break;
                                    case 'LineString':
                                        c = e.getFlatMidpoint();
                                        break;
                                    case 'Circle':
                                        c = e.getCenter();
                                        break;
                                    case 'MultiLineString':
                                        (c = e.getFlatMidpoints()), (u = 2);
                                        break;
                                    case 'Polygon':
                                        (c = e.getFlatInteriorPoint()), o.overflow || d.push(c[2] / this.resolution), (u = 3);
                                        break;
                                    case 'MultiPolygon':
                                        const y = e.getFlatInteriorPoints();
                                        c = [];
                                        for (let _ = 0, b = y.length; _ < b; _ += 3)
                                            o.overflow || d.push(y[_ + 2] / this.resolution), c.push(y[_], y[_ + 1]);
                                        if (0 === c.length) return;
                                        u = 2;
                                }
                                const h = this.appendFlatPointCoordinates(c, u);
                                if (h === a) return;
                                if (d && (h - a) / 2 != c.length / u) {
                                    let y = a / 2;
                                    d = d.filter((_, b) => {
                                        const v = s[2 * (y + b)] === c[b * u] && s[2 * (y + b) + 1] === c[b * u + 1];
                                        return v || --y, v;
                                    });
                                }
                                this.saveTextStates_(),
                                    (o.backgroundFill || o.backgroundStroke) &&
                                        (this.setFillStrokeStyle(o.backgroundFill, o.backgroundStroke),
                                        o.backgroundFill && this.updateFillStyle(this.state, this.createFill),
                                        o.backgroundStroke &&
                                            (this.updateStrokeStyle(this.state, this.applyStroke),
                                            this.hitDetectionInstructions.push(this.createStroke(this.state)))),
                                    this.beginGeometry(e, t);
                                let f = o.padding;
                                if (f != zo && (o.scale[0] < 0 || o.scale[1] < 0)) {
                                    let y = o.padding[0],
                                        _ = o.padding[1],
                                        b = o.padding[2],
                                        v = o.padding[3];
                                    o.scale[0] < 0 && ((_ = -_), (v = -v)), o.scale[1] < 0 && ((y = -y), (b = -b)), (f = [y, _, b, v]);
                                }
                                const m = this.pixelRatio;
                                this.instructions.push([
                                    ee.DRAW_IMAGE,
                                    a,
                                    h,
                                    null,
                                    NaN,
                                    NaN,
                                    NaN,
                                    1,
                                    0,
                                    0,
                                    this.textRotateWithView_,
                                    this.textRotation_,
                                    [1, 1],
                                    NaN,
                                    void 0,
                                    this.declutterImageWithText_,
                                    f == zo
                                        ? zo
                                        : f.map(function (y) {
                                              return y * m;
                                          }),
                                    !!o.backgroundFill,
                                    !!o.backgroundStroke,
                                    this.text_,
                                    this.textKey_,
                                    this.strokeKey_,
                                    this.fillKey_,
                                    this.textOffsetX_,
                                    this.textOffsetY_,
                                    d,
                                ]);
                                const p = 1 / m,
                                    g = this.state.fillStyle;
                                o.backgroundFill &&
                                    ((this.state.fillStyle = hn), this.hitDetectionInstructions.push(this.createFill(this.state))),
                                    this.hitDetectionInstructions.push([
                                        ee.DRAW_IMAGE,
                                        a,
                                        h,
                                        null,
                                        NaN,
                                        NaN,
                                        NaN,
                                        1,
                                        0,
                                        0,
                                        this.textRotateWithView_,
                                        this.textRotation_,
                                        [p, p],
                                        NaN,
                                        void 0,
                                        this.declutterImageWithText_,
                                        f,
                                        !!o.backgroundFill,
                                        !!o.backgroundStroke,
                                        this.text_,
                                        this.textKey_,
                                        this.strokeKey_,
                                        this.fillKey_ ? hn : this.fillKey_,
                                        this.textOffsetX_,
                                        this.textOffsetY_,
                                        d,
                                    ]),
                                    o.backgroundFill &&
                                        ((this.state.fillStyle = g), this.hitDetectionInstructions.push(this.createFill(this.state))),
                                    this.endGeometry(t);
                            } else {
                                if (!dn(this.getBufferedMaxExtent(), e.getExtent())) return;
                                let d;
                                if (((c = e.getFlatCoordinates()), 'LineString' == l)) d = [c.length];
                                else if ('MultiLineString' == l) d = e.getEnds();
                                else if ('Polygon' == l) d = e.getEnds().slice(0, 1);
                                else if ('MultiPolygon' == l) {
                                    const p = e.getEndss();
                                    d = [];
                                    for (let g = 0, y = p.length; g < y; ++g) d.push(p[g][0]);
                                }
                                this.beginGeometry(e, t);
                                const h = o.repeat,
                                    f = h ? void 0 : o.textAlign;
                                let m = 0;
                                for (let p = 0, g = d.length; p < g; ++p) {
                                    let y;
                                    y = h ? oq(h * this.resolution, c, m, d[p], u) : [c.slice(m, d[p])];
                                    for (let _ = 0, b = y.length; _ < b; ++_) {
                                        const v = y[_];
                                        let E = 0,
                                            R = v.length;
                                        if (null == f) {
                                            const k = sq(o.maxAngle, v, 0, v.length, 2);
                                            (E = k[0]), (R = k[1]);
                                        }
                                        for (let k = E; k < R; k += u) s.push(v[k], v[k + 1]);
                                        const N = s.length;
                                        (m = d[p]), this.drawChars_(a, N), (a = N);
                                    }
                                }
                                this.endGeometry(t);
                            }
                        }
                        saveTextStates_() {
                            const e = this.textStrokeState_,
                                t = this.textState_,
                                i = this.textFillState_,
                                r = this.strokeKey_;
                            e &&
                                (r in this.strokeStates ||
                                    (this.strokeStates[r] = {
                                        strokeStyle: e.strokeStyle,
                                        lineCap: e.lineCap,
                                        lineDashOffset: e.lineDashOffset,
                                        lineWidth: e.lineWidth,
                                        lineJoin: e.lineJoin,
                                        miterLimit: e.miterLimit,
                                        lineDash: e.lineDash,
                                    }));
                            const o = this.textKey_;
                            o in this.textStates ||
                                (this.textStates[o] = {
                                    font: t.font,
                                    textAlign: t.textAlign || xc,
                                    justify: t.justify,
                                    textBaseline: t.textBaseline || ef,
                                    scale: t.scale,
                                });
                            const s = this.fillKey_;
                            i && (s in this.fillStates || (this.fillStates[s] = { fillStyle: i.fillStyle }));
                        }
                        drawChars_(e, t) {
                            const i = this.textStrokeState_,
                                r = this.textState_,
                                o = this.strokeKey_,
                                s = this.textKey_,
                                a = this.fillKey_;
                            this.saveTextStates_();
                            const l = this.pixelRatio,
                                c = cf[r.textBaseline],
                                u = this.textOffsetY_ * l,
                                d = this.text_,
                                h = i ? (i.lineWidth * Math.abs(r.scale[0])) / 2 : 0;
                            this.instructions.push([ee.DRAW_CHARS, e, t, c, r.overflow, a, r.maxAngle, l, u, o, h * l, d, s, 1]),
                                this.hitDetectionInstructions.push([
                                    ee.DRAW_CHARS,
                                    e,
                                    t,
                                    c,
                                    r.overflow,
                                    a && hn,
                                    r.maxAngle,
                                    1,
                                    u,
                                    o,
                                    h,
                                    d,
                                    s,
                                    1 / l,
                                ]);
                        }
                        setTextStyle(e, t) {
                            let i, r, o;
                            if (e) {
                                const s = e.getFill();
                                s
                                    ? ((r = this.textFillState_),
                                      r || ((r = {}), (this.textFillState_ = r)),
                                      (r.fillStyle = Ti(s.getColor() || hn)))
                                    : ((r = null), (this.textFillState_ = r));
                                const a = e.getStroke();
                                if (a) {
                                    (o = this.textStrokeState_), o || ((o = {}), (this.textStrokeState_ = o));
                                    const m = a.getLineDash(),
                                        p = a.getLineDashOffset(),
                                        g = a.getWidth(),
                                        y = a.getMiterLimit();
                                    (o.lineCap = a.getLineCap() || Jh),
                                        (o.lineDash = m ? m.slice() : tr),
                                        (o.lineDashOffset = void 0 === p ? 0 : p),
                                        (o.lineJoin = a.getLineJoin() || Ca),
                                        (o.lineWidth = void 0 === g ? 1 : g),
                                        (o.miterLimit = void 0 === y ? 10 : y),
                                        (o.strokeStyle = Ti(a.getColor() || Ic));
                                } else (o = null), (this.textStrokeState_ = o);
                                i = this.textState_;
                                const l = e.getFont() || jR;
                                p4(l);
                                const c = e.getScaleArray();
                                (i.overflow = e.getOverflow()),
                                    (i.font = l),
                                    (i.maxAngle = e.getMaxAngle()),
                                    (i.placement = e.getPlacement()),
                                    (i.textAlign = e.getTextAlign()),
                                    (i.repeat = e.getRepeat()),
                                    (i.justify = e.getJustify()),
                                    (i.textBaseline = e.getTextBaseline() || ef),
                                    (i.backgroundFill = e.getBackgroundFill()),
                                    (i.backgroundStroke = e.getBackgroundStroke()),
                                    (i.padding = e.getPadding() || zo),
                                    (i.scale = void 0 === c ? [1, 1] : c);
                                const u = e.getOffsetX(),
                                    d = e.getOffsetY(),
                                    h = e.getRotateWithView(),
                                    f = e.getRotation();
                                (this.text_ = e.getText() || ''),
                                    (this.textOffsetX_ = void 0 === u ? 0 : u),
                                    (this.textOffsetY_ = void 0 === d ? 0 : d),
                                    (this.textRotateWithView_ = void 0 !== h && h),
                                    (this.textRotation_ = void 0 === f ? 0 : f),
                                    (this.strokeKey_ = o
                                        ? ('string' == typeof o.strokeStyle ? o.strokeStyle : Se(o.strokeStyle)) +
                                          o.lineCap +
                                          o.lineDashOffset +
                                          '|' +
                                          o.lineWidth +
                                          o.lineJoin +
                                          o.miterLimit +
                                          '[' +
                                          o.lineDash.join() +
                                          ']'
                                        : ''),
                                    (this.textKey_ =
                                        i.font +
                                        i.scale +
                                        (i.textAlign || '?') +
                                        (i.repeat || '?') +
                                        (i.justify || '?') +
                                        (i.textBaseline || '?')),
                                    (this.fillKey_ = r ? ('string' == typeof r.fillStyle ? r.fillStyle : '|' + Se(r.fillStyle)) : '');
                            } else this.text_ = '';
                            this.declutterImageWithText_ = t;
                        }
                    },
                },
                wA = class cq {
                    constructor(e, t, i, r) {
                        (this.tolerance_ = e),
                            (this.maxExtent_ = t),
                            (this.pixelRatio_ = r),
                            (this.resolution_ = i),
                            (this.buildersByZIndex_ = {});
                    }
                    finish() {
                        const e = {};
                        for (const t in this.buildersByZIndex_) {
                            e[t] = e[t] || {};
                            const i = this.buildersByZIndex_[t];
                            for (const r in i) {
                                const o = i[r].finish();
                                e[t][r] = o;
                            }
                        }
                        return e;
                    }
                    getBuilder(e, t) {
                        const i = void 0 !== e ? e.toString() : '0';
                        let r = this.buildersByZIndex_[i];
                        void 0 === r && ((r = {}), (this.buildersByZIndex_[i] = r));
                        let o = r[t];
                        return (
                            void 0 === o &&
                                ((o = new (0, lq[t])(this.tolerance_, this.maxExtent_, this.resolution_, this.pixelRatio_)), (r[t] = o)),
                            o
                        );
                    }
                };
            function uq(n, e, t, i, r, o, s, a, l, c, u, d) {
                let h = n[e],
                    f = n[e + 1],
                    m = 0,
                    p = 0,
                    g = 0,
                    y = 0;
                function _() {
                    (m = h), (p = f), (h = n[(e += i)]), (f = n[e + 1]), (y += g), (g = Math.sqrt((h - m) * (h - m) + (f - p) * (f - p)));
                }
                do {
                    _();
                } while (e < t - i && y + g < o);
                let b = 0 === g ? 0 : (o - y) / g;
                const v = Cn(m, h, b),
                    E = Cn(p, f, b),
                    R = e - i,
                    N = y,
                    k = o + a * l(c, r, u);
                for (; e < t - i && y + g < k; ) _();
                b = 0 === g ? 0 : (k - y) / g;
                const U = Cn(m, h, b),
                    Y = Cn(p, f, b);
                let be;
                if (d) {
                    const I = [v, E, U, Y];
                    yR(I, 0, 4, 2, d, I, I), (be = I[0] > I[2]);
                } else be = v > U;
                const de = Math.PI,
                    le = [],
                    nt = R + i === e;
                let ue;
                if (((g = 0), (y = N), (h = n[(e = R)]), (f = n[e + 1]), nt))
                    return (
                        _(),
                        (ue = Math.atan2(f - p, h - m)),
                        be && (ue += ue > 0 ? -de : de),
                        (le[0] = [(U + v) / 2, (Y + E) / 2, (k - o) / 2, ue, r]),
                        le
                    );
                for (let I = 0, x = (r = r.replace(/\n/g, ' ')).length; I < x; ) {
                    _();
                    let M = Math.atan2(f - p, h - m);
                    if ((be && (M += M > 0 ? -de : de), void 0 !== ue)) {
                        let q = M - ue;
                        if (((q += q > de ? -2 * de : q < -de ? 2 * de : 0), Math.abs(q) > s)) return null;
                    }
                    ue = M;
                    const B = I;
                    let ie = 0;
                    for (; I < x; ++I) {
                        const Ae = a * l(c, r[be ? x - I - 1 : I], u);
                        if (e + i < t && y + g < o + ie + Ae / 2) break;
                        ie += Ae;
                    }
                    if (I === B) continue;
                    const ke = be ? r.substring(x - B, x - I) : r.substring(B, I);
                    b = 0 === g ? 0 : (o + ie / 2 - y) / g;
                    const A = Cn(m, h, b),
                        it = Cn(p, f, b);
                    le.push([A, it, ie / 2, M, ke]), (o += ie);
                }
                return le;
            }
            function Ob(n, e, t, i) {
                let r = n[e],
                    o = n[e + 1],
                    s = 0;
                for (let a = e + i; a < t; a += i) {
                    const l = n[a],
                        c = n[a + 1];
                    (s += Math.sqrt((l - r) * (l - r) + (c - o) * (c - o))), (r = l), (o = c);
                }
                return s;
            }
            const Ra = [1 / 0, 1 / 0, -1 / 0, -1 / 0],
                zr = [],
                rr = [],
                or = [],
                Gr = [];
            function CA(n) {
                return n[3].declutterBox;
            }
            const DA = new RegExp('[\u0591-\u08ff\ufb1d-\ufdff\ufe70-\ufefc\u0800-\u0fff\ue800-\uefff]');
            function Nb(n, e) {
                return 'start' === e ? (e = DA.test(n) ? 'right' : 'left') : 'end' === e && (e = DA.test(n) ? 'left' : 'right'), cf[e];
            }
            function dq(n, e, t) {
                return t > 0 && n.push('\n', ''), n.push(e, ''), n;
            }
            const fq = class hq {
                    constructor(e, t, i, r) {
                        (this.overlaps = i),
                            (this.pixelRatio = t),
                            (this.resolution = e),
                            (this.instructions = r.instructions),
                            (this.coordinates = r.coordinates),
                            (this.coordinateCache_ = {}),
                            (this.renderedTransform_ = [1, 0, 0, 1, 0, 0]),
                            (this.hitDetectionInstructions = r.hitDetectionInstructions),
                            (this.pixelCoordinates_ = null),
                            (this.viewRotation_ = 0),
                            (this.fillStates = r.fillStates || {}),
                            (this.strokeStates = r.strokeStates || {}),
                            (this.textStates = r.textStates || {}),
                            (this.widths_ = {}),
                            (this.labels_ = {});
                    }
                    createLabel(e, t, i, r) {
                        const o = e + t + i + r;
                        if (this.labels_[o]) return this.labels_[o];
                        const s = r ? this.strokeStates[r] : null,
                            a = i ? this.fillStates[i] : null,
                            l = this.textStates[t],
                            c = this.pixelRatio,
                            u = [l.scale[0] * c, l.scale[1] * c],
                            d = Array.isArray(e),
                            h = l.justify ? cf[l.justify] : Nb(Array.isArray(e) ? e[0] : e, l.textAlign || xc),
                            f = r && s.lineWidth ? s.lineWidth : 0,
                            m = d ? e : e.split('\n').reduce(dq, []),
                            {
                                width: p,
                                height: g,
                                widths: y,
                                heights: _,
                                lineWidths: b,
                            } = (function _4(n, e) {
                                const t = [],
                                    i = [],
                                    r = [];
                                let o = 0,
                                    s = 0,
                                    a = 0,
                                    l = 0;
                                for (let c = 0, u = e.length; c <= u; c += 2) {
                                    const d = e[c];
                                    if ('\n' === d || c === u) {
                                        (o = Math.max(o, s)), r.push(s), (s = 0), (a += l);
                                        continue;
                                    }
                                    const h = e[c + 1] || n.font,
                                        f = tf(h, d);
                                    t.push(f), (s += f);
                                    const m = g4(h);
                                    i.push(m), (l = Math.max(l, m));
                                }
                                return { width: o, height: a, widths: t, heights: i, lineWidths: r };
                            })(l, m),
                            v = p + f,
                            E = [],
                            R = (v + 2) * u[0],
                            N = (g + f) * u[1],
                            k = {
                                width: R < 0 ? Math.floor(R) : Math.ceil(R),
                                height: N < 0 ? Math.floor(N) : Math.ceil(N),
                                contextInstructions: E,
                            };
                        (1 != u[0] || 1 != u[1]) && E.push('scale', u),
                            r &&
                                (E.push('strokeStyle', s.strokeStyle),
                                E.push('lineWidth', f),
                                E.push('lineCap', s.lineCap),
                                E.push('lineJoin', s.lineJoin),
                                E.push('miterLimit', s.miterLimit),
                                E.push('setLineDash', [s.lineDash]),
                                E.push('lineDashOffset', s.lineDashOffset)),
                            i && E.push('fillStyle', a.fillStyle),
                            E.push('textBaseline', 'middle'),
                            E.push('textAlign', 'center');
                        const U = 0.5 - h;
                        let Y = h * v + U * f;
                        const be = [],
                            de = [];
                        let x,
                            le = 0,
                            nt = 0,
                            ue = 0,
                            I = 0;
                        for (let M = 0, B = m.length; M < B; M += 2) {
                            const ie = m[M];
                            if ('\n' === ie) {
                                (nt += le), (le = 0), (Y = h * v + U * f), ++I;
                                continue;
                            }
                            const ke = m[M + 1] || l.font;
                            ke !== x && (r && be.push('font', ke), i && de.push('font', ke), (x = ke)), (le = Math.max(le, _[ue]));
                            const A = [ie, Y + U * y[ue] + h * (y[ue] - b[I]), 0.5 * (f + le) + nt];
                            (Y += y[ue]), r && be.push('strokeText', A), i && de.push('fillText', A), ++ue;
                        }
                        return Array.prototype.push.apply(E, be), Array.prototype.push.apply(E, de), (this.labels_[o] = k), k;
                    }
                    replayTextBackground_(e, t, i, r, o, s, a) {
                        e.beginPath(),
                            e.moveTo.apply(e, t),
                            e.lineTo.apply(e, i),
                            e.lineTo.apply(e, r),
                            e.lineTo.apply(e, o),
                            e.lineTo.apply(e, t),
                            s && ((this.alignFill_ = s[2]), this.fill_(e)),
                            a && (this.setStrokeStyle_(e, a), e.stroke());
                    }
                    calculateImageOrLabelDimensions_(e, t, i, r, o, s, a, l, c, u, d, h, f, m, p, g) {
                        let y = i - (a *= h[0]),
                            _ = r - (l *= h[1]);
                        const b = o + c > e ? e - c : o,
                            v = s + u > t ? t - u : s,
                            E = m[3] + b * h[0] + m[1],
                            R = m[0] + v * h[1] + m[2],
                            N = y - m[3],
                            k = _ - m[0];
                        let U;
                        return (
                            (p || 0 !== d) &&
                                ((zr[0] = N),
                                (Gr[0] = N),
                                (zr[1] = k),
                                (rr[1] = k),
                                (rr[0] = N + E),
                                (or[0] = rr[0]),
                                (or[1] = k + R),
                                (Gr[1] = or[1])),
                            0 !== d
                                ? ((U = Qi([1, 0, 0, 1, 0, 0], i, r, 1, 1, d, -i, -r)),
                                  Ct(U, zr),
                                  Ct(U, rr),
                                  Ct(U, or),
                                  Ct(U, Gr),
                                  Ji(
                                      Math.min(zr[0], rr[0], or[0], Gr[0]),
                                      Math.min(zr[1], rr[1], or[1], Gr[1]),
                                      Math.max(zr[0], rr[0], or[0], Gr[0]),
                                      Math.max(zr[1], rr[1], or[1], Gr[1]),
                                      Ra,
                                  ))
                                : Ji(Math.min(N, N + E), Math.min(k, k + R), Math.max(N, N + E), Math.max(k, k + R), Ra),
                            f && ((y = Math.round(y)), (_ = Math.round(_))),
                            {
                                drawImageX: y,
                                drawImageY: _,
                                drawImageW: b,
                                drawImageH: v,
                                originX: c,
                                originY: u,
                                declutterBox: { minX: Ra[0], minY: Ra[1], maxX: Ra[2], maxY: Ra[3], value: g },
                                canvasTransform: U,
                                scale: h,
                            }
                        );
                    }
                    replayImageOrLabel_(e, t, i, r, o, s, a) {
                        const c = r.declutterBox,
                            u = e.canvas,
                            d = a ? (a[2] * r.scale[0]) / 2 : 0;
                        return (
                            c.minX - d <= u.width / t &&
                                c.maxX + d >= 0 &&
                                c.minY - d <= u.height / t &&
                                c.maxY + d >= 0 &&
                                (!(!s && !a) && this.replayTextBackground_(e, zr, rr, or, Gr, s, a),
                                (function y4(n, e, t, i, r, o, s, a, l, c, u) {
                                    n.save(),
                                        1 !== t && (n.globalAlpha *= t),
                                        e && n.setTransform.apply(n, e),
                                        i.contextInstructions
                                            ? (n.translate(l, c),
                                              n.scale(u[0], u[1]),
                                              (function b4(n, e) {
                                                  const t = n.contextInstructions;
                                                  for (let i = 0, r = t.length; i < r; i += 2)
                                                      Array.isArray(t[i + 1]) ? e[t[i]].apply(e, t[i + 1]) : (e[t[i]] = t[i + 1]);
                                              })(i, n))
                                            : u[0] < 0 || u[1] < 0
                                              ? (n.translate(l, c), n.scale(u[0], u[1]), n.drawImage(i, r, o, s, a, 0, 0, s, a))
                                              : n.drawImage(i, r, o, s, a, l, c, s * u[0], a * u[1]),
                                        n.restore();
                                })(
                                    e,
                                    r.canvasTransform,
                                    o,
                                    i,
                                    r.originX,
                                    r.originY,
                                    r.drawImageW,
                                    r.drawImageH,
                                    r.drawImageX,
                                    r.drawImageY,
                                    r.scale,
                                )),
                            !0
                        );
                    }
                    fill_(e) {
                        if (this.alignFill_) {
                            const t = Ct(this.renderedTransform_, [0, 0]),
                                i = 512 * this.pixelRatio;
                            e.save(), e.translate(t[0] % i, t[1] % i), e.rotate(this.viewRotation_);
                        }
                        e.fill(), this.alignFill_ && e.restore();
                    }
                    setStrokeStyle_(e, t) {
                        (e.strokeStyle = t[1]),
                            (e.lineWidth = t[2]),
                            (e.lineCap = t[3]),
                            (e.lineJoin = t[4]),
                            (e.miterLimit = t[5]),
                            (e.lineDashOffset = t[7]),
                            e.setLineDash(t[6]);
                    }
                    drawLabelWithPointPlacement_(e, t, i, r) {
                        const o = this.textStates[t],
                            s = this.createLabel(e, t, r, i),
                            a = this.strokeStates[i],
                            l = this.pixelRatio,
                            c = Nb(Array.isArray(e) ? e[0] : e, o.textAlign || xc),
                            u = cf[o.textBaseline || ef],
                            d = a && a.lineWidth ? a.lineWidth : 0;
                        return {
                            label: s,
                            anchorX: c * (s.width / l - 2 * o.scale[0]) + 2 * (0.5 - c) * d,
                            anchorY: (u * s.height) / l + 2 * (0.5 - u) * d,
                        };
                    }
                    execute_(e, t, i, r, o, s, a, l) {
                        let c;
                        this.pixelCoordinates_ && Pr(i, this.renderedTransform_)
                            ? (c = this.pixelCoordinates_)
                            : (this.pixelCoordinates_ || (this.pixelCoordinates_ = []),
                              (c = Bo(this.coordinates, 0, this.coordinates.length, 2, i, this.pixelCoordinates_)),
                              (function F8(n, e) {
                                  (n[0] = e[0]), (n[1] = e[1]), (n[2] = e[2]), (n[3] = e[3]), (n[4] = e[4]), (n[5] = e[5]);
                              })(this.renderedTransform_, i));
                        let u = 0;
                        const d = r.length;
                        let f,
                            m,
                            p,
                            g,
                            y,
                            _,
                            b,
                            v,
                            E,
                            R,
                            N,
                            k,
                            h = 0,
                            U = 0,
                            Y = 0,
                            be = null,
                            de = null;
                        const le = this.coordinateCache_,
                            nt = this.viewRotation_,
                            ue = Math.round(1e12 * Math.atan2(-i[1], i[0])) / 1e12,
                            I = { context: e, pixelRatio: this.pixelRatio, resolution: this.resolution, rotation: nt },
                            x = this.instructions != r || this.overlaps ? 0 : 200;
                        let M, B, ie, ke;
                        for (; u < d; ) {
                            const A = r[u];
                            switch (A[0]) {
                                case ee.BEGIN_GEOMETRY:
                                    (M = A[1]),
                                        (ke = A[3]),
                                        M.getGeometry() ? (void 0 === a || dn(a, ke.getExtent()) ? ++u : (u = A[2] + 1)) : (u = A[2]);
                                    break;
                                case ee.BEGIN_PATH:
                                    U > x && (this.fill_(e), (U = 0)),
                                        Y > x && (e.stroke(), (Y = 0)),
                                        !U && !Y && (e.beginPath(), (g = NaN), (y = NaN)),
                                        ++u;
                                    break;
                                case ee.CIRCLE:
                                    h = A[1];
                                    const q = c[h],
                                        Ae = c[h + 1],
                                        Ke = c[h + 2] - q,
                                        rt = c[h + 3] - Ae,
                                        ri = Math.sqrt(Ke * Ke + rt * rt);
                                    e.moveTo(q + ri, Ae), e.arc(q, Ae, ri, 0, 2 * Math.PI, !0), ++u;
                                    break;
                                case ee.CLOSE_PATH:
                                    e.closePath(), ++u;
                                    break;
                                case ee.CUSTOM:
                                    (h = A[1]), (f = A[2]);
                                    const ka = A[4],
                                        Of = 6 == A.length ? A[5] : void 0;
                                    (I.geometry = A[3]), (I.feature = M), u in le || (le[u] = []);
                                    const Xr = le[u];
                                    Of ? Of(c, h, f, 2, Xr) : ((Xr[0] = c[h]), (Xr[1] = c[h + 1]), (Xr.length = 2)), ka(Xr, I), ++u;
                                    break;
                                case ee.DRAW_IMAGE:
                                    (h = A[1]), (f = A[2]), (v = A[3]), (m = A[4]), (p = A[5]);
                                    let zc = A[6];
                                    const Kr = A[7],
                                        Nf = A[8],
                                        Pf = A[9],
                                        kf = A[10];
                                    let Fa = A[11];
                                    const Rv = A[12];
                                    let fn = A[13];
                                    const Bn = A[14],
                                        oi = A[15];
                                    if (!v && A.length >= 20) {
                                        (E = A[19]), (R = A[20]), (N = A[21]), (k = A[22]);
                                        const xn = this.drawLabelWithPointPlacement_(E, R, N, k);
                                        (v = xn.label),
                                            (A[3] = v),
                                            (m = (xn.anchorX - A[23]) * this.pixelRatio),
                                            (A[4] = m),
                                            (p = (xn.anchorY - A[24]) * this.pixelRatio),
                                            (A[5] = p),
                                            (zc = v.height),
                                            (A[6] = zc),
                                            (fn = v.width),
                                            (A[13] = fn);
                                    }
                                    let lr, La, Zo, Zr;
                                    A.length > 25 && (lr = A[25]),
                                        A.length > 17 ? ((La = A[16]), (Zo = A[17]), (Zr = A[18])) : ((La = zo), (Zo = !1), (Zr = !1)),
                                        kf && ue ? (Fa += nt) : !kf && !ue && (Fa -= nt);
                                    let Ba = 0;
                                    for (; h < f; h += 2) {
                                        if (lr && lr[Ba++] < fn / this.pixelRatio) continue;
                                        const xn = this.calculateImageOrLabelDimensions_(
                                                v.width,
                                                v.height,
                                                c[h],
                                                c[h + 1],
                                                fn,
                                                zc,
                                                m,
                                                p,
                                                Nf,
                                                Pf,
                                                Fa,
                                                Rv,
                                                o,
                                                La,
                                                Zo || Zr,
                                                M,
                                            ),
                                            ja = [e, t, v, xn, Kr, Zo ? be : null, Zr ? de : null];
                                        if (l) {
                                            if ('none' === Bn) continue;
                                            if ('obstacle' === Bn) {
                                                l.insert(xn.declutterBox);
                                                continue;
                                            }
                                            {
                                                let jn, cr;
                                                if (oi) {
                                                    const Sn = f - h;
                                                    if (!oi[Sn]) {
                                                        oi[Sn] = ja;
                                                        continue;
                                                    }
                                                    if (((jn = oi[Sn]), delete oi[Sn], (cr = CA(jn)), l.collides(cr))) continue;
                                                }
                                                if (l.collides(xn.declutterBox)) continue;
                                                jn && (l.insert(cr), this.replayImageOrLabel_.apply(this, jn)), l.insert(xn.declutterBox);
                                            }
                                        }
                                        this.replayImageOrLabel_.apply(this, ja);
                                    }
                                    ++u;
                                    break;
                                case ee.DRAW_CHARS:
                                    const Ff = A[1],
                                        Qt = A[2],
                                        Av = A[3],
                                        u9 = A[4];
                                    k = A[5];
                                    const d9 = A[6],
                                        iN = A[7],
                                        rN = A[8];
                                    N = A[9];
                                    const Ov = A[10];
                                    (E = A[11]), (R = A[12]);
                                    const oN = [A[13], A[13]],
                                        Nv = this.textStates[R],
                                        Gc = Nv.font,
                                        Wc = [Nv.scale[0] * iN, Nv.scale[1] * iN];
                                    let $c;
                                    Gc in this.widths_ ? ($c = this.widths_[Gc]) : (($c = {}), (this.widths_[Gc] = $c));
                                    const sN = Ob(c, Ff, Qt, 2),
                                        aN = Math.abs(Wc[0]) * HR(Gc, E, $c);
                                    if (u9 || aN <= sN) {
                                        const jn = uq(
                                            c,
                                            Ff,
                                            Qt,
                                            2,
                                            E,
                                            (sN - aN) * Nb(E, this.textStates[R].textAlign),
                                            d9,
                                            Math.abs(Wc[0]),
                                            HR,
                                            Gc,
                                            $c,
                                            ue ? 0 : this.viewRotation_,
                                        );
                                        e: if (jn) {
                                            const cr = [];
                                            let Sn, Lf, Bf, mn, Vn;
                                            if (N)
                                                for (Sn = 0, Lf = jn.length; Sn < Lf; ++Sn) {
                                                    (Vn = jn[Sn]),
                                                        (Bf = Vn[4]),
                                                        (mn = this.createLabel(Bf, R, '', N)),
                                                        (m = Vn[2] + (Wc[0] < 0 ? -Ov : Ov)),
                                                        (p = Av * mn.height + (2 * (0.5 - Av) * Ov * Wc[1]) / Wc[0] - rN);
                                                    const ur = this.calculateImageOrLabelDimensions_(
                                                        mn.width,
                                                        mn.height,
                                                        Vn[0],
                                                        Vn[1],
                                                        mn.width,
                                                        mn.height,
                                                        m,
                                                        p,
                                                        0,
                                                        0,
                                                        Vn[3],
                                                        oN,
                                                        !1,
                                                        zo,
                                                        !1,
                                                        M,
                                                    );
                                                    if (l && l.collides(ur.declutterBox)) break e;
                                                    cr.push([e, t, mn, ur, 1, null, null]);
                                                }
                                            if (k)
                                                for (Sn = 0, Lf = jn.length; Sn < Lf; ++Sn) {
                                                    (Vn = jn[Sn]),
                                                        (Bf = Vn[4]),
                                                        (mn = this.createLabel(Bf, R, k, '')),
                                                        (m = Vn[2]),
                                                        (p = Av * mn.height - rN);
                                                    const ur = this.calculateImageOrLabelDimensions_(
                                                        mn.width,
                                                        mn.height,
                                                        Vn[0],
                                                        Vn[1],
                                                        mn.width,
                                                        mn.height,
                                                        m,
                                                        p,
                                                        0,
                                                        0,
                                                        Vn[3],
                                                        oN,
                                                        !1,
                                                        zo,
                                                        !1,
                                                        M,
                                                    );
                                                    if (l && l.collides(ur.declutterBox)) break e;
                                                    cr.push([e, t, mn, ur, 1, null, null]);
                                                }
                                            l && l.load(cr.map(CA));
                                            for (let ur = 0, h9 = cr.length; ur < h9; ++ur) this.replayImageOrLabel_.apply(this, cr[ur]);
                                        }
                                    }
                                    ++u;
                                    break;
                                case ee.END_GEOMETRY:
                                    if (void 0 !== s) {
                                        M = A[1];
                                        const xn = s(M, ke);
                                        if (xn) return xn;
                                    }
                                    ++u;
                                    break;
                                case ee.FILL:
                                    x ? U++ : this.fill_(e), ++u;
                                    break;
                                case ee.MOVE_TO_LINE_TO:
                                    for (
                                        h = A[1],
                                            f = A[2],
                                            B = c[h],
                                            ie = c[h + 1],
                                            _ = (B + 0.5) | 0,
                                            b = (ie + 0.5) | 0,
                                            (_ !== g || b !== y) && (e.moveTo(B, ie), (g = _), (y = b)),
                                            h += 2;
                                        h < f;
                                        h += 2
                                    )
                                        (B = c[h]),
                                            (ie = c[h + 1]),
                                            (_ = (B + 0.5) | 0),
                                            (b = (ie + 0.5) | 0),
                                            (h == f - 2 || _ !== g || b !== y) && (e.lineTo(B, ie), (g = _), (y = b));
                                    ++u;
                                    break;
                                case ee.SET_FILL_STYLE:
                                    (be = A),
                                        (this.alignFill_ = A[2]),
                                        U && (this.fill_(e), (U = 0), Y && (e.stroke(), (Y = 0))),
                                        (e.fillStyle = A[1]),
                                        ++u;
                                    break;
                                case ee.SET_STROKE_STYLE:
                                    (de = A), Y && (e.stroke(), (Y = 0)), this.setStrokeStyle_(e, A), ++u;
                                    break;
                                case ee.STROKE:
                                    x ? Y++ : e.stroke(), ++u;
                                    break;
                                default:
                                    ++u;
                            }
                        }
                        U && this.fill_(e), Y && e.stroke();
                    }
                    execute(e, t, i, r, o, s) {
                        (this.viewRotation_ = r), this.execute_(e, t, i, this.instructions, o, void 0, void 0, s);
                    }
                    executeHitDetection(e, t, i, r, o) {
                        return (this.viewRotation_ = i), this.execute_(e, 1, t, this.hitDetectionInstructions, !0, r, o);
                    }
                },
                Pb = ['Polygon', 'Circle', 'LineString', 'Image', 'Text', 'Default'],
                kb = {},
                IA = class mq {
                    constructor(e, t, i, r, o, s) {
                        (this.maxExtent_ = e),
                            (this.overlaps_ = r),
                            (this.pixelRatio_ = i),
                            (this.resolution_ = t),
                            (this.renderBuffer_ = s),
                            (this.executorsByZIndex_ = {}),
                            (this.hitDetectionContext_ = null),
                            (this.hitDetectionTransform_ = [1, 0, 0, 1, 0, 0]),
                            this.createExecutors_(o);
                    }
                    clip(e, t) {
                        const i = this.getClipCoords(t);
                        e.beginPath(), e.moveTo(i[0], i[1]), e.lineTo(i[2], i[3]), e.lineTo(i[4], i[5]), e.lineTo(i[6], i[7]), e.clip();
                    }
                    createExecutors_(e) {
                        for (const t in e) {
                            let i = this.executorsByZIndex_[t];
                            void 0 === i && ((i = {}), (this.executorsByZIndex_[t] = i));
                            const r = e[t];
                            for (const o in r) i[o] = new fq(this.resolution_, this.pixelRatio_, this.overlaps_, r[o]);
                        }
                    }
                    hasExecutors(e) {
                        for (const t in this.executorsByZIndex_) {
                            const i = this.executorsByZIndex_[t];
                            for (let r = 0, o = e.length; r < o; ++r) if (e[r] in i) return !0;
                        }
                        return !1;
                    }
                    forEachFeatureAtCoordinate(e, t, i, r, o, s) {
                        const a = 2 * (r = Math.round(r)) + 1,
                            l = Qi(this.hitDetectionTransform_, r + 0.5, r + 0.5, 1 / t, -1 / t, -i, -e[0], -e[1]),
                            c = !this.hitDetectionContext_;
                        c && (this.hitDetectionContext_ = Zt(a, a, void 0, { willReadFrequently: !0 }));
                        const u = this.hitDetectionContext_;
                        let d;
                        u.canvas.width !== a || u.canvas.height !== a
                            ? ((u.canvas.width = a), (u.canvas.height = a))
                            : c || u.clearRect(0, 0, a, a),
                            void 0 !== this.renderBuffer_ &&
                                ((d = [1 / 0, 1 / 0, -1 / 0, -1 / 0]), ga(d, e), Ty(d, t * (this.renderBuffer_ + r), d));
                        const h = (function pq(n) {
                            if (void 0 !== kb[n]) return kb[n];
                            const e = 2 * n + 1,
                                t = n * n,
                                i = new Array(t + 1);
                            for (let o = 0; o <= n; ++o)
                                for (let s = 0; s <= n; ++s) {
                                    const a = o * o + s * s;
                                    if (a > t) break;
                                    let l = i[a];
                                    l || ((l = []), (i[a] = l)),
                                        l.push(4 * ((n + o) * e + (n + s)) + 3),
                                        o > 0 && l.push(4 * ((n - o) * e + (n + s)) + 3),
                                        s > 0 &&
                                            (l.push(4 * ((n + o) * e + (n - s)) + 3), o > 0 && l.push(4 * ((n - o) * e + (n - s)) + 3));
                                }
                            const r = [];
                            for (let o = 0, s = i.length; o < s; ++o) i[o] && r.push(...i[o]);
                            return (kb[n] = r), r;
                        })(r);
                        let f;
                        function m(E, R) {
                            const N = u.getImageData(0, 0, a, a).data;
                            for (let k = 0, U = h.length; k < U; k++)
                                if (N[h[k]] > 0) {
                                    if (!s || ('Image' !== f && 'Text' !== f) || s.includes(E)) {
                                        const Y = (h[k] - 3) / 4,
                                            be = r - (Y % a),
                                            de = r - ((Y / a) | 0),
                                            le = o(E, R, be * be + de * de);
                                        if (le) return le;
                                    }
                                    u.clearRect(0, 0, a, a);
                                    break;
                                }
                        }
                        const p = Object.keys(this.executorsByZIndex_).map(Number);
                        let g, y, _, b, v;
                        for (p.sort(Mo), g = p.length - 1; g >= 0; --g) {
                            const E = p[g].toString();
                            for (_ = this.executorsByZIndex_[E], y = Pb.length - 1; y >= 0; --y)
                                if (((f = Pb[y]), (b = _[f]), void 0 !== b && ((v = b.executeHitDetection(u, l, i, m, d)), v))) return v;
                        }
                    }
                    getClipCoords(e) {
                        const t = this.maxExtent_;
                        if (!t) return null;
                        const i = t[0],
                            r = t[1],
                            o = t[2],
                            s = t[3],
                            a = [i, r, i, s, o, s, o, r];
                        return Bo(a, 0, 8, 2, e, a), a;
                    }
                    isEmpty() {
                        return ma(this.executorsByZIndex_);
                    }
                    execute(e, t, i, r, o, s, a) {
                        const l = Object.keys(this.executorsByZIndex_).map(Number);
                        let c, u, d, h, f, m;
                        for (
                            l.sort(Mo), this.maxExtent_ && (e.save(), this.clip(e, i)), s = s || Pb, a && l.reverse(), c = 0, u = l.length;
                            c < u;
                            ++c
                        ) {
                            const p = l[c].toString();
                            for (f = this.executorsByZIndex_[p], d = 0, h = s.length; d < h; ++d)
                                (m = f[s[d]]), void 0 !== m && m.execute(e, t, i, r, o, a);
                        }
                        this.maxExtent_ && e.restore();
                    }
                },
                _q = class gq extends vA {
                    constructor(e, t, i, r, o, s, a) {
                        super(),
                            (this.context_ = e),
                            (this.pixelRatio_ = t),
                            (this.extent_ = i),
                            (this.transform_ = r),
                            (this.transformRotation_ = r ? Rh(Math.atan2(r[1], r[0]), 10) : 0),
                            (this.viewRotation_ = o),
                            (this.squaredTolerance_ = s),
                            (this.userTransform_ = a),
                            (this.contextFillState_ = null),
                            (this.contextStrokeState_ = null),
                            (this.contextTextState_ = null),
                            (this.fillState_ = null),
                            (this.strokeState_ = null),
                            (this.image_ = null),
                            (this.imageAnchorX_ = 0),
                            (this.imageAnchorY_ = 0),
                            (this.imageHeight_ = 0),
                            (this.imageOpacity_ = 0),
                            (this.imageOriginX_ = 0),
                            (this.imageOriginY_ = 0),
                            (this.imageRotateWithView_ = !1),
                            (this.imageRotation_ = 0),
                            (this.imageScale_ = [0, 0]),
                            (this.imageWidth_ = 0),
                            (this.text_ = ''),
                            (this.textOffsetX_ = 0),
                            (this.textOffsetY_ = 0),
                            (this.textRotateWithView_ = !1),
                            (this.textRotation_ = 0),
                            (this.textScale_ = [0, 0]),
                            (this.textFillState_ = null),
                            (this.textStrokeState_ = null),
                            (this.textState_ = null),
                            (this.pixelCoordinates_ = []),
                            (this.tmpLocalTransform_ = [1, 0, 0, 1, 0, 0]);
                    }
                    drawImages_(e, t, i, r) {
                        if (!this.image_) return;
                        const o = Bo(e, t, i, r, this.transform_, this.pixelCoordinates_),
                            s = this.context_,
                            a = this.tmpLocalTransform_,
                            l = s.globalAlpha;
                        1 != this.imageOpacity_ && (s.globalAlpha = l * this.imageOpacity_);
                        let c = this.imageRotation_;
                        0 === this.transformRotation_ && (c -= this.viewRotation_), this.imageRotateWithView_ && (c += this.viewRotation_);
                        for (let u = 0, d = o.length; u < d; u += 2) {
                            const h = o[u] - this.imageAnchorX_,
                                f = o[u + 1] - this.imageAnchorY_;
                            if (0 !== c || 1 != this.imageScale_[0] || 1 != this.imageScale_[1]) {
                                const m = h + this.imageAnchorX_,
                                    p = f + this.imageAnchorY_;
                                Qi(a, m, p, 1, 1, c, -m, -p),
                                    s.setTransform.apply(s, a),
                                    s.translate(m, p),
                                    s.scale(this.imageScale_[0], this.imageScale_[1]),
                                    s.drawImage(
                                        this.image_,
                                        this.imageOriginX_,
                                        this.imageOriginY_,
                                        this.imageWidth_,
                                        this.imageHeight_,
                                        -this.imageAnchorX_,
                                        -this.imageAnchorY_,
                                        this.imageWidth_,
                                        this.imageHeight_,
                                    ),
                                    s.setTransform(1, 0, 0, 1, 0, 0);
                            } else
                                s.drawImage(
                                    this.image_,
                                    this.imageOriginX_,
                                    this.imageOriginY_,
                                    this.imageWidth_,
                                    this.imageHeight_,
                                    h,
                                    f,
                                    this.imageWidth_,
                                    this.imageHeight_,
                                );
                        }
                        1 != this.imageOpacity_ && (s.globalAlpha = l);
                    }
                    drawText_(e, t, i, r) {
                        if (!this.textState_ || '' === this.text_) return;
                        this.textFillState_ && this.setContextFillState_(this.textFillState_),
                            this.textStrokeState_ && this.setContextStrokeState_(this.textStrokeState_),
                            this.setContextTextState_(this.textState_);
                        const o = Bo(e, t, i, r, this.transform_, this.pixelCoordinates_),
                            s = this.context_;
                        let a = this.textRotation_;
                        for (
                            0 === this.transformRotation_ && (a -= this.viewRotation_),
                                this.textRotateWithView_ && (a += this.viewRotation_);
                            t < i;
                            t += r
                        ) {
                            const l = o[t] + this.textOffsetX_,
                                c = o[t + 1] + this.textOffsetY_;
                            0 !== a || 1 != this.textScale_[0] || 1 != this.textScale_[1]
                                ? (s.translate(l - this.textOffsetX_, c - this.textOffsetY_),
                                  s.rotate(a),
                                  s.translate(this.textOffsetX_, this.textOffsetY_),
                                  s.scale(this.textScale_[0], this.textScale_[1]),
                                  this.textStrokeState_ && s.strokeText(this.text_, 0, 0),
                                  this.textFillState_ && s.fillText(this.text_, 0, 0),
                                  s.setTransform(1, 0, 0, 1, 0, 0))
                                : (this.textStrokeState_ && s.strokeText(this.text_, l, c),
                                  this.textFillState_ && s.fillText(this.text_, l, c));
                        }
                    }
                    moveToLineTo_(e, t, i, r, o) {
                        const s = this.context_,
                            a = Bo(e, t, i, r, this.transform_, this.pixelCoordinates_);
                        s.moveTo(a[0], a[1]);
                        let l = a.length;
                        o && (l -= 2);
                        for (let c = 2; c < l; c += 2) s.lineTo(a[c], a[c + 1]);
                        return o && s.closePath(), i;
                    }
                    drawRings_(e, t, i, r) {
                        for (let o = 0, s = i.length; o < s; ++o) t = this.moveToLineTo_(e, t, i[o], r, !0);
                        return t;
                    }
                    drawCircle(e) {
                        if (
                            (this.squaredTolerance_ && (e = e.simplifyTransformed(this.squaredTolerance_, this.userTransform_)),
                            dn(this.extent_, e.getExtent()))
                        ) {
                            if (this.fillState_ || this.strokeState_) {
                                this.fillState_ && this.setContextFillState_(this.fillState_),
                                    this.strokeState_ && this.setContextStrokeState_(this.strokeState_);
                                const t = (function j5(n, e, t) {
                                        const i = n.getFlatCoordinates();
                                        if (!i) return null;
                                        const r = n.getStride();
                                        return Bo(i, 0, i.length, r, e, t);
                                    })(e, this.transform_, this.pixelCoordinates_),
                                    i = t[2] - t[0],
                                    r = t[3] - t[1],
                                    o = Math.sqrt(i * i + r * r),
                                    s = this.context_;
                                s.beginPath(),
                                    s.arc(t[0], t[1], o, 0, 2 * Math.PI),
                                    this.fillState_ && s.fill(),
                                    this.strokeState_ && s.stroke();
                            }
                            '' !== this.text_ && this.drawText_(e.getCenter(), 0, 2, 2);
                        }
                    }
                    setStyle(e) {
                        this.setFillStrokeStyle(e.getFill(), e.getStroke()),
                            this.setImageStyle(e.getImage()),
                            this.setTextStyle(e.getText());
                    }
                    setTransform(e) {
                        this.transform_ = e;
                    }
                    drawGeometry(e) {
                        switch (e.getType()) {
                            case 'Point':
                                this.drawPoint(e);
                                break;
                            case 'LineString':
                                this.drawLineString(e);
                                break;
                            case 'Polygon':
                                this.drawPolygon(e);
                                break;
                            case 'MultiPoint':
                                this.drawMultiPoint(e);
                                break;
                            case 'MultiLineString':
                                this.drawMultiLineString(e);
                                break;
                            case 'MultiPolygon':
                                this.drawMultiPolygon(e);
                                break;
                            case 'GeometryCollection':
                                this.drawGeometryCollection(e);
                                break;
                            case 'Circle':
                                this.drawCircle(e);
                        }
                    }
                    drawFeature(e, t) {
                        const i = t.getGeometryFunction()(e);
                        i && (this.setStyle(t), this.drawGeometry(i));
                    }
                    drawGeometryCollection(e) {
                        const t = e.getGeometriesArray();
                        for (let i = 0, r = t.length; i < r; ++i) this.drawGeometry(t[i]);
                    }
                    drawPoint(e) {
                        this.squaredTolerance_ && (e = e.simplifyTransformed(this.squaredTolerance_, this.userTransform_));
                        const t = e.getFlatCoordinates(),
                            i = e.getStride();
                        this.image_ && this.drawImages_(t, 0, t.length, i), '' !== this.text_ && this.drawText_(t, 0, t.length, i);
                    }
                    drawMultiPoint(e) {
                        this.squaredTolerance_ && (e = e.simplifyTransformed(this.squaredTolerance_, this.userTransform_));
                        const t = e.getFlatCoordinates(),
                            i = e.getStride();
                        this.image_ && this.drawImages_(t, 0, t.length, i), '' !== this.text_ && this.drawText_(t, 0, t.length, i);
                    }
                    drawLineString(e) {
                        if (
                            (this.squaredTolerance_ && (e = e.simplifyTransformed(this.squaredTolerance_, this.userTransform_)),
                            dn(this.extent_, e.getExtent()))
                        ) {
                            if (this.strokeState_) {
                                this.setContextStrokeState_(this.strokeState_);
                                const t = this.context_,
                                    i = e.getFlatCoordinates();
                                t.beginPath(), this.moveToLineTo_(i, 0, i.length, e.getStride(), !1), t.stroke();
                            }
                            if ('' !== this.text_) {
                                const t = e.getFlatMidpoint();
                                this.drawText_(t, 0, 2, 2);
                            }
                        }
                    }
                    drawMultiLineString(e) {
                        this.squaredTolerance_ && (e = e.simplifyTransformed(this.squaredTolerance_, this.userTransform_));
                        const t = e.getExtent();
                        if (dn(this.extent_, t)) {
                            if (this.strokeState_) {
                                this.setContextStrokeState_(this.strokeState_);
                                const i = this.context_,
                                    r = e.getFlatCoordinates();
                                let o = 0;
                                const s = e.getEnds(),
                                    a = e.getStride();
                                i.beginPath();
                                for (let l = 0, c = s.length; l < c; ++l) o = this.moveToLineTo_(r, o, s[l], a, !1);
                                i.stroke();
                            }
                            if ('' !== this.text_) {
                                const i = e.getFlatMidpoints();
                                this.drawText_(i, 0, i.length, 2);
                            }
                        }
                    }
                    drawPolygon(e) {
                        if (
                            (this.squaredTolerance_ && (e = e.simplifyTransformed(this.squaredTolerance_, this.userTransform_)),
                            dn(this.extent_, e.getExtent()))
                        ) {
                            if (this.strokeState_ || this.fillState_) {
                                this.fillState_ && this.setContextFillState_(this.fillState_),
                                    this.strokeState_ && this.setContextStrokeState_(this.strokeState_);
                                const t = this.context_;
                                t.beginPath(),
                                    this.drawRings_(e.getOrientedFlatCoordinates(), 0, e.getEnds(), e.getStride()),
                                    this.fillState_ && t.fill(),
                                    this.strokeState_ && t.stroke();
                            }
                            if ('' !== this.text_) {
                                const t = e.getFlatInteriorPoint();
                                this.drawText_(t, 0, 2, 2);
                            }
                        }
                    }
                    drawMultiPolygon(e) {
                        if (
                            (this.squaredTolerance_ && (e = e.simplifyTransformed(this.squaredTolerance_, this.userTransform_)),
                            dn(this.extent_, e.getExtent()))
                        ) {
                            if (this.strokeState_ || this.fillState_) {
                                this.fillState_ && this.setContextFillState_(this.fillState_),
                                    this.strokeState_ && this.setContextStrokeState_(this.strokeState_);
                                const t = this.context_,
                                    i = e.getOrientedFlatCoordinates();
                                let r = 0;
                                const o = e.getEndss(),
                                    s = e.getStride();
                                t.beginPath();
                                for (let a = 0, l = o.length; a < l; ++a) r = this.drawRings_(i, r, o[a], s);
                                this.fillState_ && t.fill(), this.strokeState_ && t.stroke();
                            }
                            if ('' !== this.text_) {
                                const t = e.getFlatInteriorPoints();
                                this.drawText_(t, 0, t.length, 2);
                            }
                        }
                    }
                    setContextFillState_(e) {
                        const t = this.context_,
                            i = this.contextFillState_;
                        i
                            ? i.fillStyle != e.fillStyle && ((i.fillStyle = e.fillStyle), (t.fillStyle = e.fillStyle))
                            : ((t.fillStyle = e.fillStyle), (this.contextFillState_ = { fillStyle: e.fillStyle }));
                    }
                    setContextStrokeState_(e) {
                        const t = this.context_,
                            i = this.contextStrokeState_;
                        i
                            ? (i.lineCap != e.lineCap && ((i.lineCap = e.lineCap), (t.lineCap = e.lineCap)),
                              Pr(i.lineDash, e.lineDash) || t.setLineDash((i.lineDash = e.lineDash)),
                              i.lineDashOffset != e.lineDashOffset &&
                                  ((i.lineDashOffset = e.lineDashOffset), (t.lineDashOffset = e.lineDashOffset)),
                              i.lineJoin != e.lineJoin && ((i.lineJoin = e.lineJoin), (t.lineJoin = e.lineJoin)),
                              i.lineWidth != e.lineWidth && ((i.lineWidth = e.lineWidth), (t.lineWidth = e.lineWidth)),
                              i.miterLimit != e.miterLimit && ((i.miterLimit = e.miterLimit), (t.miterLimit = e.miterLimit)),
                              i.strokeStyle != e.strokeStyle && ((i.strokeStyle = e.strokeStyle), (t.strokeStyle = e.strokeStyle)))
                            : ((t.lineCap = e.lineCap),
                              t.setLineDash(e.lineDash),
                              (t.lineDashOffset = e.lineDashOffset),
                              (t.lineJoin = e.lineJoin),
                              (t.lineWidth = e.lineWidth),
                              (t.miterLimit = e.miterLimit),
                              (t.strokeStyle = e.strokeStyle),
                              (this.contextStrokeState_ = {
                                  lineCap: e.lineCap,
                                  lineDash: e.lineDash,
                                  lineDashOffset: e.lineDashOffset,
                                  lineJoin: e.lineJoin,
                                  lineWidth: e.lineWidth,
                                  miterLimit: e.miterLimit,
                                  strokeStyle: e.strokeStyle,
                              }));
                    }
                    setContextTextState_(e) {
                        const t = this.context_,
                            i = this.contextTextState_,
                            r = e.textAlign ? e.textAlign : xc;
                        i
                            ? (i.font != e.font && ((i.font = e.font), (t.font = e.font)),
                              i.textAlign != r && ((i.textAlign = r), (t.textAlign = r)),
                              i.textBaseline != e.textBaseline && ((i.textBaseline = e.textBaseline), (t.textBaseline = e.textBaseline)))
                            : ((t.font = e.font),
                              (t.textAlign = r),
                              (t.textBaseline = e.textBaseline),
                              (this.contextTextState_ = { font: e.font, textAlign: r, textBaseline: e.textBaseline }));
                    }
                    setFillStrokeStyle(e, t) {
                        if (e) {
                            const i = e.getColor();
                            this.fillState_ = { fillStyle: Ti(i || hn) };
                        } else this.fillState_ = null;
                        if (t) {
                            const i = t.getColor(),
                                r = t.getLineCap(),
                                o = t.getLineDash(),
                                s = t.getLineDashOffset(),
                                a = t.getLineJoin(),
                                l = t.getWidth(),
                                c = t.getMiterLimit(),
                                u = o || tr;
                            this.strokeState_ = {
                                lineCap: void 0 !== r ? r : Jh,
                                lineDash: 1 === this.pixelRatio_ ? u : u.map((d) => d * this.pixelRatio_),
                                lineDashOffset: (s || 0) * this.pixelRatio_,
                                lineJoin: void 0 !== a ? a : Ca,
                                lineWidth: (void 0 !== l ? l : 1) * this.pixelRatio_,
                                miterLimit: void 0 !== c ? c : 10,
                                strokeStyle: Ti(i || Ic),
                            };
                        } else this.strokeState_ = null;
                    }
                    setImageStyle(e) {
                        let t;
                        if (!e || !(t = e.getSize())) return void (this.image_ = null);
                        const i = e.getPixelRatio(this.pixelRatio_),
                            r = e.getAnchor(),
                            o = e.getOrigin();
                        (this.image_ = e.getImage(this.pixelRatio_)),
                            (this.imageAnchorX_ = r[0] * i),
                            (this.imageAnchorY_ = r[1] * i),
                            (this.imageHeight_ = t[1] * i),
                            (this.imageOpacity_ = e.getOpacity()),
                            (this.imageOriginX_ = o[0]),
                            (this.imageOriginY_ = o[1]),
                            (this.imageRotateWithView_ = e.getRotateWithView()),
                            (this.imageRotation_ = e.getRotation());
                        const s = e.getScaleArray();
                        (this.imageScale_ = [(s[0] * this.pixelRatio_) / i, (s[1] * this.pixelRatio_) / i]), (this.imageWidth_ = t[0] * i);
                    }
                    setTextStyle(e) {
                        if (e) {
                            const t = e.getFill();
                            if (t) {
                                const f = t.getColor();
                                this.textFillState_ = { fillStyle: Ti(f || hn) };
                            } else this.textFillState_ = null;
                            const i = e.getStroke();
                            if (i) {
                                const f = i.getColor(),
                                    m = i.getLineCap(),
                                    p = i.getLineDash(),
                                    g = i.getLineDashOffset(),
                                    y = i.getLineJoin(),
                                    _ = i.getWidth(),
                                    b = i.getMiterLimit();
                                this.textStrokeState_ = {
                                    lineCap: void 0 !== m ? m : Jh,
                                    lineDash: p || tr,
                                    lineDashOffset: g || 0,
                                    lineJoin: void 0 !== y ? y : Ca,
                                    lineWidth: void 0 !== _ ? _ : 1,
                                    miterLimit: void 0 !== b ? b : 10,
                                    strokeStyle: Ti(f || Ic),
                                };
                            } else this.textStrokeState_ = null;
                            const r = e.getFont(),
                                o = e.getOffsetX(),
                                s = e.getOffsetY(),
                                a = e.getRotateWithView(),
                                l = e.getRotation(),
                                c = e.getScaleArray(),
                                u = e.getText(),
                                d = e.getTextAlign(),
                                h = e.getTextBaseline();
                            (this.textState_ = {
                                font: void 0 !== r ? r : jR,
                                textAlign: void 0 !== d ? d : xc,
                                textBaseline: void 0 !== h ? h : ef,
                            }),
                                (this.text_ =
                                    void 0 !== u ? (Array.isArray(u) ? u.reduce((f, m, p) => f + (p % 2 ? ' ' : m), '') : u) : ''),
                                (this.textOffsetX_ = void 0 !== o ? this.pixelRatio_ * o : 0),
                                (this.textOffsetY_ = void 0 !== s ? this.pixelRatio_ * s : 0),
                                (this.textRotateWithView_ = void 0 !== a && a),
                                (this.textRotation_ = void 0 !== l ? l : 0),
                                (this.textScale_ = [this.pixelRatio_ * c[0], this.pixelRatio_ * c[1]]);
                        } else this.text_ = '';
                    }
                },
                Mi = 0.5,
                xA = {
                    Point: function Mq(n, e, t, i, r) {
                        const o = t.getImage(),
                            s = t.getText();
                        let a;
                        if (o) {
                            if (2 != o.getImageState()) return;
                            let l = n;
                            if (r) {
                                const u = o.getDeclutterMode();
                                if ('none' !== u)
                                    if (((l = r), 'obstacle' === u)) {
                                        const d = n.getBuilder(t.getZIndex(), 'Image');
                                        d.setImageStyle(o, a), d.drawPoint(e, i);
                                    } else s && s.getText() && (a = {});
                            }
                            const c = l.getBuilder(t.getZIndex(), 'Image');
                            c.setImageStyle(o, a), c.drawPoint(e, i);
                        }
                        if (s && s.getText()) {
                            let l = n;
                            r && (l = r);
                            const c = l.getBuilder(t.getZIndex(), 'Text');
                            c.setTextStyle(s, a), c.drawText(e, i);
                        }
                    },
                    LineString: function xq(n, e, t, i, r) {
                        const o = t.getStroke();
                        if (o) {
                            const a = n.getBuilder(t.getZIndex(), 'LineString');
                            a.setFillStrokeStyle(null, o), a.drawLineString(e, i);
                        }
                        const s = t.getText();
                        if (s && s.getText()) {
                            const a = (r || n).getBuilder(t.getZIndex(), 'Text');
                            a.setTextStyle(s), a.drawText(e, i);
                        }
                    },
                    Polygon: function Aq(n, e, t, i, r) {
                        const o = t.getFill(),
                            s = t.getStroke();
                        if (o || s) {
                            const l = n.getBuilder(t.getZIndex(), 'Polygon');
                            l.setFillStrokeStyle(o, s), l.drawPolygon(e, i);
                        }
                        const a = t.getText();
                        if (a && a.getText()) {
                            const l = (r || n).getBuilder(t.getZIndex(), 'Text');
                            l.setTextStyle(a), l.drawText(e, i);
                        }
                    },
                    MultiPoint: function Rq(n, e, t, i, r) {
                        const o = t.getImage(),
                            s = t.getText();
                        let a;
                        if (o) {
                            if (2 != o.getImageState()) return;
                            let l = n;
                            if (r) {
                                const u = o.getDeclutterMode();
                                if ('none' !== u)
                                    if (((l = r), 'obstacle' === u)) {
                                        const d = n.getBuilder(t.getZIndex(), 'Image');
                                        d.setImageStyle(o, a), d.drawMultiPoint(e, i);
                                    } else s && s.getText() && (a = {});
                            }
                            const c = l.getBuilder(t.getZIndex(), 'Image');
                            c.setImageStyle(o, a), c.drawMultiPoint(e, i);
                        }
                        if (s && s.getText()) {
                            let l = n;
                            r && (l = r);
                            const c = l.getBuilder(t.getZIndex(), 'Text');
                            c.setTextStyle(s, a), c.drawText(e, i);
                        }
                    },
                    MultiLineString: function Sq(n, e, t, i, r) {
                        const o = t.getStroke();
                        if (o) {
                            const a = n.getBuilder(t.getZIndex(), 'LineString');
                            a.setFillStrokeStyle(null, o), a.drawMultiLineString(e, i);
                        }
                        const s = t.getText();
                        if (s && s.getText()) {
                            const a = (r || n).getBuilder(t.getZIndex(), 'Text');
                            a.setTextStyle(s), a.drawText(e, i);
                        }
                    },
                    MultiPolygon: function Tq(n, e, t, i, r) {
                        const o = t.getFill(),
                            s = t.getStroke();
                        if (s || o) {
                            const l = n.getBuilder(t.getZIndex(), 'Polygon');
                            l.setFillStrokeStyle(o, s), l.drawMultiPolygon(e, i);
                        }
                        const a = t.getText();
                        if (a && a.getText()) {
                            const l = (r || n).getBuilder(t.getZIndex(), 'Text');
                            l.setTextStyle(a), l.drawText(e, i);
                        }
                    },
                    GeometryCollection: function Iq(n, e, t, i, r) {
                        const o = e.getGeometriesArray();
                        let s, a;
                        for (s = 0, a = o.length; s < a; ++s) (0, xA[o[s].getType()])(n, o[s], t, i, r);
                    },
                    Circle: function Cq(n, e, t, i, r) {
                        const o = t.getFill(),
                            s = t.getStroke();
                        if (o || s) {
                            const l = n.getBuilder(t.getZIndex(), 'Circle');
                            l.setFillStrokeStyle(o, s), l.drawCircle(e, i);
                        }
                        const a = t.getText();
                        if (a && a.getText()) {
                            const l = (r || n).getBuilder(t.getZIndex(), 'Text');
                            l.setTextStyle(a), l.drawText(e, i);
                        }
                    },
                };
            function Eq(n, e) {
                return parseInt(Se(n), 10) - parseInt(Se(e), 10);
            }
            function Fb(n, e) {
                return (0.5 * n) / e;
            }
            function SA(n, e, t, i, r, o, s) {
                let a = !1;
                const l = t.getImage();
                if (l) {
                    const c = l.getImageState();
                    2 == c || 3 == c ? l.unlistenImageChange(r) : (0 == c && l.load(), l.listenImageChange(r), (a = !0));
                }
                return (
                    (function Dq(n, e, t, i, r, o) {
                        const s = t.getGeometryFunction()(e);
                        if (!s) return;
                        const a = s.simplifyTransformed(i, r);
                        t.getRenderer() ? TA(n, a, t, e) : (0, xA[a.getType()])(n, a, t, e, o);
                    })(n, e, t, i, o, s),
                    a
                );
            }
            function TA(n, e, t, i) {
                if ('GeometryCollection' != e.getType())
                    n.getBuilder(t.getZIndex(), 'Default').drawCustom(e, i, t.getRenderer(), t.getHitDetectionRenderer());
                else {
                    const o = e.getGeometries();
                    for (let s = 0, a = o.length; s < a; ++s) TA(n, o[s], t, i);
                }
            }
            const Nq = class Oq extends tA {
                    constructor(e) {
                        super(e),
                            (this.boundHandleStyleImageChange_ = this.handleStyleImageChange_.bind(this)),
                            (this.hitDetectionImageData_ = null),
                            (this.renderedFeatures_ = null),
                            (this.renderedRevision_ = -1),
                            (this.renderedResolution_ = NaN),
                            (this.renderedExtent_ = [1 / 0, 1 / 0, -1 / 0, -1 / 0]),
                            (this.wrappedRenderedExtent_ = [1 / 0, 1 / 0, -1 / 0, -1 / 0]),
                            (this.renderedCenter_ = null),
                            (this.renderedProjection_ = null),
                            (this.renderedRenderOrder_ = null),
                            (this.replayGroup_ = null),
                            (this.replayGroupChanged = !0),
                            (this.declutterExecutorGroup = null),
                            (this.clipping = !0),
                            (this.compositionContext_ = null),
                            (this.opacity_ = 1);
                    }
                    renderWorlds(e, t, i) {
                        const r = t.extent,
                            o = t.viewState,
                            s = o.center,
                            a = o.resolution,
                            l = o.projection,
                            c = o.rotation,
                            u = l.getExtent(),
                            d = this.getLayer().getSource(),
                            h = t.pixelRatio,
                            f = t.viewHints,
                            m = !(f[0] || f[1]),
                            p = this.compositionContext_,
                            g = Math.round(t.size[0] * h),
                            y = Math.round(t.size[1] * h),
                            _ = d.getWrapX() && l.canWrapX(),
                            b = _ ? qe(u) : null,
                            v = _ ? Math.ceil((r[2] - u[2]) / b) + 1 : 1;
                        let E = _ ? Math.floor((r[0] - u[0]) / b) : 0;
                        do {
                            const R = this.getRenderTransform(s, a, c, h, g, y, E * b);
                            e.execute(p, 1, R, c, m, void 0, i);
                        } while (++E < v);
                    }
                    setupCompositionContext_() {
                        if (1 !== this.opacity_) {
                            const e = Zt(this.context.canvas.width, this.context.canvas.height, eA);
                            this.compositionContext_ = e;
                        } else this.compositionContext_ = this.context;
                    }
                    releaseCompositionContext_() {
                        if (1 !== this.opacity_) {
                            const e = this.context.globalAlpha;
                            (this.context.globalAlpha = this.opacity_),
                                this.context.drawImage(this.compositionContext_.canvas, 0, 0),
                                (this.context.globalAlpha = e),
                                Zh(this.compositionContext_),
                                eA.push(this.compositionContext_.canvas),
                                (this.compositionContext_ = null);
                        }
                    }
                    renderDeclutter(e) {
                        this.declutterExecutorGroup &&
                            (this.setupCompositionContext_(),
                            this.renderWorlds(this.declutterExecutorGroup, e, e.declutterTree),
                            this.releaseCompositionContext_());
                    }
                    renderFrame(e, t) {
                        const i = e.pixelRatio,
                            r = e.layerStatesArray[e.layerIndex];
                        (function L8(n, e, t) {
                            (function mc(n, e, t, i, r, o, s) {
                                return (n[0] = e), (n[1] = t), (n[2] = i), (n[3] = r), (n[4] = o), (n[5] = s), n;
                            })(n, e, 0, 0, t, 0, 0);
                        })(this.pixelTransform, 1 / i, 1 / i),
                            Ch(this.inversePixelTransform, this.pixelTransform);
                        const o = Sy(this.pixelTransform);
                        this.useContainer(t, o, this.getBackground(e));
                        const s = this.context,
                            a = s.canvas,
                            l = this.replayGroup_,
                            c = this.declutterExecutorGroup;
                        let u = (l && !l.isEmpty()) || (c && !c.isEmpty());
                        if (!u && !this.getLayer().hasListener('prerender') && !this.getLayer().hasListener('postrender')) return null;
                        const d = Math.round(e.size[0] * i),
                            h = Math.round(e.size[1] * i);
                        a.width != d || a.height != h
                            ? ((a.width = d), (a.height = h), a.style.transform !== o && (a.style.transform = o))
                            : this.containerReused || s.clearRect(0, 0, d, h),
                            this.preRender(s, e);
                        const f = e.viewState;
                        (this.opacity_ = r.opacity), this.setupCompositionContext_();
                        let p = !1;
                        if (u && r.extent && this.clipping) {
                            const g = Lo(r.extent);
                            (u = dn(g, e.extent)), (p = u && !pa(g, e.extent)), p && this.clipUnrotated(this.compositionContext_, e, g);
                        }
                        return (
                            u && this.renderWorlds(l, e),
                            p && this.compositionContext_.restore(),
                            this.releaseCompositionContext_(),
                            this.postRender(s, e),
                            this.renderedRotation_ !== f.rotation &&
                                ((this.renderedRotation_ = f.rotation), (this.hitDetectionImageData_ = null)),
                            this.container
                        );
                    }
                    getFeatures(e) {
                        return new Promise((t) => {
                            if (!this.hitDetectionImageData_ && !this.animatingOrInteracting_) {
                                const i = [this.context.canvas.width, this.context.canvas.height];
                                Ct(this.pixelTransform, i);
                                const r = this.renderedCenter_,
                                    o = this.renderedResolution_,
                                    s = this.renderedRotation_,
                                    a = this.renderedProjection_,
                                    l = this.wrappedRenderedExtent_,
                                    c = this.getLayer(),
                                    u = [],
                                    d = i[0] * Mi,
                                    h = i[1] * Mi;
                                u.push(this.getRenderTransform(r, o, s, Mi, d, h, 0).slice());
                                const f = c.getSource(),
                                    m = a.getExtent();
                                if (f.getWrapX() && a.canWrapX() && !pa(m, l)) {
                                    let p = l[0];
                                    const g = qe(m);
                                    let _,
                                        y = 0;
                                    for (; p < m[0]; )
                                        --y, (_ = g * y), u.push(this.getRenderTransform(r, o, s, Mi, d, h, _).slice()), (p += g);
                                    for (y = 0, p = l[2]; p > m[2]; )
                                        ++y, (_ = g * y), u.push(this.getRenderTransform(r, o, s, Mi, d, h, _).slice()), (p -= g);
                                }
                                this.hitDetectionImageData_ = (function yq(n, e, t, i, r, o, s) {
                                    const c = Zt(n[0] * Mi, n[1] * Mi);
                                    c.imageSmoothingEnabled = !1;
                                    const u = c.canvas,
                                        d = new _q(c, Mi, r, null, s),
                                        h = t.length,
                                        f = Math.floor(16777215 / h),
                                        m = {};
                                    for (let g = 1; g <= h; ++g) {
                                        const y = t[g - 1],
                                            _ = y.getStyleFunction() || i;
                                        if (!_) continue;
                                        let b = _(y, o);
                                        if (!b) continue;
                                        Array.isArray(b) || (b = [b]);
                                        const E = (g * f).toString(16).padStart(7, '#00000');
                                        for (let R = 0, N = b.length; R < N; ++R) {
                                            const k = b[R],
                                                U = k.getGeometryFunction()(y);
                                            if (!U || !dn(r, U.getExtent())) continue;
                                            const Y = k.clone(),
                                                be = Y.getFill();
                                            be && be.setColor(E);
                                            const de = Y.getStroke();
                                            de && (de.setColor(E), de.setLineDash(null)), Y.setText(void 0);
                                            const le = k.getImage();
                                            if (le) {
                                                const x = le.getImageSize();
                                                if (!x) continue;
                                                const M = Zt(x[0], x[1], void 0, { alpha: !1 }),
                                                    B = M.canvas;
                                                (M.fillStyle = E),
                                                    M.fillRect(0, 0, B.width, B.height),
                                                    Y.setImage(
                                                        new gA({
                                                            img: B,
                                                            imgSize: x,
                                                            anchor: le.getAnchor(),
                                                            anchorXUnits: 'pixels',
                                                            anchorYUnits: 'pixels',
                                                            offset: le.getOrigin(),
                                                            opacity: 1,
                                                            size: le.getSize(),
                                                            scale: le.getScale(),
                                                            rotation: le.getRotation(),
                                                            rotateWithView: le.getRotateWithView(),
                                                        }),
                                                    );
                                            }
                                            const nt = Y.getZIndex() || 0;
                                            let ue = m[nt];
                                            ue ||
                                                ((ue = {}),
                                                (m[nt] = ue),
                                                (ue.Polygon = []),
                                                (ue.Circle = []),
                                                (ue.LineString = []),
                                                (ue.Point = []));
                                            const I = U.getType();
                                            if ('GeometryCollection' === I) {
                                                const x = U.getGeometriesArrayRecursive();
                                                for (let M = 0, B = x.length; M < B; ++M) {
                                                    const ie = x[M];
                                                    ue[ie.getType().replace('Multi', '')].push(ie, Y);
                                                }
                                            } else ue[I.replace('Multi', '')].push(U, Y);
                                        }
                                    }
                                    const p = Object.keys(m).map(Number).sort(Mo);
                                    for (let g = 0, y = p.length; g < y; ++g) {
                                        const _ = m[p[g]];
                                        for (const b in _) {
                                            const v = _[b];
                                            for (let E = 0, R = v.length; E < R; E += 2) {
                                                d.setStyle(v[E + 1]);
                                                for (let N = 0, k = e.length; N < k; ++N) d.setTransform(e[N]), d.drawGeometry(v[E]);
                                            }
                                        }
                                    }
                                    return c.getImageData(0, 0, u.width, u.height);
                                })(i, u, this.renderedFeatures_, c.getStyleFunction(), l, o, s);
                            }
                            t(
                                (function bq(n, e, t) {
                                    const i = [];
                                    if (t) {
                                        const r = Math.floor(Math.round(n[0]) * Mi),
                                            o = Math.floor(Math.round(n[1]) * Mi),
                                            s = 4 * (gt(r, 0, t.width - 1) + gt(o, 0, t.height - 1) * t.width),
                                            u = t.data[s + 2] + 256 * (t.data[s + 1] + 256 * t.data[s]),
                                            d = Math.floor(16777215 / e.length);
                                        u && u % d == 0 && i.push(e[u / d - 1]);
                                    }
                                    return i;
                                })(e, this.renderedFeatures_, this.hitDetectionImageData_),
                            );
                        });
                    }
                    forEachFeatureAtCoordinate(e, t, i, r, o) {
                        if (!this.replayGroup_) return;
                        const s = t.viewState.resolution,
                            a = t.viewState.rotation,
                            l = this.getLayer(),
                            c = {},
                            u = function (f, m, p) {
                                const g = Se(f),
                                    y = c[g];
                                if (y) {
                                    if (!0 !== y && p < y.distanceSq) {
                                        if (0 === p) return (c[g] = !0), o.splice(o.lastIndexOf(y), 1), r(f, l, m);
                                        (y.geometry = m), (y.distanceSq = p);
                                    }
                                } else {
                                    if (0 === p) return (c[g] = !0), r(f, l, m);
                                    o.push((c[g] = { feature: f, layer: l, geometry: m, distanceSq: p, callback: r }));
                                }
                            };
                        let d;
                        const h = [this.replayGroup_];
                        return (
                            this.declutterExecutorGroup && h.push(this.declutterExecutorGroup),
                            h.some(
                                (f) =>
                                    (d = f.forEachFeatureAtCoordinate(
                                        e,
                                        s,
                                        a,
                                        i,
                                        u,
                                        f === this.declutterExecutorGroup && t.declutterTree
                                            ? t.declutterTree.all().map((m) => m.value)
                                            : null,
                                    )),
                            ),
                            d
                        );
                    }
                    handleFontsChanged() {
                        const e = this.getLayer();
                        e.getVisible() && this.replayGroup_ && e.changed();
                    }
                    handleStyleImageChange_(e) {
                        this.renderIfReadyAndVisible();
                    }
                    prepareFrame(e) {
                        const t = this.getLayer(),
                            i = t.getSource();
                        if (!i) return !1;
                        const r = e.viewHints[0],
                            o = e.viewHints[1],
                            s = t.getUpdateWhileAnimating(),
                            a = t.getUpdateWhileInteracting();
                        if ((this.ready && !s && r) || (!a && o)) return (this.animatingOrInteracting_ = !0), !0;
                        this.animatingOrInteracting_ = !1;
                        const l = e.extent,
                            c = e.viewState,
                            u = c.projection,
                            d = c.resolution,
                            h = e.pixelRatio,
                            f = t.getRevision(),
                            m = t.getRenderBuffer();
                        let p = t.getRenderOrder();
                        void 0 === p && (p = Eq);
                        const g = c.center.slice(),
                            y = Ty(l, m * d),
                            _ = y.slice(),
                            b = [y.slice()],
                            v = u.getExtent();
                        if (i.getWrapX() && u.canWrapX() && !pa(v, e.extent)) {
                            const I = qe(v),
                                x = Math.max(qe(y) / 2, I);
                            (y[0] = v[0] - x), (y[2] = v[2] + x), sR(g, u);
                            const M = WM(b[0], u);
                            M[0] < v[0] && M[2] < v[2]
                                ? b.push([M[0] + I, M[1], M[2] + I, M[3]])
                                : M[0] > v[0] && M[2] > v[2] && b.push([M[0] - I, M[1], M[2] - I, M[3]]);
                        }
                        if (
                            this.ready &&
                            this.renderedResolution_ == d &&
                            this.renderedRevision_ == f &&
                            this.renderedRenderOrder_ == p &&
                            pa(this.wrappedRenderedExtent_, y)
                        )
                            return (
                                Pr(this.renderedExtent_, _) || ((this.hitDetectionImageData_ = null), (this.renderedExtent_ = _)),
                                (this.renderedCenter_ = g),
                                (this.replayGroupChanged = !1),
                                !0
                            );
                        this.replayGroup_ = null;
                        const E = new wA(Fb(d, h), y, d, h);
                        let R;
                        this.getLayer().getDeclutter() && (R = new wA(Fb(d, h), y, d, h));
                        const N = Vy();
                        let k;
                        if (N) {
                            for (let I = 0, x = b.length; I < x; ++I) {
                                const B = Uy(b[I]);
                                i.loadFeatures(B, d, N);
                            }
                            k = bc(N, u);
                        } else for (let I = 0, x = b.length; I < x; ++I) i.loadFeatures(b[I], d, u);
                        const U = (function wq(n, e) {
                            const t = Fb(n, e);
                            return t * t;
                        })(d, h);
                        let Y = !0;
                        const be = (I) => {
                                let x;
                                const M = I.getStyleFunction() || t.getStyleFunction();
                                if ((M && (x = M(I, d)), x)) {
                                    const B = this.renderFeature(I, U, x, E, k, R);
                                    Y = Y && !B;
                                }
                            },
                            de = Uy(y),
                            le = i.getFeaturesInExtent(de);
                        p && le.sort(p);
                        for (let I = 0, x = le.length; I < x; ++I) be(le[I]);
                        (this.renderedFeatures_ = le), (this.ready = Y);
                        const nt = E.finish(),
                            ue = new IA(y, d, h, i.getOverlaps(), nt, t.getRenderBuffer());
                        return (
                            R && (this.declutterExecutorGroup = new IA(y, d, h, i.getOverlaps(), R.finish(), t.getRenderBuffer())),
                            (this.renderedResolution_ = d),
                            (this.renderedRevision_ = f),
                            (this.renderedRenderOrder_ = p),
                            (this.renderedExtent_ = _),
                            (this.wrappedRenderedExtent_ = y),
                            (this.renderedCenter_ = g),
                            (this.renderedProjection_ = u),
                            (this.replayGroup_ = ue),
                            (this.hitDetectionImageData_ = null),
                            (this.replayGroupChanged = !0),
                            !0
                        );
                    }
                    renderFeature(e, t, i, r, o, s) {
                        if (!i) return !1;
                        let a = !1;
                        if (Array.isArray(i))
                            for (let l = 0, c = i.length; l < c; ++l) a = SA(r, e, i[l], t, this.boundHandleStyleImageChange_, o, s) || a;
                        else a = SA(r, e, i, t, this.boundHandleStyleImageChange_, o, s);
                        return a;
                    }
                },
                kq = class Pq extends ZY {
                    constructor(e) {
                        super(e);
                    }
                    createRenderer() {
                        return new Nq(this);
                    }
                },
                Lq = class Fq extends Tc {
                    constructor(e) {
                        (e = e || {}),
                            super({ element: document.createElement('div'), target: e.target }),
                            (this.extent = e.extent ? e.extent : null);
                        const t = void 0 !== e.className ? e.className : 'ol-zoom-extent',
                            i = void 0 !== e.label ? e.label : 'E',
                            r = void 0 !== e.tipLabel ? e.tipLabel : 'Fit to extent',
                            o = document.createElement('button');
                        o.setAttribute('type', 'button'),
                            (o.title = r),
                            o.appendChild('string' == typeof i ? document.createTextNode(i) : i),
                            o.addEventListener('click', this.handleClick_.bind(this), !1);
                        const a = this.element;
                        (a.className = t + ' ' + wa + ' ' + Cc), a.appendChild(o);
                    }
                    handleClick_(e) {
                        e.preventDefault(), this.handleZoomToExtent();
                    }
                    handleZoomToExtent() {
                        const t = this.getMap().getView(),
                            i = this.extent ? this.extent : t.getProjection().getExtent();
                        t.fitInternal(ib(i));
                    }
                },
                MA = ['fullscreenchange', 'webkitfullscreenchange', 'MSFullscreenChange'];
            function AA(n) {
                const e = n.body;
                return !!(e.webkitRequestFullscreen || (e.requestFullscreen && n.fullscreenEnabled));
            }
            function OA(n) {
                return !(!n.webkitIsFullScreen && !n.fullscreenElement);
            }
            function NA(n) {
                n.requestFullscreen ? n.requestFullscreen() : n.webkitRequestFullscreen && n.webkitRequestFullscreen();
            }
            const Hq = class Bq extends Tc {
                    constructor(e) {
                        (e = e || {}),
                            super({ element: document.createElement('div'), target: e.target }),
                            (this.keys_ = void 0 !== e.keys && e.keys),
                            (this.source_ = e.source),
                            (this.isInFullscreen_ = !1),
                            (this.boundHandleMapTargetChange_ = this.handleMapTargetChange_.bind(this)),
                            (this.cssClassName_ = void 0 !== e.className ? e.className : 'ol-full-screen'),
                            (this.documentListeners_ = []),
                            (this.activeClassName_ =
                                void 0 !== e.activeClassName ? e.activeClassName.split(' ') : [this.cssClassName_ + '-true']),
                            (this.inactiveClassName_ =
                                void 0 !== e.inactiveClassName ? e.inactiveClassName.split(' ') : [this.cssClassName_ + '-false']);
                        const t = void 0 !== e.label ? e.label : '\u2922';
                        this.labelNode_ = 'string' == typeof t ? document.createTextNode(t) : t;
                        const i = void 0 !== e.labelActive ? e.labelActive : '\xd7';
                        this.labelActiveNode_ = 'string' == typeof i ? document.createTextNode(i) : i;
                        const r = e.tipLabel ? e.tipLabel : 'Toggle full-screen';
                        (this.button_ = document.createElement('button')),
                            (this.button_.title = r),
                            this.button_.setAttribute('type', 'button'),
                            this.button_.appendChild(this.labelNode_),
                            this.button_.addEventListener('click', this.handleClick_.bind(this), !1),
                            this.setClassName_(this.button_, this.isInFullscreen_),
                            (this.element.className = `${this.cssClassName_} ${wa} ${Cc}`),
                            this.element.appendChild(this.button_);
                    }
                    handleClick_(e) {
                        e.preventDefault(), this.handleFullScreen_();
                    }
                    handleFullScreen_() {
                        const e = this.getMap();
                        if (!e) return;
                        const t = e.getOwnerDocument();
                        if (AA(t))
                            if (OA(t))
                                !(function Vq(n) {
                                    n.exitFullscreen ? n.exitFullscreen() : n.webkitExitFullscreen && n.webkitExitFullscreen();
                                })(t);
                            else {
                                let i;
                                (i = this.source_
                                    ? 'string' == typeof this.source_
                                        ? t.getElementById(this.source_)
                                        : this.source_
                                    : e.getTargetElement()),
                                    this.keys_
                                        ? (function jq(n) {
                                              n.webkitRequestFullscreen ? n.webkitRequestFullscreen() : NA(n);
                                          })(i)
                                        : NA(i);
                            }
                    }
                    handleFullScreenChange_() {
                        const e = this.getMap();
                        if (!e) return;
                        const t = this.isInFullscreen_;
                        (this.isInFullscreen_ = OA(e.getOwnerDocument())),
                            t !== this.isInFullscreen_ &&
                                (this.setClassName_(this.button_, this.isInFullscreen_),
                                this.isInFullscreen_
                                    ? (Qh(this.labelActiveNode_, this.labelNode_), this.dispatchEvent('enterfullscreen'))
                                    : (Qh(this.labelNode_, this.labelActiveNode_), this.dispatchEvent('leavefullscreen')),
                                e.updateSize());
                    }
                    setClassName_(e, t) {
                        t
                            ? (e.classList.remove(...this.inactiveClassName_), e.classList.add(...this.activeClassName_))
                            : (e.classList.remove(...this.activeClassName_), e.classList.add(...this.inactiveClassName_));
                    }
                    setMap(e) {
                        const t = this.getMap();
                        t && t.removeChangeListener('target', this.boundHandleMapTargetChange_),
                            super.setMap(e),
                            this.handleMapTargetChange_(),
                            e && e.addChangeListener('target', this.boundHandleMapTargetChange_);
                    }
                    handleMapTargetChange_() {
                        const e = this.documentListeners_;
                        for (let i = 0, r = e.length; i < r; ++i) je(e[i]);
                        e.length = 0;
                        const t = this.getMap();
                        if (t) {
                            const i = t.getOwnerDocument();
                            AA(i) ? this.element.classList.remove(kR) : this.element.classList.add(kR);
                            for (let r = 0, o = MA.length; r < o; ++r) e.push(me(i, MA[r], this.handleFullScreenChange_, this));
                            this.handleFullScreenChange_();
                        }
                    }
                },
                zq = class Uq {
                    constructor(e) {
                        (this.highWaterMark = void 0 !== e ? e : 2048),
                            (this.count_ = 0),
                            (this.entries_ = {}),
                            (this.oldest_ = null),
                            (this.newest_ = null);
                    }
                    canExpireCache() {
                        return this.highWaterMark > 0 && this.getCount() > this.highWaterMark;
                    }
                    expireCache(e) {
                        for (; this.canExpireCache(); ) this.pop();
                    }
                    clear() {
                        (this.count_ = 0), (this.entries_ = {}), (this.oldest_ = null), (this.newest_ = null);
                    }
                    containsKey(e) {
                        return this.entries_.hasOwnProperty(e);
                    }
                    forEach(e) {
                        let t = this.oldest_;
                        for (; t; ) e(t.value_, t.key_, this), (t = t.newer);
                    }
                    get(e, t) {
                        const i = this.entries_[e];
                        return (
                            pe(void 0 !== i, 15),
                            i === this.newest_ ||
                                (i === this.oldest_
                                    ? ((this.oldest_ = this.oldest_.newer), (this.oldest_.older = null))
                                    : ((i.newer.older = i.older), (i.older.newer = i.newer)),
                                (i.newer = null),
                                (i.older = this.newest_),
                                (this.newest_.newer = i),
                                (this.newest_ = i)),
                            i.value_
                        );
                    }
                    remove(e) {
                        const t = this.entries_[e];
                        return (
                            pe(void 0 !== t, 15),
                            t === this.newest_
                                ? ((this.newest_ = t.older), this.newest_ && (this.newest_.newer = null))
                                : t === this.oldest_
                                  ? ((this.oldest_ = t.newer), this.oldest_ && (this.oldest_.older = null))
                                  : ((t.newer.older = t.older), (t.older.newer = t.newer)),
                            delete this.entries_[e],
                            --this.count_,
                            t.value_
                        );
                    }
                    getCount() {
                        return this.count_;
                    }
                    getKeys() {
                        const e = new Array(this.count_);
                        let i,
                            t = 0;
                        for (i = this.newest_; i; i = i.older) e[t++] = i.key_;
                        return e;
                    }
                    getValues() {
                        const e = new Array(this.count_);
                        let i,
                            t = 0;
                        for (i = this.newest_; i; i = i.older) e[t++] = i.value_;
                        return e;
                    }
                    peekLast() {
                        return this.oldest_.value_;
                    }
                    peekLastKey() {
                        return this.oldest_.key_;
                    }
                    peekFirstKey() {
                        return this.newest_.key_;
                    }
                    peek(e) {
                        if (this.containsKey(e)) return this.entries_[e].value_;
                    }
                    pop() {
                        const e = this.oldest_;
                        return (
                            delete this.entries_[e.key_],
                            e.newer && (e.newer.older = null),
                            (this.oldest_ = e.newer),
                            this.oldest_ || (this.newest_ = null),
                            --this.count_,
                            e.value_
                        );
                    }
                    replace(e, t) {
                        this.get(e), (this.entries_[e].value_ = t);
                    }
                    set(e, t) {
                        pe(!(e in this.entries_), 16);
                        const i = { key_: e, newer: null, older: this.newest_, value_: t };
                        this.newest_ ? (this.newest_.newer = i) : (this.oldest_ = i),
                            (this.newest_ = i),
                            (this.entries_[e] = i),
                            ++this.count_;
                    }
                    setSize(e) {
                        this.highWaterMark = e;
                    }
                };
            function PA(n, e, t, i) {
                return void 0 !== i ? ((i[0] = n), (i[1] = e), (i[2] = t), i) : [n, e, t];
            }
            function kc(n, e, t) {
                return n + '/' + e + '/' + t;
            }
            function kA(n) {
                return kc(n[0], n[1], n[2]);
            }
            const FA = class Yq extends zq {
                clear() {
                    for (; this.getCount() > 0; ) this.pop().release();
                    super.clear();
                }
                expireCache(e) {
                    for (; this.canExpireCache() && !(this.peekLast().getKey() in e); ) this.pop().release();
                }
                pruneExceptNewestZ() {
                    if (0 === this.getCount()) return;
                    const i = (function Gq(n) {
                        return n.split('/').map(Number);
                    })(this.peekFirstKey())[0];
                    this.forEach((r) => {
                        r.tileCoord[0] !== i && (this.remove(kA(r.tileCoord)), r.release());
                    });
                }
            };
            function LA(n) {
                return n
                    ? Array.isArray(n)
                        ? function (e) {
                              return n;
                          }
                        : 'function' == typeof n
                          ? n
                          : function (e) {
                                return [n];
                            }
                    : null;
            }
            const BA = class qq extends Di {
                    constructor(e) {
                        super(),
                            (this.projection = Xe(e.projection)),
                            (this.attributions_ = LA(e.attributions)),
                            (this.attributionsCollapsible_ = void 0 === e.attributionsCollapsible || e.attributionsCollapsible),
                            (this.loading = !1),
                            (this.state_ = void 0 !== e.state ? e.state : 'ready'),
                            (this.wrapX_ = void 0 !== e.wrapX && e.wrapX),
                            (this.interpolate_ = !!e.interpolate),
                            (this.viewResolver = null),
                            (this.viewRejector = null);
                        const t = this;
                        this.viewPromise_ = new Promise(function (i, r) {
                            (t.viewResolver = i), (t.viewRejector = r);
                        });
                    }
                    getAttributions() {
                        return this.attributions_;
                    }
                    getAttributionsCollapsible() {
                        return this.attributionsCollapsible_;
                    }
                    getProjection() {
                        return this.projection;
                    }
                    getResolutions(e) {
                        return null;
                    }
                    getView() {
                        return this.viewPromise_;
                    }
                    getState() {
                        return this.state_;
                    }
                    getWrapX() {
                        return this.wrapX_;
                    }
                    getInterpolate() {
                        return this.interpolate_;
                    }
                    refresh() {
                        this.changed();
                    }
                    setAttributions(e) {
                        (this.attributions_ = LA(e)), this.changed();
                    }
                    setState(e) {
                        (this.state_ = e), this.changed();
                    }
                },
                Aa = [0, 0, 0],
                jA = class Xq {
                    constructor(e) {
                        let t;
                        if (
                            ((this.minZoom = void 0 !== e.minZoom ? e.minZoom : 0),
                            (this.resolutions_ = e.resolutions),
                            pe(
                                (function D8(n, e, t) {
                                    const i = e || Mo;
                                    return n.every(function (r, o) {
                                        if (0 === o) return !0;
                                        const s = i(n[o - 1], r);
                                        return !(s > 0 || (t && 0 === s));
                                    });
                                })(
                                    this.resolutions_,
                                    function (r, o) {
                                        return o - r;
                                    },
                                    !0,
                                ),
                                17,
                            ),
                            !e.origins)
                        )
                            for (let r = 0, o = this.resolutions_.length - 1; r < o; ++r)
                                if (t) {
                                    if (this.resolutions_[r] / this.resolutions_[r + 1] !== t) {
                                        t = void 0;
                                        break;
                                    }
                                } else t = this.resolutions_[r] / this.resolutions_[r + 1];
                        (this.zoomFactor_ = t),
                            (this.maxZoom = this.resolutions_.length - 1),
                            (this.origin_ = void 0 !== e.origin ? e.origin : null),
                            (this.origins_ = null),
                            void 0 !== e.origins && ((this.origins_ = e.origins), pe(this.origins_.length == this.resolutions_.length, 20));
                        const i = e.extent;
                        void 0 !== i && !this.origin_ && !this.origins_ && (this.origin_ = Oo(i)),
                            pe((!this.origin_ && this.origins_) || (this.origin_ && !this.origins_), 18),
                            (this.tileSizes_ = null),
                            void 0 !== e.tileSizes &&
                                ((this.tileSizes_ = e.tileSizes), pe(this.tileSizes_.length == this.resolutions_.length, 19)),
                            (this.tileSize_ = void 0 !== e.tileSize ? e.tileSize : this.tileSizes_ ? null : Ny),
                            pe((!this.tileSize_ && this.tileSizes_) || (this.tileSize_ && !this.tileSizes_), 22),
                            (this.extent_ = void 0 !== i ? i : null),
                            (this.fullTileRanges_ = null),
                            (this.tmpSize_ = [0, 0]),
                            (this.tmpExtent_ = [0, 0, 0, 0]),
                            void 0 !== e.sizes
                                ? (this.fullTileRanges_ = e.sizes.map(function (r, o) {
                                      const s = new lA(
                                          Math.min(0, r[0]),
                                          Math.max(r[0] - 1, -1),
                                          Math.min(0, r[1]),
                                          Math.max(r[1] - 1, -1),
                                      );
                                      if (i) {
                                          const a = this.getTileRangeForExtentAndZ(i, o);
                                          (s.minX = Math.max(a.minX, s.minX)),
                                              (s.maxX = Math.min(a.maxX, s.maxX)),
                                              (s.minY = Math.max(a.minY, s.minY)),
                                              (s.maxY = Math.min(a.maxY, s.maxY));
                                      }
                                      return s;
                                  }, this))
                                : i && this.calculateTileRanges_(i);
                    }
                    forEachTileCoord(e, t, i) {
                        const r = this.getTileRangeForExtentAndZ(e, t);
                        for (let o = r.minX, s = r.maxX; o <= s; ++o) for (let a = r.minY, l = r.maxY; a <= l; ++a) i([t, o, a]);
                    }
                    forEachTileCoordParentTileRange(e, t, i, r) {
                        let o,
                            s,
                            a,
                            l = null,
                            c = e[0] - 1;
                        for (2 === this.zoomFactor_ ? ((s = e[1]), (a = e[2])) : (l = this.getTileCoordExtent(e, r)); c >= this.minZoom; ) {
                            if (
                                (2 === this.zoomFactor_
                                    ? ((s = Math.floor(s / 2)), (a = Math.floor(a / 2)), (o = Ma(s, s, a, a, i)))
                                    : (o = this.getTileRangeForExtentAndZ(l, c, i)),
                                t(c, o))
                            )
                                return !0;
                            --c;
                        }
                        return !1;
                    }
                    getExtent() {
                        return this.extent_;
                    }
                    getMaxZoom() {
                        return this.maxZoom;
                    }
                    getMinZoom() {
                        return this.minZoom;
                    }
                    getOrigin(e) {
                        return this.origin_ ? this.origin_ : this.origins_[e];
                    }
                    getResolution(e) {
                        return this.resolutions_[e];
                    }
                    getResolutions() {
                        return this.resolutions_;
                    }
                    getTileCoordChildTileRange(e, t, i) {
                        if (e[0] < this.maxZoom) {
                            if (2 === this.zoomFactor_) {
                                const o = 2 * e[1],
                                    s = 2 * e[2];
                                return Ma(o, o + 1, s, s + 1, t);
                            }
                            const r = this.getTileCoordExtent(e, i || this.tmpExtent_);
                            return this.getTileRangeForExtentAndZ(r, e[0] + 1, t);
                        }
                        return null;
                    }
                    getTileRangeForTileCoordAndZ(e, t, i) {
                        if (t > this.maxZoom || t < this.minZoom) return null;
                        const r = e[0],
                            o = e[1],
                            s = e[2];
                        if (t === r) return Ma(o, s, o, s, i);
                        if (this.zoomFactor_) {
                            const l = Math.pow(this.zoomFactor_, t - r),
                                c = Math.floor(o * l),
                                u = Math.floor(s * l);
                            return t < r ? Ma(c, c, u, u, i) : Ma(c, Math.floor(l * (o + 1)) - 1, u, Math.floor(l * (s + 1)) - 1, i);
                        }
                        const a = this.getTileCoordExtent(e, this.tmpExtent_);
                        return this.getTileRangeForExtentAndZ(a, t, i);
                    }
                    getTileRangeForExtentAndZ(e, t, i) {
                        this.getTileCoordForXYAndZ_(e[0], e[3], t, !1, Aa);
                        const r = Aa[1],
                            o = Aa[2];
                        return this.getTileCoordForXYAndZ_(e[2], e[1], t, !0, Aa), Ma(r, Aa[1], o, Aa[2], i);
                    }
                    getTileCoordCenter(e) {
                        const t = this.getOrigin(e[0]),
                            i = this.getResolution(e[0]),
                            r = Fn(this.getTileSize(e[0]), this.tmpSize_);
                        return [t[0] + (e[1] + 0.5) * r[0] * i, t[1] - (e[2] + 0.5) * r[1] * i];
                    }
                    getTileCoordExtent(e, t) {
                        const i = this.getOrigin(e[0]),
                            r = this.getResolution(e[0]),
                            o = Fn(this.getTileSize(e[0]), this.tmpSize_),
                            s = i[0] + e[1] * o[0] * r,
                            a = i[1] - (e[2] + 1) * o[1] * r;
                        return Ji(s, a, s + o[0] * r, a + o[1] * r, t);
                    }
                    getTileCoordForCoordAndResolution(e, t, i) {
                        return this.getTileCoordForXYAndResolution_(e[0], e[1], t, !1, i);
                    }
                    getTileCoordForXYAndResolution_(e, t, i, r, o) {
                        const s = this.getZForResolution(i),
                            a = i / this.getResolution(s),
                            l = this.getOrigin(s),
                            c = Fn(this.getTileSize(s), this.tmpSize_);
                        let u = (a * (e - l[0])) / i / c[0],
                            d = (a * (l[1] - t)) / i / c[1];
                        return r ? ((u = Oh(u, 5) - 1), (d = Oh(d, 5) - 1)) : ((u = Ah(u, 5)), (d = Ah(d, 5))), PA(s, u, d, o);
                    }
                    getTileCoordForXYAndZ_(e, t, i, r, o) {
                        const s = this.getOrigin(i),
                            a = this.getResolution(i),
                            l = Fn(this.getTileSize(i), this.tmpSize_);
                        let c = (e - s[0]) / a / l[0],
                            u = (s[1] - t) / a / l[1];
                        return r ? ((c = Oh(c, 5) - 1), (u = Oh(u, 5) - 1)) : ((c = Ah(c, 5)), (u = Ah(u, 5))), PA(i, c, u, o);
                    }
                    getTileCoordForCoordAndZ(e, t, i) {
                        return this.getTileCoordForXYAndZ_(e[0], e[1], t, !1, i);
                    }
                    getTileCoordResolution(e) {
                        return this.resolutions_[e[0]];
                    }
                    getTileSize(e) {
                        return this.tileSize_ ? this.tileSize_ : this.tileSizes_[e];
                    }
                    getFullTileRange(e) {
                        return this.fullTileRanges_
                            ? this.fullTileRanges_[e]
                            : this.extent_
                              ? this.getTileRangeForExtentAndZ(this.extent_, e)
                              : null;
                    }
                    getZForResolution(e, t) {
                        return gt(Cy(this.resolutions_, e, t || 0), this.minZoom, this.maxZoom);
                    }
                    tileCoordIntersectsViewport(e, t) {
                        return RR(t, 0, t.length, 2, this.getTileCoordExtent(e));
                    }
                    calculateTileRanges_(e) {
                        const t = this.resolutions_.length,
                            i = new Array(t);
                        for (let r = this.minZoom; r < t; ++r) i[r] = this.getTileRangeForExtentAndZ(e, r);
                        this.fullTileRanges_ = i;
                    }
                };
            function VA(n) {
                let e = n.getDefaultTileGrid();
                return (
                    e ||
                        ((e = (function Jq(n, e, t, i) {
                            return (function Zq(n, e, t, i) {
                                i = void 0 !== i ? i : 'top-left';
                                const r = HA(n, e, t);
                                return new jA({ extent: n, origin: z8(n, i), resolutions: r, tileSize: t });
                            })(Bb(n), e, t, i);
                        })(n)),
                        n.setDefaultTileGrid(e)),
                    e
                );
            }
            function HA(n, e, t, i) {
                (e = void 0 !== e ? e : e5), (t = Fn(void 0 !== t ? t : Ny));
                const r = wn(n),
                    o = qe(n);
                i = i > 0 ? i : Math.max(o / t[0], r / t[1]);
                const s = e + 1,
                    a = new Array(s);
                for (let l = 0; l < s; ++l) a[l] = i / Math.pow(2, l);
                return a;
            }
            function Bb(n) {
                let e = (n = Xe(n)).getExtent();
                if (!e) {
                    const t = (180 * Po.degrees) / n.getMetersPerUnit();
                    e = Ji(-t, -t, t, t);
                }
                return e;
            }
            class tX extends Ci {
                constructor(e, t) {
                    super(e), (this.tile = t);
                }
            }
            const nX = class eX extends BA {
                constructor(e) {
                    super({
                        attributions: e.attributions,
                        attributionsCollapsible: e.attributionsCollapsible,
                        projection: e.projection,
                        state: e.state,
                        wrapX: e.wrapX,
                        interpolate: e.interpolate,
                    }),
                        (this.opaque_ = void 0 !== e.opaque && e.opaque),
                        (this.tilePixelRatio_ = void 0 !== e.tilePixelRatio ? e.tilePixelRatio : 1),
                        (this.tileGrid = void 0 !== e.tileGrid ? e.tileGrid : null),
                        this.tileGrid && Fn(this.tileGrid.getTileSize(this.tileGrid.getMinZoom()), [256, 256]),
                        (this.tileCache = new FA(e.cacheSize || 0)),
                        (this.tmpSize = [0, 0]),
                        (this.key_ = e.key || ''),
                        (this.tileOptions = { transition: e.transition, interpolate: e.interpolate }),
                        (this.zDirection = e.zDirection ? e.zDirection : 0);
                }
                canExpireCache() {
                    return this.tileCache.canExpireCache();
                }
                expireCache(e, t) {
                    const i = this.getTileCacheForProjection(e);
                    i && i.expireCache(t);
                }
                forEachLoadedTile(e, t, i, r) {
                    const o = this.getTileCacheForProjection(e);
                    if (!o) return !1;
                    let a,
                        l,
                        c,
                        s = !0;
                    for (let u = i.minX; u <= i.maxX; ++u)
                        for (let d = i.minY; d <= i.maxY; ++d)
                            (l = kc(t, u, d)),
                                (c = !1),
                                o.containsKey(l) && ((a = o.get(l)), (c = 2 === a.getState()), c && (c = !1 !== r(a))),
                                c || (s = !1);
                    return s;
                }
                getGutterForProjection(e) {
                    return 0;
                }
                getKey() {
                    return this.key_;
                }
                setKey(e) {
                    this.key_ !== e && ((this.key_ = e), this.changed());
                }
                getOpaque(e) {
                    return this.opaque_;
                }
                getResolutions(e) {
                    const t = e ? this.getTileGridForProjection(e) : this.tileGrid;
                    return t ? t.getResolutions() : null;
                }
                getTile(e, t, i, r, o) {
                    return J();
                }
                getTileGrid() {
                    return this.tileGrid;
                }
                getTileGridForProjection(e) {
                    return this.tileGrid ? this.tileGrid : VA(e);
                }
                getTileCacheForProjection(e) {
                    const t = this.getProjection();
                    return pe(null === t || Fo(t, e), 68), this.tileCache;
                }
                getTilePixelRatio(e) {
                    return this.tilePixelRatio_;
                }
                getTilePixelSize(e, t, i) {
                    const r = this.getTileGridForProjection(i),
                        o = this.getTilePixelRatio(t),
                        s = Fn(r.getTileSize(e), this.tmpSize);
                    return 1 == o
                        ? s
                        : (function pY(n, e, t) {
                              return void 0 === t && (t = [0, 0]), (t[0] = (n[0] * e + 0.5) | 0), (t[1] = (n[1] * e + 0.5) | 0), t;
                          })(s, o, this.tmpSize);
                }
                getTileCoordForTileUrlFunction(e, t) {
                    t = void 0 !== t ? t : this.getProjection();
                    const i = this.getTileGridForProjection(t);
                    return (
                        this.getWrapX() &&
                            t.isGlobal() &&
                            (e = (function Kq(n, e, t) {
                                const i = e[0],
                                    r = n.getTileCoordCenter(e),
                                    o = Bb(t);
                                if (!Dh(o, r)) {
                                    const s = qe(o),
                                        a = Math.ceil((o[0] - r[0]) / s);
                                    return (r[0] += s * a), n.getTileCoordForCoordAndZ(r, i);
                                }
                                return e;
                            })(i, e, t)),
                        (function $q(n, e) {
                            const t = n[0],
                                i = n[1],
                                r = n[2];
                            if (e.getMinZoom() > t || t > e.getMaxZoom()) return !1;
                            const o = e.getFullTileRange(t);
                            return !o || o.containsXY(i, r);
                        })(e, i)
                            ? e
                            : null
                    );
                }
                clear() {
                    this.tileCache.clear();
                }
                refresh() {
                    this.clear(), super.refresh();
                }
                updateCacheSize(e, t) {
                    const i = this.getTileCacheForProjection(t);
                    e > i.highWaterMark && (i.highWaterMark = e);
                }
                useTile(e, t, i, r) {}
            };
            function iX(n, e) {
                const t = /\{z\}/g,
                    i = /\{x\}/g,
                    r = /\{y\}/g,
                    o = /\{-y\}/g;
                return function (s, a, l) {
                    if (s)
                        return n
                            .replace(t, s[0].toString())
                            .replace(i, s[1].toString())
                            .replace(r, s[2].toString())
                            .replace(o, function () {
                                const u = e.getFullTileRange(s[0]);
                                return pe(u, 55), (u.getHeight() - s[2] - 1).toString();
                            });
                };
            }
            class jb extends nX {
                constructor(e) {
                    super({
                        attributions: e.attributions,
                        cacheSize: e.cacheSize,
                        opaque: e.opaque,
                        projection: e.projection,
                        state: e.state,
                        tileGrid: e.tileGrid,
                        tilePixelRatio: e.tilePixelRatio,
                        wrapX: e.wrapX,
                        transition: e.transition,
                        interpolate: e.interpolate,
                        key: e.key,
                        attributionsCollapsible: e.attributionsCollapsible,
                        zDirection: e.zDirection,
                    }),
                        (this.generateTileUrlFunction_ = this.tileUrlFunction === jb.prototype.tileUrlFunction),
                        (this.tileLoadFunction = e.tileLoadFunction),
                        e.tileUrlFunction && (this.tileUrlFunction = e.tileUrlFunction),
                        (this.urls = null),
                        e.urls ? this.setUrls(e.urls) : e.url && this.setUrl(e.url),
                        (this.tileLoadingKeys_ = {});
                }
                getTileLoadFunction() {
                    return this.tileLoadFunction;
                }
                getTileUrlFunction() {
                    return Object.getPrototypeOf(this).tileUrlFunction === this.tileUrlFunction
                        ? this.tileUrlFunction.bind(this)
                        : this.tileUrlFunction;
                }
                getUrls() {
                    return this.urls;
                }
                handleTileChange(e) {
                    const t = e.target,
                        i = Se(t),
                        r = t.getState();
                    let o;
                    1 == r
                        ? ((this.tileLoadingKeys_[i] = !0), (o = 'tileloadstart'))
                        : i in this.tileLoadingKeys_ &&
                          (delete this.tileLoadingKeys_[i], (o = 3 == r ? 'tileloaderror' : 2 == r ? 'tileloadend' : void 0)),
                        null != o && this.dispatchEvent(new tX(o, t));
                }
                setTileLoadFunction(e) {
                    this.tileCache.clear(), (this.tileLoadFunction = e), this.changed();
                }
                setTileUrlFunction(e, t) {
                    (this.tileUrlFunction = e), this.tileCache.pruneExceptNewestZ(), typeof t < 'u' ? this.setKey(t) : this.changed();
                }
                setUrl(e) {
                    const t = (function sX(n) {
                        const e = [];
                        let t = /\{([a-z])-([a-z])\}/.exec(n);
                        if (t) {
                            const i = t[1].charCodeAt(0),
                                r = t[2].charCodeAt(0);
                            let o;
                            for (o = i; o <= r; ++o) e.push(n.replace(t[0], String.fromCharCode(o)));
                            return e;
                        }
                        if (((t = /\{(\d+)-(\d+)\}/.exec(n)), t)) {
                            const i = parseInt(t[2], 10);
                            for (let r = parseInt(t[1], 10); r <= i; r++) e.push(n.replace(t[0], r.toString()));
                            return e;
                        }
                        return e.push(n), e;
                    })(e);
                    (this.urls = t), this.setUrls(t);
                }
                setUrls(e) {
                    this.urls = e;
                    const t = e.join('\n');
                    this.generateTileUrlFunction_
                        ? this.setTileUrlFunction(
                              (function rX(n, e) {
                                  const t = n.length,
                                      i = new Array(t);
                                  for (let r = 0; r < t; ++r) i[r] = iX(n[r], e);
                                  return (function oX(n) {
                                      return 1 === n.length
                                          ? n[0]
                                          : function (e, t, i) {
                                                if (!e) return;
                                                const r = (function Wq(n) {
                                                        return (n[1] << n[0]) + n[2];
                                                    })(e),
                                                    o = ya(r, n.length);
                                                return n[o](e, t, i);
                                            };
                                  })(i);
                              })(e, this.tileGrid),
                              t,
                          )
                        : this.setKey(t);
                }
                tileUrlFunction(e, t, i) {}
                useTile(e, t, i) {
                    const r = kc(e, t, i);
                    this.tileCache.containsKey(r) && this.tileCache.get(r);
                }
            }
            const aX = jb;
            function cX(n, e) {
                n.getImage().src = e;
            }
            const uX = class lX extends aX {
                    constructor(e) {
                        super({
                            attributions: e.attributions,
                            cacheSize: e.cacheSize,
                            opaque: e.opaque,
                            projection: e.projection,
                            state: e.state,
                            tileGrid: e.tileGrid,
                            tileLoadFunction: e.tileLoadFunction ? e.tileLoadFunction : cX,
                            tilePixelRatio: e.tilePixelRatio,
                            tileUrlFunction: e.tileUrlFunction,
                            url: e.url,
                            urls: e.urls,
                            wrapX: e.wrapX,
                            transition: e.transition,
                            interpolate: void 0 === e.interpolate || e.interpolate,
                            key: e.key,
                            attributionsCollapsible: e.attributionsCollapsible,
                            zDirection: e.zDirection,
                        }),
                            (this.crossOrigin = void 0 !== e.crossOrigin ? e.crossOrigin : null),
                            (this.tileClass = void 0 !== e.tileClass ? e.tileClass : iA),
                            (this.tileCacheForProjection = {}),
                            (this.tileGridForProjection = {}),
                            (this.reprojectionErrorThreshold_ = e.reprojectionErrorThreshold),
                            (this.renderReprojectionEdges_ = !1);
                    }
                    canExpireCache() {
                        if (this.tileCache.canExpireCache()) return !0;
                        for (const e in this.tileCacheForProjection) if (this.tileCacheForProjection[e].canExpireCache()) return !0;
                        return !1;
                    }
                    expireCache(e, t) {
                        const i = this.getTileCacheForProjection(e);
                        this.tileCache.expireCache(this.tileCache == i ? t : {});
                        for (const r in this.tileCacheForProjection) {
                            const o = this.tileCacheForProjection[r];
                            o.expireCache(o == i ? t : {});
                        }
                    }
                    getGutterForProjection(e) {
                        return this.getProjection() && e && !Fo(this.getProjection(), e) ? 0 : this.getGutter();
                    }
                    getGutter() {
                        return 0;
                    }
                    getKey() {
                        let e = super.getKey();
                        return this.getInterpolate() || (e += ':disable-interpolation'), e;
                    }
                    getOpaque(e) {
                        return !(this.getProjection() && e && !Fo(this.getProjection(), e)) && super.getOpaque(e);
                    }
                    getTileGridForProjection(e) {
                        const t = this.getProjection();
                        if (this.tileGrid && (!t || Fo(t, e))) return this.tileGrid;
                        const i = Se(e);
                        return i in this.tileGridForProjection || (this.tileGridForProjection[i] = VA(e)), this.tileGridForProjection[i];
                    }
                    getTileCacheForProjection(e) {
                        const t = this.getProjection();
                        if (!t || Fo(t, e)) return this.tileCache;
                        const i = Se(e);
                        return (
                            i in this.tileCacheForProjection || (this.tileCacheForProjection[i] = new FA(this.tileCache.highWaterMark)),
                            this.tileCacheForProjection[i]
                        );
                    }
                    createTile_(e, t, i, r, o, s) {
                        const a = [e, t, i],
                            l = this.getTileCoordForTileUrlFunction(a, o),
                            c = l ? this.tileUrlFunction(l, r, o) : void 0,
                            u = new this.tileClass(
                                a,
                                void 0 !== c ? 0 : 4,
                                void 0 !== c ? c : '',
                                this.crossOrigin,
                                this.tileLoadFunction,
                                this.tileOptions,
                            );
                        return (u.key = s), u.addEventListener('change', this.handleTileChange.bind(this)), u;
                    }
                    getTile(e, t, i, r, o) {
                        const s = this.getProjection();
                        if (!s || !o || Fo(s, o)) return this.getTileInternal(e, t, i, r, s || o);
                        const a = this.getTileCacheForProjection(o),
                            l = [e, t, i];
                        let c;
                        const u = kA(l);
                        a.containsKey(u) && (c = a.get(u));
                        const d = this.getKey();
                        if (c && c.key == d) return c;
                        const h = this.getTileGridForProjection(s),
                            f = this.getTileGridForProjection(o),
                            m = this.getTileCoordForTileUrlFunction(l, o),
                            p = new Eb(
                                s,
                                h,
                                o,
                                f,
                                l,
                                m,
                                this.getTilePixelRatio(r),
                                this.getGutter(),
                                (g, y, _, b) => this.getTileInternal(g, y, _, b, s),
                                this.reprojectionErrorThreshold_,
                                this.renderReprojectionEdges_,
                                this.getInterpolate(),
                            );
                        return (p.key = d), c ? ((p.interimTile = c), p.refreshInterimChain(), a.replace(u, p)) : a.set(u, p), p;
                    }
                    getTileInternal(e, t, i, r, o) {
                        let s = null;
                        const a = kc(e, t, i),
                            l = this.getKey();
                        if (this.tileCache.containsKey(a)) {
                            if (((s = this.tileCache.get(a)), s.key != l)) {
                                const c = s;
                                (s = this.createTile_(e, t, i, r, o, l)),
                                    (s.interimTile = 0 == c.getState() ? c.interimTile : c),
                                    s.refreshInterimChain(),
                                    this.tileCache.replace(a, s);
                            }
                        } else (s = this.createTile_(e, t, i, r, o, l)), this.tileCache.set(a, s);
                        return s;
                    }
                    setRenderReprojectionEdges(e) {
                        if (this.renderReprojectionEdges_ != e) {
                            this.renderReprojectionEdges_ = e;
                            for (const t in this.tileCacheForProjection) this.tileCacheForProjection[t].clear();
                            this.changed();
                        }
                    }
                    setTileGridForProjection(e, t) {
                        const i = Xe(e);
                        if (i) {
                            const r = Se(i);
                            r in this.tileGridForProjection || (this.tileGridForProjection[r] = t);
                        }
                    }
                    clear() {
                        super.clear();
                        for (const e in this.tileCacheForProjection) this.tileCacheForProjection[e].clear();
                    }
                },
                hX = class dX extends uX {
                    constructor(e) {
                        const t = void 0 !== (e = e || {}).projection ? e.projection : 'EPSG:3857',
                            i =
                                void 0 !== e.tileGrid
                                    ? e.tileGrid
                                    : (function Qq(n) {
                                          const e = n || {},
                                              t = e.extent || Xe('EPSG:3857').getExtent(),
                                              i = {
                                                  extent: t,
                                                  minZoom: e.minZoom,
                                                  tileSize: e.tileSize,
                                                  resolutions: HA(t, e.maxZoom, e.tileSize, e.maxResolution),
                                              };
                                          return new jA(i);
                                      })({
                                          extent: Bb(t),
                                          maxResolution: e.maxResolution,
                                          maxZoom: e.maxZoom,
                                          minZoom: e.minZoom,
                                          tileSize: e.tileSize,
                                      });
                        super({
                            attributions: e.attributions,
                            cacheSize: e.cacheSize,
                            crossOrigin: e.crossOrigin,
                            interpolate: e.interpolate,
                            opaque: e.opaque,
                            projection: t,
                            reprojectionErrorThreshold: e.reprojectionErrorThreshold,
                            tileGrid: i,
                            tileLoadFunction: e.tileLoadFunction,
                            tilePixelRatio: e.tilePixelRatio,
                            tileUrlFunction: e.tileUrlFunction,
                            url: e.url,
                            urls: e.urls,
                            wrapX: void 0 === e.wrapX || e.wrapX,
                            transition: e.transition,
                            attributionsCollapsible: e.attributionsCollapsible,
                            zDirection: e.zDirection,
                        }),
                            (this.gutter_ = void 0 !== e.gutter ? e.gutter : 0);
                    }
                    getGutter() {
                        return this.gutter_;
                    }
                },
                pX = class mX extends hX {
                    constructor(e) {
                        let t;
                        (t =
                            void 0 !== (e = e || {}).attributions
                                ? e.attributions
                                : [
                                      '&#169; <a href="https://www.openstreetmap.org/copyright" target="_blank">OpenStreetMap</a> contributors.',
                                  ]),
                            super({
                                attributions: t,
                                attributionsCollapsible: !1,
                                cacheSize: e.cacheSize,
                                crossOrigin: void 0 !== e.crossOrigin ? e.crossOrigin : 'anonymous',
                                interpolate: e.interpolate,
                                maxZoom: void 0 !== e.maxZoom ? e.maxZoom : 19,
                                opaque: void 0 === e.opaque || e.opaque,
                                reprojectionErrorThreshold: e.reprojectionErrorThreshold,
                                tileLoadFunction: e.tileLoadFunction,
                                transition: e.transition,
                                url: void 0 !== e.url ? e.url : 'https://tile.openstreetmap.org/{z}/{x}/{y}.png',
                                wrapX: e.wrapX,
                                zDirection: e.zDirection,
                            });
                    }
                },
                UA = class gX {
                    constructor(e) {
                        (this.rbush_ = new cA(e)), (this.items_ = {});
                    }
                    insert(e, t) {
                        const i = { minX: e[0], minY: e[1], maxX: e[2], maxY: e[3], value: t };
                        this.rbush_.insert(i), (this.items_[Se(t)] = i);
                    }
                    load(e, t) {
                        const i = new Array(t.length);
                        for (let r = 0, o = t.length; r < o; r++) {
                            const s = e[r],
                                a = t[r],
                                l = { minX: s[0], minY: s[1], maxX: s[2], maxY: s[3], value: a };
                            (i[r] = l), (this.items_[Se(a)] = l);
                        }
                        this.rbush_.load(i);
                    }
                    remove(e) {
                        const t = Se(e),
                            i = this.items_[t];
                        return delete this.items_[t], null !== this.rbush_.remove(i);
                    }
                    update(e, t) {
                        const i = this.items_[Se(t)];
                        pc([i.minX, i.minY, i.maxX, i.maxY], e) || (this.remove(t), this.insert(e, t));
                    }
                    getAll() {
                        return this.rbush_.all().map(function (t) {
                            return t.value;
                        });
                    }
                    getInExtent(e) {
                        return this.rbush_.search({ minX: e[0], minY: e[1], maxX: e[2], maxY: e[3] }).map(function (r) {
                            return r.value;
                        });
                    }
                    forEach(e) {
                        return this.forEach_(this.getAll(), e);
                    }
                    forEachInExtent(e, t) {
                        return this.forEach_(this.getInExtent(e), t);
                    }
                    forEach_(e, t) {
                        let i;
                        for (let r = 0, o = e.length; r < o; r++) if (((i = t(e[r])), i)) return i;
                        return i;
                    }
                    isEmpty() {
                        return ma(this.items_);
                    }
                    clear() {
                        this.rbush_.clear(), (this.items_ = {});
                    }
                    getExtent(e) {
                        const t = this.rbush_.toJSON();
                        return Ji(t.minX, t.minY, t.maxX, t.maxY, e);
                    }
                    concat(e) {
                        this.rbush_.load(e.rbush_.all());
                        for (const t in e.items_) this.items_[t] = e.items_[t];
                    }
                };
            function _X(n, e) {
                return [[-1 / 0, -1 / 0, 1 / 0, 1 / 0]];
            }
            function GA(n, e) {
                return function (t, i, r, o, s) {
                    const a = this;
                    !(function yX(n, e, t, i, r, o, s) {
                        const a = new XMLHttpRequest();
                        a.open('GET', 'function' == typeof n ? n(t, i, r) : n, !0),
                            'arraybuffer' == e.getType() && (a.responseType = 'arraybuffer'),
                            (a.withCredentials = false),
                            (a.onload = function (l) {
                                if (!a.status || (a.status >= 200 && a.status < 300)) {
                                    const c = e.getType();
                                    let u;
                                    'json' == c || 'text' == c
                                        ? (u = a.responseText)
                                        : 'xml' == c
                                          ? ((u = a.responseXML),
                                            u || (u = new DOMParser().parseFromString(a.responseText, 'application/xml')))
                                          : 'arraybuffer' == c && (u = a.response),
                                        u ? o(e.readFeatures(u, { extent: t, featureProjection: r }), e.readProjection(u)) : s();
                                } else s();
                            }),
                            (a.onerror = s),
                            a.send();
                    })(
                        n,
                        e,
                        t,
                        i,
                        r,
                        function (l, c) {
                            a.addFeatures(l), void 0 !== o && o(l);
                        },
                        s || fa,
                    );
                };
            }
            class $r extends Ci {
                constructor(e, t, i) {
                    super(e), (this.feature = t), (this.features = i);
                }
            }
            const vX = class bX extends BA {
                constructor(e) {
                    super({
                        attributions: (e = e || {}).attributions,
                        interpolate: !0,
                        projection: void 0,
                        state: 'ready',
                        wrapX: void 0 === e.wrapX || e.wrapX,
                    }),
                        (this.loader_ = fa),
                        (this.format_ = e.format),
                        (this.overlaps_ = void 0 === e.overlaps || e.overlaps),
                        (this.url_ = e.url),
                        void 0 !== e.loader
                            ? (this.loader_ = e.loader)
                            : void 0 !== this.url_ && (pe(this.format_, 7), (this.loader_ = GA(this.url_, this.format_))),
                        (this.strategy_ = void 0 !== e.strategy ? e.strategy : _X);
                    const t = void 0 === e.useSpatialIndex || e.useSpatialIndex;
                    let i, r;
                    (this.featuresRtree_ = t ? new UA() : null),
                        (this.loadedExtentsRtree_ = new UA()),
                        (this.loadingExtentsCount_ = 0),
                        (this.nullGeometryFeatures_ = {}),
                        (this.idIndex_ = {}),
                        (this.uidIndex_ = {}),
                        (this.featureChangeKeys_ = {}),
                        (this.featuresCollection_ = null),
                        Array.isArray(e.features) ? (r = e.features) : e.features && ((i = e.features), (r = i.getArray())),
                        !t && void 0 === i && (i = new Ii(r)),
                        void 0 !== r && this.addFeaturesInternal(r),
                        void 0 !== i && this.bindFeaturesCollection_(i);
                }
                addFeature(e) {
                    this.addFeatureInternal(e), this.changed();
                }
                addFeatureInternal(e) {
                    const t = Se(e);
                    if (!this.addToIndex_(t, e)) return void (this.featuresCollection_ && this.featuresCollection_.remove(e));
                    this.setupChangeEvents_(t, e);
                    const i = e.getGeometry();
                    if (i) {
                        const r = i.getExtent();
                        this.featuresRtree_ && this.featuresRtree_.insert(r, e);
                    } else this.nullGeometryFeatures_[t] = e;
                    this.dispatchEvent(new $r('addfeature', e));
                }
                setupChangeEvents_(e, t) {
                    this.featureChangeKeys_[e] = [
                        me(t, 'change', this.handleFeatureChange_, this),
                        me(t, 'propertychange', this.handleFeatureChange_, this),
                    ];
                }
                addToIndex_(e, t) {
                    let i = !0;
                    const r = t.getId();
                    return (
                        void 0 !== r && (r.toString() in this.idIndex_ ? (i = !1) : (this.idIndex_[r.toString()] = t)),
                        i && (pe(!(e in this.uidIndex_), 30), (this.uidIndex_[e] = t)),
                        i
                    );
                }
                addFeatures(e) {
                    this.addFeaturesInternal(e), this.changed();
                }
                addFeaturesInternal(e) {
                    const t = [],
                        i = [],
                        r = [];
                    for (let o = 0, s = e.length; o < s; o++) {
                        const a = e[o],
                            l = Se(a);
                        this.addToIndex_(l, a) && i.push(a);
                    }
                    for (let o = 0, s = i.length; o < s; o++) {
                        const a = i[o],
                            l = Se(a);
                        this.setupChangeEvents_(l, a);
                        const c = a.getGeometry();
                        if (c) {
                            const u = c.getExtent();
                            t.push(u), r.push(a);
                        } else this.nullGeometryFeatures_[l] = a;
                    }
                    if ((this.featuresRtree_ && this.featuresRtree_.load(t, r), this.hasListener('addfeature')))
                        for (let o = 0, s = i.length; o < s; o++) this.dispatchEvent(new $r('addfeature', i[o]));
                }
                bindFeaturesCollection_(e) {
                    let t = !1;
                    this.addEventListener('addfeature', function (i) {
                        t || ((t = !0), e.push(i.feature), (t = !1));
                    }),
                        this.addEventListener('removefeature', function (i) {
                            t || ((t = !0), e.remove(i.feature), (t = !1));
                        }),
                        e.addEventListener('add', (i) => {
                            t || ((t = !0), this.addFeature(i.element), (t = !1));
                        }),
                        e.addEventListener('remove', (i) => {
                            t || ((t = !0), this.removeFeature(i.element), (t = !1));
                        }),
                        (this.featuresCollection_ = e);
                }
                clear(e) {
                    if (e) {
                        for (const i in this.featureChangeKeys_) this.featureChangeKeys_[i].forEach(je);
                        this.featuresCollection_ || ((this.featureChangeKeys_ = {}), (this.idIndex_ = {}), (this.uidIndex_ = {}));
                    } else if (this.featuresRtree_) {
                        this.featuresRtree_.forEach((r) => {
                            this.removeFeatureInternal(r);
                        });
                        for (const r in this.nullGeometryFeatures_) this.removeFeatureInternal(this.nullGeometryFeatures_[r]);
                    }
                    this.featuresCollection_ && this.featuresCollection_.clear(),
                        this.featuresRtree_ && this.featuresRtree_.clear(),
                        (this.nullGeometryFeatures_ = {});
                    const t = new $r('clear');
                    this.dispatchEvent(t), this.changed();
                }
                forEachFeature(e) {
                    if (this.featuresRtree_) return this.featuresRtree_.forEach(e);
                    this.featuresCollection_ && this.featuresCollection_.forEach(e);
                }
                forEachFeatureAtCoordinateDirect(e, t) {
                    return this.forEachFeatureInExtent([e[0], e[1], e[0], e[1]], function (r) {
                        if (r.getGeometry().intersectsCoordinate(e)) return t(r);
                    });
                }
                forEachFeatureInExtent(e, t) {
                    if (this.featuresRtree_) return this.featuresRtree_.forEachInExtent(e, t);
                    this.featuresCollection_ && this.featuresCollection_.forEach(t);
                }
                forEachFeatureIntersectingExtent(e, t) {
                    return this.forEachFeatureInExtent(e, function (i) {
                        if (i.getGeometry().intersectsExtent(e)) {
                            const o = t(i);
                            if (o) return o;
                        }
                    });
                }
                getFeaturesCollection() {
                    return this.featuresCollection_;
                }
                getFeatures() {
                    let e;
                    return (
                        this.featuresCollection_
                            ? (e = this.featuresCollection_.getArray().slice(0))
                            : this.featuresRtree_ &&
                              ((e = this.featuresRtree_.getAll()),
                              ma(this.nullGeometryFeatures_) || Zi(e, Object.values(this.nullGeometryFeatures_))),
                        e
                    );
                }
                getFeaturesAtCoordinate(e) {
                    const t = [];
                    return (
                        this.forEachFeatureAtCoordinateDirect(e, function (i) {
                            t.push(i);
                        }),
                        t
                    );
                }
                getFeaturesInExtent(e, t) {
                    if (this.featuresRtree_) {
                        if (!(t && t.canWrapX() && this.getWrapX())) return this.featuresRtree_.getInExtent(e);
                        const r = (function Y8(n, e) {
                            if (e.canWrapX()) {
                                const t = e.getExtent();
                                if (!isFinite(n[0]) || !isFinite(n[2])) return [[t[0], n[1], t[2], n[3]]];
                                WM(n, e);
                                const i = qe(t);
                                if (qe(n) > i) return [[t[0], n[1], t[2], n[3]]];
                                if (n[0] < t[0])
                                    return [
                                        [n[0] + i, n[1], t[2], n[3]],
                                        [t[0], n[1], n[2], n[3]],
                                    ];
                                if (n[2] > t[2])
                                    return [
                                        [n[0], n[1], t[2], n[3]],
                                        [t[0], n[1], n[2] - i, n[3]],
                                    ];
                            }
                            return [n];
                        })(e, t);
                        return [].concat(...r.map((o) => this.featuresRtree_.getInExtent(o)));
                    }
                    return this.featuresCollection_ ? this.featuresCollection_.getArray().slice(0) : [];
                }
                getClosestFeatureToCoordinate(e, t) {
                    const i = e[0],
                        r = e[1];
                    let o = null;
                    const s = [NaN, NaN];
                    let a = 1 / 0;
                    const l = [-1 / 0, -1 / 0, 1 / 0, 1 / 0];
                    return (
                        (t = t || ha),
                        this.featuresRtree_.forEachInExtent(l, function (c) {
                            if (t(c)) {
                                const u = c.getGeometry(),
                                    d = a;
                                if (((a = u.closestPointXY(i, r, s, a)), a < d)) {
                                    o = c;
                                    const h = Math.sqrt(a);
                                    (l[0] = i - h), (l[1] = r - h), (l[2] = i + h), (l[3] = r + h);
                                }
                            }
                        }),
                        o
                    );
                }
                getExtent(e) {
                    return this.featuresRtree_.getExtent(e);
                }
                getFeatureById(e) {
                    const t = this.idIndex_[e.toString()];
                    return void 0 !== t ? t : null;
                }
                getFeatureByUid(e) {
                    const t = this.uidIndex_[e];
                    return void 0 !== t ? t : null;
                }
                getFormat() {
                    return this.format_;
                }
                getOverlaps() {
                    return this.overlaps_;
                }
                getUrl() {
                    return this.url_;
                }
                handleFeatureChange_(e) {
                    const t = e.target,
                        i = Se(t),
                        r = t.getGeometry();
                    if (r) {
                        const s = r.getExtent();
                        i in this.nullGeometryFeatures_
                            ? (delete this.nullGeometryFeatures_[i], this.featuresRtree_ && this.featuresRtree_.insert(s, t))
                            : this.featuresRtree_ && this.featuresRtree_.update(s, t);
                    } else
                        i in this.nullGeometryFeatures_ ||
                            (this.featuresRtree_ && this.featuresRtree_.remove(t), (this.nullGeometryFeatures_[i] = t));
                    const o = t.getId();
                    if (void 0 !== o) {
                        const s = o.toString();
                        this.idIndex_[s] !== t && (this.removeFromIdIndex_(t), (this.idIndex_[s] = t));
                    } else this.removeFromIdIndex_(t), (this.uidIndex_[i] = t);
                    this.changed(), this.dispatchEvent(new $r('changefeature', t));
                }
                hasFeature(e) {
                    const t = e.getId();
                    return void 0 !== t ? t in this.idIndex_ : Se(e) in this.uidIndex_;
                }
                isEmpty() {
                    return this.featuresRtree_
                        ? this.featuresRtree_.isEmpty() && ma(this.nullGeometryFeatures_)
                        : !this.featuresCollection_ || 0 === this.featuresCollection_.getLength();
                }
                loadFeatures(e, t, i) {
                    const r = this.loadedExtentsRtree_,
                        o = this.strategy_(e, t, i);
                    for (let s = 0, a = o.length; s < a; ++s) {
                        const l = o[s];
                        r.forEachInExtent(l, function (u) {
                            return pa(u.extent, l);
                        }) ||
                            (++this.loadingExtentsCount_,
                            this.dispatchEvent(new $r('featuresloadstart')),
                            this.loader_.call(
                                this,
                                l,
                                t,
                                i,
                                (u) => {
                                    --this.loadingExtentsCount_, this.dispatchEvent(new $r('featuresloadend', void 0, u));
                                },
                                () => {
                                    --this.loadingExtentsCount_, this.dispatchEvent(new $r('featuresloaderror'));
                                },
                            ),
                            r.insert(l, { extent: l.slice() }));
                    }
                    this.loading = !(this.loader_.length < 4) && this.loadingExtentsCount_ > 0;
                }
                refresh() {
                    this.clear(!0), this.loadedExtentsRtree_.clear(), super.refresh();
                }
                removeLoadedExtent(e) {
                    const t = this.loadedExtentsRtree_;
                    let i;
                    t.forEachInExtent(e, function (r) {
                        if (pc(r.extent, e)) return (i = r), !0;
                    }),
                        i && t.remove(i);
                }
                removeFeature(e) {
                    if (!e) return;
                    const t = Se(e);
                    t in this.nullGeometryFeatures_
                        ? delete this.nullGeometryFeatures_[t]
                        : this.featuresRtree_ && this.featuresRtree_.remove(e),
                        this.removeFeatureInternal(e) && this.changed();
                }
                removeFeatureInternal(e) {
                    const t = Se(e),
                        i = this.featureChangeKeys_[t];
                    if (!i) return;
                    i.forEach(je), delete this.featureChangeKeys_[t];
                    const r = e.getId();
                    return (
                        void 0 !== r && delete this.idIndex_[r.toString()],
                        delete this.uidIndex_[t],
                        this.dispatchEvent(new $r('removefeature', e)),
                        e
                    );
                }
                removeFromIdIndex_(e) {
                    let t = !1;
                    for (const i in this.idIndex_)
                        if (this.idIndex_[i] === e) {
                            delete this.idIndex_[i], (t = !0);
                            break;
                        }
                    return t;
                }
                setLoader(e) {
                    this.loader_ = e;
                }
                setUrl(e) {
                    pe(this.format_, 7), (this.url_ = e), this.setLoader(GA(e, this.format_));
                }
            };
            class wX extends Ci {
                constructor(e, t, i, r) {
                    super(e), (this.features = i), (this.file = t), (this.projection = r);
                }
            }
            const DX = class CX extends xa {
                constructor(e) {
                    (e = e || {}), super({ handleEvent: ha }), (this.readAsBuffer_ = !1), (this.formats_ = []);
                    const t = e.formatConstructors ? e.formatConstructors : [];
                    for (let i = 0, r = t.length; i < r; ++i) {
                        let o = t[i];
                        'function' == typeof o && (o = new o()),
                            this.formats_.push(o),
                            (this.readAsBuffer_ = this.readAsBuffer_ || 'arraybuffer' === o.getType());
                    }
                    (this.projection_ = e.projection ? Xe(e.projection) : null),
                        (this.dropListenKeys_ = null),
                        (this.source_ = e.source || null),
                        (this.target = e.target ? e.target : null);
                }
                handleResult_(e, t) {
                    const i = t.target.result,
                        r = this.getMap();
                    let s,
                        o = this.projection_;
                    o || ((o = Vy()), o || (o = r.getView().getProjection()));
                    const a = this.formats_;
                    for (let l = 0, c = a.length; l < c; ++l) {
                        const u = a[l];
                        let d = i;
                        this.readAsBuffer_ && 'arraybuffer' !== u.getType() && (void 0 === s && (s = new TextDecoder().decode(i)), (d = s));
                        const h = this.tryReadFeatures_(u, d, { featureProjection: o });
                        if (h && h.length > 0) {
                            this.source_ && (this.source_.clear(), this.source_.addFeatures(h)),
                                this.dispatchEvent(new wX('addfeatures', e, h, o));
                            break;
                        }
                    }
                }
                registerListeners_() {
                    const e = this.getMap();
                    if (e) {
                        const t = this.target ? this.target : e.getViewport();
                        this.dropListenKeys_ = [
                            me(t, 'drop', this.handleDrop, this),
                            me(t, 'dragenter', this.handleStop, this),
                            me(t, 'dragover', this.handleStop, this),
                            me(t, 'drop', this.handleStop, this),
                        ];
                    }
                }
                setActive(e) {
                    !this.getActive() && e && this.registerListeners_(),
                        this.getActive() && !e && this.unregisterListeners_(),
                        super.setActive(e);
                }
                setMap(e) {
                    this.unregisterListeners_(), super.setMap(e), this.getActive() && this.registerListeners_();
                }
                tryReadFeatures_(e, t, i) {
                    try {
                        return e.readFeatures(t, i);
                    } catch {
                        return null;
                    }
                }
                unregisterListeners_() {
                    this.dropListenKeys_ && (this.dropListenKeys_.forEach(je), (this.dropListenKeys_ = null));
                }
                handleDrop(e) {
                    const t = e.dataTransfer.files;
                    for (let i = 0, r = t.length; i < r; ++i) {
                        const o = t.item(i),
                            s = new FileReader();
                        s.addEventListener('load', this.handleResult_.bind(this, o)),
                            this.readAsBuffer_ ? s.readAsArrayBuffer(o) : s.readAsText(o);
                    }
                }
                handleStop(e) {
                    e.stopPropagation(), e.preventDefault(), (e.dataTransfer.dropEffect = 'copy');
                }
            };
            class Vb extends Di {
                constructor(e) {
                    super(),
                        (this.id_ = void 0),
                        (this.geometryName_ = 'geometry'),
                        (this.style_ = null),
                        (this.styleFunction_ = void 0),
                        (this.geometryChangeKey_ = null),
                        this.addChangeListener(this.geometryName_, this.handleGeometryChanged_),
                        e && ('function' == typeof e.getSimplifiedGeometry ? this.setGeometry(e) : this.setProperties(e));
                }
                clone() {
                    const e = new Vb(this.hasProperties() ? this.getProperties() : null);
                    e.setGeometryName(this.getGeometryName());
                    const t = this.getGeometry();
                    t && e.setGeometry(t.clone());
                    const i = this.getStyle();
                    return i && e.setStyle(i), e;
                }
                getGeometry() {
                    return this.get(this.geometryName_);
                }
                getId() {
                    return this.id_;
                }
                getGeometryName() {
                    return this.geometryName_;
                }
                getStyle() {
                    return this.style_;
                }
                getStyleFunction() {
                    return this.styleFunction_;
                }
                handleGeometryChange_() {
                    this.changed();
                }
                handleGeometryChanged_() {
                    this.geometryChangeKey_ && (je(this.geometryChangeKey_), (this.geometryChangeKey_ = null));
                    const e = this.getGeometry();
                    e && (this.geometryChangeKey_ = me(e, 'change', this.handleGeometryChange_, this)), this.changed();
                }
                setGeometry(e) {
                    this.set(this.geometryName_, e);
                }
                setStyle(e) {
                    (this.style_ = e),
                        (this.styleFunction_ = e
                            ? (function IX(n) {
                                  if ('function' == typeof n) return n;
                                  let e;
                                  return (
                                      Array.isArray(n) ? (e = n) : (pe('function' == typeof n.getZIndex, 41), (e = [n])),
                                      function () {
                                          return e;
                                      }
                                  );
                              })(e)
                            : void 0),
                        this.changed();
                }
                setId(e) {
                    (this.id_ = e), this.changed();
                }
                setGeometryName(e) {
                    this.removeChangeListener(this.geometryName_, this.handleGeometryChanged_),
                        (this.geometryName_ = e),
                        this.addChangeListener(this.geometryName_, this.handleGeometryChanged_),
                        this.handleGeometryChanged_();
                }
            }
            const xX = Vb;
            class uf extends vR {
                constructor(e) {
                    super(), (this.geometries_ = e || null), (this.changeEventsKeys_ = []), this.listenGeometriesChange_();
                }
                unlistenGeometriesChange_() {
                    this.changeEventsKeys_.forEach(je), (this.changeEventsKeys_.length = 0);
                }
                listenGeometriesChange_() {
                    if (this.geometries_)
                        for (let e = 0, t = this.geometries_.length; e < t; ++e)
                            this.changeEventsKeys_.push(me(this.geometries_[e], 'change', this.changed, this));
                }
                clone() {
                    const e = new uf(null);
                    return e.setGeometries(this.geometries_), e.applyProperties(this), e;
                }
                closestPointXY(e, t, i, r) {
                    if (r < Ro(this.getExtent(), e, t)) return r;
                    const o = this.geometries_;
                    for (let s = 0, a = o.length; s < a; ++s) r = o[s].closestPointXY(e, t, i, r);
                    return r;
                }
                containsXY(e, t) {
                    const i = this.geometries_;
                    for (let r = 0, o = i.length; r < o; ++r) if (i[r].containsXY(e, t)) return !0;
                    return !1;
                }
                computeExtent(e) {
                    Fr(e);
                    const t = this.geometries_;
                    for (let i = 0, r = t.length; i < r; ++i) HM(e, t[i].getExtent());
                    return e;
                }
                getGeometries() {
                    return WA(this.geometries_);
                }
                getGeometriesArray() {
                    return this.geometries_;
                }
                getGeometriesArrayRecursive() {
                    let e = [];
                    const t = this.geometries_;
                    for (let i = 0, r = t.length; i < r; ++i)
                        t[i].getType() === this.getType() ? (e = e.concat(t[i].getGeometriesArrayRecursive())) : e.push(t[i]);
                    return e;
                }
                getSimplifiedGeometry(e) {
                    if (
                        (this.simplifiedGeometryRevision !== this.getRevision() &&
                            ((this.simplifiedGeometryMaxMinSquaredTolerance = 0), (this.simplifiedGeometryRevision = this.getRevision())),
                        e < 0 || (0 !== this.simplifiedGeometryMaxMinSquaredTolerance && e < this.simplifiedGeometryMaxMinSquaredTolerance))
                    )
                        return this;
                    const t = [],
                        i = this.geometries_;
                    let r = !1;
                    for (let o = 0, s = i.length; o < s; ++o) {
                        const a = i[o],
                            l = a.getSimplifiedGeometry(e);
                        t.push(l), l !== a && (r = !0);
                    }
                    if (r) {
                        const o = new uf(null);
                        return o.setGeometriesArray(t), o;
                    }
                    return (this.simplifiedGeometryMaxMinSquaredTolerance = e), this;
                }
                getType() {
                    return 'GeometryCollection';
                }
                intersectsExtent(e) {
                    const t = this.geometries_;
                    for (let i = 0, r = t.length; i < r; ++i) if (t[i].intersectsExtent(e)) return !0;
                    return !1;
                }
                isEmpty() {
                    return 0 === this.geometries_.length;
                }
                rotate(e, t) {
                    const i = this.geometries_;
                    for (let r = 0, o = i.length; r < o; ++r) i[r].rotate(e, t);
                    this.changed();
                }
                scale(e, t, i) {
                    i || (i = Ao(this.getExtent()));
                    const r = this.geometries_;
                    for (let o = 0, s = r.length; o < s; ++o) r[o].scale(e, t, i);
                    this.changed();
                }
                setGeometries(e) {
                    this.setGeometriesArray(WA(e));
                }
                setGeometriesArray(e) {
                    this.unlistenGeometriesChange_(), (this.geometries_ = e), this.listenGeometriesChange_(), this.changed();
                }
                applyTransform(e) {
                    const t = this.geometries_;
                    for (let i = 0, r = t.length; i < r; ++i) t[i].applyTransform(e);
                    this.changed();
                }
                translate(e, t) {
                    const i = this.geometries_;
                    for (let r = 0, o = i.length; r < o; ++r) i[r].translate(e, t);
                    this.changed();
                }
                disposeInternal() {
                    this.unlistenGeometriesChange_(), super.disposeInternal();
                }
            }
            function WA(n) {
                const e = [];
                for (let t = 0, i = n.length; t < i; ++t) e.push(n[t].clone());
                return e;
            }
            const SX = uf,
                MX = class TX {
                    constructor() {
                        (this.dataProjection = void 0), (this.defaultFeatureProjection = void 0), (this.supportedMediaTypes = null);
                    }
                    getReadOptions(e, t) {
                        if (t) {
                            let i = t.dataProjection ? Xe(t.dataProjection) : this.readProjection(e);
                            t.extent && i && 'tile-pixels' === i.getUnits() && ((i = Xe(i)), i.setWorldExtent(t.extent)),
                                (t = { dataProjection: i, featureProjection: t.featureProjection });
                        }
                        return this.adaptOptions(t);
                    }
                    adaptOptions(e) {
                        return Object.assign({ dataProjection: this.dataProjection, featureProjection: this.defaultFeatureProjection }, e);
                    }
                    getType() {
                        return J();
                    }
                    readFeature(e, t) {
                        return J();
                    }
                    readFeatures(e, t) {
                        return J();
                    }
                    readGeometry(e, t) {
                        return J();
                    }
                    readProjection(e) {
                        return J();
                    }
                    writeFeature(e, t) {
                        return J();
                    }
                    writeFeatures(e, t) {
                        return J();
                    }
                    writeGeometry(e, t) {
                        return J();
                    }
                };
            function $A(n, e, t) {
                const i = t ? Xe(t.featureProjection) : null,
                    r = t ? Xe(t.dataProjection) : null;
                let o;
                if (
                    ((o = i && r && !Fo(i, r) ? (e ? n.clone() : n).transform(e ? i : r, e ? r : i) : n), e && t && void 0 !== t.decimals)
                ) {
                    const s = Math.pow(10, t.decimals),
                        a = function (l) {
                            for (let c = 0, u = l.length; c < u; ++c) l[c] = Math.round(l[c] * s) / s;
                            return l;
                        };
                    o === n && (o = n.clone()), o.applyTransform(a);
                }
                return o;
            }
            function df(n) {
                return 'string' == typeof n ? JSON.parse(n) || null : null !== n ? n : null;
            }
            const AX = class RX extends MX {
                constructor() {
                    super();
                }
                getType() {
                    return 'json';
                }
                readFeature(e, t) {
                    return this.readFeatureFromObject(df(e), this.getReadOptions(e, t));
                }
                readFeatures(e, t) {
                    return this.readFeaturesFromObject(df(e), this.getReadOptions(e, t));
                }
                readFeatureFromObject(e, t) {
                    return J();
                }
                readFeaturesFromObject(e, t) {
                    return J();
                }
                readGeometry(e, t) {
                    return this.readGeometryFromObject(df(e), this.getReadOptions(e, t));
                }
                readGeometryFromObject(e, t) {
                    return J();
                }
                readProjection(e) {
                    return this.readProjectionFromObject(df(e));
                }
                readProjectionFromObject(e) {
                    return J();
                }
                writeFeature(e, t) {
                    return JSON.stringify(this.writeFeatureObject(e, t));
                }
                writeFeatureObject(e, t) {
                    return J();
                }
                writeFeatures(e, t) {
                    return JSON.stringify(this.writeFeaturesObject(e, t));
                }
                writeFeaturesObject(e, t) {
                    return J();
                }
                writeGeometry(e, t) {
                    return JSON.stringify(this.writeGeometryObject(e, t));
                }
                writeGeometryObject(e, t) {
                    return J();
                }
            };
            function YA(n, e, t, i, r, o, s) {
                let a, l;
                const c = (t - e) / i;
                if (1 === c) a = e;
                else if (2 === c) (a = e), (l = r);
                else if (0 !== c) {
                    let u = n[e],
                        d = n[e + 1],
                        h = 0;
                    const f = [0];
                    for (let g = e + i; g < t; g += i) {
                        const y = n[g],
                            _ = n[g + 1];
                        (h += Math.sqrt((y - u) * (y - u) + (_ - d) * (_ - d))), f.push(h), (u = y), (d = _);
                    }
                    const m = r * h,
                        p = (function w8(n, e, t) {
                            let i, r;
                            t = t || Mo;
                            let o = 0,
                                s = n.length,
                                a = !1;
                            for (; o < s; ) (i = o + ((s - o) >> 1)), (r = +t(n[i], e)), r < 0 ? (o = i + 1) : ((s = i), (a = !r));
                            return a ? o : ~o;
                        })(f, m);
                    p < 0 ? ((l = (m - f[-p - 2]) / (f[-p - 1] - f[-p - 2])), (a = e + (-p - 2) * i)) : (a = e + p * i);
                }
                (s = s > 1 ? s : 2), (o = o || new Array(s));
                for (let u = 0; u < s; ++u) o[u] = void 0 === a ? NaN : void 0 === l ? n[a + u] : Cn(n[a + u], n[a + i + u], l);
                return o;
            }
            function Hb(n, e, t, i, r, o) {
                if (t == e) return null;
                let s;
                if (r < n[e + i - 1]) return o ? ((s = n.slice(e, e + i)), (s[i - 1] = r), s) : null;
                if (n[t - 1] < r) return o ? ((s = n.slice(t - i, t)), (s[i - 1] = r), s) : null;
                if (r == n[e + i - 1]) return n.slice(e, e + i);
                let a = e / i,
                    l = t / i;
                for (; a < l; ) {
                    const h = (a + l) >> 1;
                    r < n[(h + 1) * i - 1] ? (l = h) : (a = h + 1);
                }
                const c = n[a * i - 1];
                if (r == c) return n.slice((a - 1) * i, (a - 1) * i + i);
                const d = (r - c) / (n[(a + 1) * i - 1] - c);
                s = [];
                for (let h = 0; h < i - 1; ++h) s.push(Cn(n[(a - 1) * i + h], n[a * i + h], d));
                return s.push(r), s;
            }
            class hf extends jo {
                constructor(e, t) {
                    super(),
                        (this.flatMidpoint_ = null),
                        (this.flatMidpointRevision_ = -1),
                        (this.maxDelta_ = -1),
                        (this.maxDeltaRevision_ = -1),
                        void 0 === t || Array.isArray(e[0]) ? this.setCoordinates(e, t) : this.setFlatCoordinates(t, e);
                }
                appendCoordinate(e) {
                    this.flatCoordinates ? Zi(this.flatCoordinates, e) : (this.flatCoordinates = e.slice()), this.changed();
                }
                clone() {
                    const e = new hf(this.flatCoordinates.slice(), this.layout);
                    return e.applyProperties(this), e;
                }
                closestPointXY(e, t, i, r) {
                    return r < Ro(this.getExtent(), e, t)
                        ? r
                        : (this.maxDeltaRevision_ != this.getRevision() &&
                              ((this.maxDelta_ = Math.sqrt(Yy(this.flatCoordinates, 0, this.flatCoordinates.length, this.stride, 0))),
                              (this.maxDeltaRevision_ = this.getRevision())),
                          Xy(this.flatCoordinates, 0, this.flatCoordinates.length, this.stride, this.maxDelta_, !1, e, t, i, r));
                }
                forEachSegment(e) {
                    return MR(this.flatCoordinates, 0, this.flatCoordinates.length, this.stride, e);
                }
                getCoordinateAtM(e, t) {
                    return 'XYM' != this.layout && 'XYZM' != this.layout
                        ? null
                        : Hb(this.flatCoordinates, 0, this.flatCoordinates.length, this.stride, e, (t = void 0 !== t && t));
                }
                getCoordinates() {
                    return Lr(this.flatCoordinates, 0, this.flatCoordinates.length, this.stride);
                }
                getCoordinateAt(e, t) {
                    return YA(this.flatCoordinates, 0, this.flatCoordinates.length, this.stride, e, t, this.stride);
                }
                getLength() {
                    return Ob(this.flatCoordinates, 0, this.flatCoordinates.length, this.stride);
                }
                getFlatMidpoint() {
                    return (
                        this.flatMidpointRevision_ != this.getRevision() &&
                            ((this.flatMidpoint_ = this.getCoordinateAt(0.5, this.flatMidpoint_)),
                            (this.flatMidpointRevision_ = this.getRevision())),
                        this.flatMidpoint_
                    );
                }
                getSimplifiedGeometryInternal(e) {
                    const t = [];
                    return (t.length = zh(this.flatCoordinates, 0, this.flatCoordinates.length, this.stride, e, t, 0)), new hf(t, 'XY');
                }
                getType() {
                    return 'LineString';
                }
                intersectsExtent(e) {
                    return $h(this.flatCoordinates, 0, this.flatCoordinates.length, this.stride, e);
                }
                setCoordinates(e, t) {
                    this.setLayout(t, e, 1),
                        this.flatCoordinates || (this.flatCoordinates = []),
                        (this.flatCoordinates.length = Uh(this.flatCoordinates, 0, e, this.stride)),
                        this.changed();
                }
            }
            const Ub = hf;
            class ff extends jo {
                constructor(e, t, i) {
                    if ((super(), (this.ends_ = []), (this.maxDelta_ = -1), (this.maxDeltaRevision_ = -1), Array.isArray(e[0])))
                        this.setCoordinates(e, t);
                    else if (void 0 !== t && i) this.setFlatCoordinates(t, e), (this.ends_ = i);
                    else {
                        let r = this.getLayout();
                        const o = e,
                            s = [],
                            a = [];
                        for (let l = 0, c = o.length; l < c; ++l) {
                            const u = o[l];
                            0 === l && (r = u.getLayout()), Zi(s, u.getFlatCoordinates()), a.push(s.length);
                        }
                        this.setFlatCoordinates(r, s), (this.ends_ = a);
                    }
                }
                appendLineString(e) {
                    this.flatCoordinates
                        ? Zi(this.flatCoordinates, e.getFlatCoordinates().slice())
                        : (this.flatCoordinates = e.getFlatCoordinates().slice()),
                        this.ends_.push(this.flatCoordinates.length),
                        this.changed();
                }
                clone() {
                    const e = new ff(this.flatCoordinates.slice(), this.layout, this.ends_.slice());
                    return e.applyProperties(this), e;
                }
                closestPointXY(e, t, i, r) {
                    return r < Ro(this.getExtent(), e, t)
                        ? r
                        : (this.maxDeltaRevision_ != this.getRevision() &&
                              ((this.maxDelta_ = Math.sqrt(qy(this.flatCoordinates, 0, this.ends_, this.stride, 0))),
                              (this.maxDeltaRevision_ = this.getRevision())),
                          Ky(this.flatCoordinates, 0, this.ends_, this.stride, this.maxDelta_, !1, e, t, i, r));
                }
                getCoordinateAtM(e, t, i) {
                    return ('XYM' != this.layout && 'XYZM' != this.layout) || 0 === this.flatCoordinates.length
                        ? null
                        : (function OX(n, e, t, i, r, o, s) {
                              if (s) return Hb(n, e, t[t.length - 1], i, r, o);
                              let a;
                              if (r < n[i - 1]) return o ? ((a = n.slice(0, i)), (a[i - 1] = r), a) : null;
                              if (n[n.length - 1] < r) return o ? ((a = n.slice(n.length - i)), (a[i - 1] = r), a) : null;
                              for (let l = 0, c = t.length; l < c; ++l) {
                                  const u = t[l];
                                  if (e != u) {
                                      if (r < n[e + i - 1]) return null;
                                      if (r <= n[u - 1]) return Hb(n, e, u, i, r, !1);
                                      e = u;
                                  }
                              }
                              return null;
                          })(this.flatCoordinates, 0, this.ends_, this.stride, e, (t = void 0 !== t && t), (i = void 0 !== i && i));
                }
                getCoordinates() {
                    return wc(this.flatCoordinates, 0, this.ends_, this.stride);
                }
                getEnds() {
                    return this.ends_;
                }
                getLineString(e) {
                    return e < 0 || this.ends_.length <= e
                        ? null
                        : new Ub(this.flatCoordinates.slice(0 === e ? 0 : this.ends_[e - 1], this.ends_[e]), this.layout);
                }
                getLineStrings() {
                    const e = this.flatCoordinates,
                        t = this.ends_,
                        i = this.layout,
                        r = [];
                    let o = 0;
                    for (let s = 0, a = t.length; s < a; ++s) {
                        const l = t[s],
                            c = new Ub(e.slice(o, l), i);
                        r.push(c), (o = l);
                    }
                    return r;
                }
                getFlatMidpoints() {
                    const e = [],
                        t = this.flatCoordinates;
                    let i = 0;
                    const r = this.ends_,
                        o = this.stride;
                    for (let s = 0, a = r.length; s < a; ++s) {
                        const l = r[s];
                        Zi(e, YA(t, i, l, o, 0.5)), (i = l);
                    }
                    return e;
                }
                getSimplifiedGeometryInternal(e) {
                    const t = [],
                        i = [];
                    return (
                        (t.length = (function CR(n, e, t, i, r, o, s, a) {
                            for (let l = 0, c = t.length; l < c; ++l) {
                                const u = t[l];
                                (s = zh(n, e, u, i, r, o, s)), a.push(s), (e = u);
                            }
                            return s;
                        })(this.flatCoordinates, 0, this.ends_, this.stride, e, t, 0, i)),
                        new ff(t, 'XY', i)
                    );
                }
                getType() {
                    return 'MultiLineString';
                }
                intersectsExtent(e) {
                    return (function Z5(n, e, t, i, r) {
                        for (let o = 0, s = t.length; o < s; ++o) {
                            if ($h(n, e, t[o], i, r)) return !0;
                            e = t[o];
                        }
                        return !1;
                    })(this.flatCoordinates, 0, this.ends_, this.stride, e);
                }
                setCoordinates(e, t) {
                    this.setLayout(t, e, 2), this.flatCoordinates || (this.flatCoordinates = []);
                    const i = Zy(this.flatCoordinates, 0, e, this.stride, this.ends_);
                    (this.flatCoordinates.length = 0 === i.length ? 0 : i[i.length - 1]), this.changed();
                }
            }
            const NX = ff;
            class zb extends jo {
                constructor(e, t) {
                    super(), t && !Array.isArray(e[0]) ? this.setFlatCoordinates(t, e) : this.setCoordinates(e, t);
                }
                appendPoint(e) {
                    this.flatCoordinates
                        ? Zi(this.flatCoordinates, e.getFlatCoordinates())
                        : (this.flatCoordinates = e.getFlatCoordinates().slice()),
                        this.changed();
                }
                clone() {
                    const e = new zb(this.flatCoordinates.slice(), this.layout);
                    return e.applyProperties(this), e;
                }
                closestPointXY(e, t, i, r) {
                    if (r < Ro(this.getExtent(), e, t)) return r;
                    const o = this.flatCoordinates,
                        s = this.stride;
                    for (let a = 0, l = o.length; a < l; a += s) {
                        const c = No(e, t, o[a], o[a + 1]);
                        if (c < r) {
                            r = c;
                            for (let u = 0; u < s; ++u) i[u] = o[a + u];
                            i.length = s;
                        }
                    }
                    return r;
                }
                getCoordinates() {
                    return Lr(this.flatCoordinates, 0, this.flatCoordinates.length, this.stride);
                }
                getPoint(e) {
                    return e < 0 || (this.flatCoordinates ? this.flatCoordinates.length / this.stride : 0) <= e
                        ? null
                        : new Wh(this.flatCoordinates.slice(e * this.stride, (e + 1) * this.stride), this.layout);
                }
                getPoints() {
                    const e = this.flatCoordinates,
                        t = this.layout,
                        i = this.stride,
                        r = [];
                    for (let o = 0, s = e.length; o < s; o += i) {
                        const a = new Wh(e.slice(o, o + i), t);
                        r.push(a);
                    }
                    return r;
                }
                getType() {
                    return 'MultiPoint';
                }
                intersectsExtent(e) {
                    const t = this.flatCoordinates,
                        i = this.stride;
                    for (let r = 0, o = t.length; r < o; r += i) if (My(e, t[r], t[r + 1])) return !0;
                    return !1;
                }
                setCoordinates(e, t) {
                    this.setLayout(t, e, 1),
                        this.flatCoordinates || (this.flatCoordinates = []),
                        (this.flatCoordinates.length = Uh(this.flatCoordinates, 0, e, this.stride)),
                        this.changed();
                }
            }
            const qA = zb;
            class mf extends jo {
                constructor(e, t, i) {
                    if (
                        (super(),
                        (this.endss_ = []),
                        (this.flatInteriorPointsRevision_ = -1),
                        (this.flatInteriorPoints_ = null),
                        (this.maxDelta_ = -1),
                        (this.maxDeltaRevision_ = -1),
                        (this.orientedRevision_ = -1),
                        (this.orientedFlatCoordinates_ = null),
                        !i && !Array.isArray(e[0]))
                    ) {
                        let r = this.getLayout();
                        const o = e,
                            s = [],
                            a = [];
                        for (let l = 0, c = o.length; l < c; ++l) {
                            const u = o[l];
                            0 === l && (r = u.getLayout());
                            const d = s.length,
                                h = u.getEnds();
                            for (let f = 0, m = h.length; f < m; ++f) h[f] += d;
                            Zi(s, u.getFlatCoordinates()), a.push(h);
                        }
                        (t = r), (e = s), (i = a);
                    }
                    void 0 !== t && i ? (this.setFlatCoordinates(t, e), (this.endss_ = i)) : this.setCoordinates(e, t);
                }
                appendPolygon(e) {
                    let t;
                    if (this.flatCoordinates) {
                        const i = this.flatCoordinates.length;
                        Zi(this.flatCoordinates, e.getFlatCoordinates()), (t = e.getEnds().slice());
                        for (let r = 0, o = t.length; r < o; ++r) t[r] += i;
                    } else (this.flatCoordinates = e.getFlatCoordinates().slice()), (t = e.getEnds().slice()), this.endss_.push();
                    this.endss_.push(t), this.changed();
                }
                clone() {
                    const e = this.endss_.length,
                        t = new Array(e);
                    for (let r = 0; r < e; ++r) t[r] = this.endss_[r].slice();
                    const i = new mf(this.flatCoordinates.slice(), this.layout, t);
                    return i.applyProperties(this), i;
                }
                closestPointXY(e, t, i, r) {
                    return r < Ro(this.getExtent(), e, t)
                        ? r
                        : (this.maxDeltaRevision_ != this.getRevision() &&
                              ((this.maxDelta_ = Math.sqrt(
                                  (function V5(n, e, t, i, r) {
                                      for (let o = 0, s = t.length; o < s; ++o) {
                                          const a = t[o];
                                          (r = qy(n, e, a, i, r)), (e = a[a.length - 1]);
                                      }
                                      return r;
                                  })(this.flatCoordinates, 0, this.endss_, this.stride, 0),
                              )),
                              (this.maxDeltaRevision_ = this.getRevision())),
                          (function H5(n, e, t, i, r, o, s, a, l, c, u) {
                              u = u || [NaN, NaN];
                              for (let d = 0, h = t.length; d < h; ++d) {
                                  const f = t[d];
                                  (c = Ky(n, e, f, i, r, o, s, a, l, c, u)), (e = f[f.length - 1]);
                              }
                              return c;
                          })(this.getOrientedFlatCoordinates(), 0, this.endss_, this.stride, this.maxDelta_, !0, e, t, i, r));
                }
                containsXY(e, t) {
                    return (function X5(n, e, t, i, r, o) {
                        if (0 === t.length) return !1;
                        for (let s = 0, a = t.length; s < a; ++s) {
                            const l = t[s];
                            if (eb(n, e, l, i, r, o)) return !0;
                            e = l[l.length - 1];
                        }
                        return !1;
                    })(this.getOrientedFlatCoordinates(), 0, this.endss_, this.stride, e, t);
                }
                getArea() {
                    return (function Y5(n, e, t, i) {
                        let r = 0;
                        for (let o = 0, s = t.length; o < s; ++o) {
                            const a = t[o];
                            (r += xR(n, e, a, i)), (e = a[a.length - 1]);
                        }
                        return r;
                    })(this.getOrientedFlatCoordinates(), 0, this.endss_, this.stride);
                }
                getCoordinates(e) {
                    let t;
                    return (
                        void 0 !== e
                            ? ((t = this.getOrientedFlatCoordinates().slice()), NR(t, 0, this.endss_, this.stride, e))
                            : (t = this.flatCoordinates),
                        Qy(t, 0, this.endss_, this.stride)
                    );
                }
                getEndss() {
                    return this.endss_;
                }
                getFlatInteriorPoints() {
                    if (this.flatInteriorPointsRevision_ != this.getRevision()) {
                        const e = (function PX(n, e, t, i) {
                            const r = [];
                            let o = [1 / 0, 1 / 0, -1 / 0, -1 / 0];
                            for (let s = 0, a = t.length; s < a; ++s) {
                                const l = t[s];
                                (o = VM(n, e, l[0], i)), r.push((o[0] + o[2]) / 2, (o[1] + o[3]) / 2), (e = l[l.length - 1]);
                            }
                            return r;
                        })(this.flatCoordinates, 0, this.endss_, this.stride);
                        (this.flatInteriorPoints_ = (function K5(n, e, t, i, r) {
                            let o = [];
                            for (let s = 0, a = t.length; s < a; ++s) {
                                const l = t[s];
                                (o = TR(n, e, l, i, r, 2 * s, o)), (e = l[l.length - 1]);
                            }
                            return o;
                        })(this.getOrientedFlatCoordinates(), 0, this.endss_, this.stride, e)),
                            (this.flatInteriorPointsRevision_ = this.getRevision());
                    }
                    return this.flatInteriorPoints_;
                }
                getInteriorPoints() {
                    return new qA(this.getFlatInteriorPoints().slice(), 'XYM');
                }
                getOrientedFlatCoordinates() {
                    if (this.orientedRevision_ != this.getRevision()) {
                        const e = this.flatCoordinates;
                        !(function e4(n, e, t, i, r) {
                            for (let o = 0, s = t.length; o < s; ++o) {
                                const a = t[o];
                                if (!OR(n, e, a, i, r)) return !1;
                                a.length && (e = a[a.length - 1]);
                            }
                            return !0;
                        })(e, 0, this.endss_, this.stride)
                            ? ((this.orientedFlatCoordinates_ = e.slice()),
                              (this.orientedFlatCoordinates_.length = NR(this.orientedFlatCoordinates_, 0, this.endss_, this.stride)))
                            : (this.orientedFlatCoordinates_ = e),
                            (this.orientedRevision_ = this.getRevision());
                    }
                    return this.orientedFlatCoordinates_;
                }
                getSimplifiedGeometryInternal(e) {
                    const t = [],
                        i = [];
                    return (
                        (t.length = (function $5(n, e, t, i, r, o, s, a) {
                            for (let l = 0, c = t.length; l < c; ++l) {
                                const u = t[l],
                                    d = [];
                                (s = DR(n, e, u, i, r, o, s, d)), a.push(d), (e = u[u.length - 1]);
                            }
                            return s;
                        })(this.flatCoordinates, 0, this.endss_, this.stride, Math.sqrt(e), t, 0, i)),
                        new mf(t, 'XY', i)
                    );
                }
                getPolygon(e) {
                    if (e < 0 || this.endss_.length <= e) return null;
                    let t;
                    if (0 === e) t = 0;
                    else {
                        const o = this.endss_[e - 1];
                        t = o[o.length - 1];
                    }
                    const i = this.endss_[e].slice(),
                        r = i[i.length - 1];
                    if (0 !== t) for (let o = 0, s = i.length; o < s; ++o) i[o] -= t;
                    return new Yh(this.flatCoordinates.slice(t, r), this.layout, i);
                }
                getPolygons() {
                    const e = this.layout,
                        t = this.flatCoordinates,
                        i = this.endss_,
                        r = [];
                    let o = 0;
                    for (let s = 0, a = i.length; s < a; ++s) {
                        const l = i[s].slice(),
                            c = l[l.length - 1];
                        if (0 !== o) for (let d = 0, h = l.length; d < h; ++d) l[d] -= o;
                        const u = new Yh(t.slice(o, c), e, l);
                        r.push(u), (o = c);
                    }
                    return r;
                }
                getType() {
                    return 'MultiPolygon';
                }
                intersectsExtent(e) {
                    return (function Q5(n, e, t, i, r) {
                        for (let o = 0, s = t.length; o < s; ++o) {
                            const a = t[o];
                            if (AR(n, e, a, i, r)) return !0;
                            e = a[a.length - 1];
                        }
                        return !1;
                    })(this.getOrientedFlatCoordinates(), 0, this.endss_, this.stride, e);
                }
                setCoordinates(e, t) {
                    this.setLayout(t, e, 3), this.flatCoordinates || (this.flatCoordinates = []);
                    const i = (function z5(n, e, t, i, r) {
                        r = r || [];
                        let o = 0;
                        for (let s = 0, a = t.length; s < a; ++s) {
                            const l = Zy(n, e, t[s], i, r[o]);
                            0 === l.length && (l[0] = e), (r[o++] = l), (e = l[l.length - 1]);
                        }
                        return (r.length = o), r;
                    })(this.flatCoordinates, 0, e, this.stride, this.endss_);
                    if (0 === i.length) this.flatCoordinates.length = 0;
                    else {
                        const r = i[i.length - 1];
                        this.flatCoordinates.length = 0 === r.length ? 0 : r[r.length - 1];
                    }
                    this.changed();
                }
            }
            const kX = mf;
            function Gb(n, e) {
                if (!n) return null;
                let t;
                switch (n.type) {
                    case 'Point':
                        t = (function BX(n) {
                            return new Wh(n.coordinates);
                        })(n);
                        break;
                    case 'LineString':
                        t = (function jX(n) {
                            return new Ub(n.coordinates);
                        })(n);
                        break;
                    case 'Polygon':
                        t = (function zX(n) {
                            return new Yh(n.coordinates);
                        })(n);
                        break;
                    case 'MultiPoint':
                        t = (function HX(n) {
                            return new qA(n.coordinates);
                        })(n);
                        break;
                    case 'MultiLineString':
                        t = (function VX(n) {
                            return new NX(n.coordinates);
                        })(n);
                        break;
                    case 'MultiPolygon':
                        t = (function UX(n) {
                            return new kX(n.coordinates);
                        })(n);
                        break;
                    case 'GeometryCollection':
                        t = (function LX(n, e) {
                            const t = n.geometries.map(function (i) {
                                return Gb(i, e);
                            });
                            return new SX(t);
                        })(n);
                        break;
                    default:
                        throw new Error('Unsupported GeoJSON type: ' + n.type);
                }
                return $A(t, !1, e);
            }
            function Wb(n, e) {
                const t = (n = $A(n, !0, e)).getType();
                let i;
                switch (t) {
                    case 'Point':
                        i = (function XX(n, e) {
                            return { type: 'Point', coordinates: n.getCoordinates() };
                        })(n);
                        break;
                    case 'LineString':
                        i = (function WX(n, e) {
                            return { type: 'LineString', coordinates: n.getCoordinates() };
                        })(n);
                        break;
                    case 'Polygon':
                        i = (function KX(n, e) {
                            let t;
                            return e && (t = e.rightHanded), { type: 'Polygon', coordinates: n.getCoordinates(t) };
                        })(n, e);
                        break;
                    case 'MultiPoint':
                        i = (function YX(n, e) {
                            return { type: 'MultiPoint', coordinates: n.getCoordinates() };
                        })(n);
                        break;
                    case 'MultiLineString':
                        i = (function $X(n, e) {
                            return { type: 'MultiLineString', coordinates: n.getCoordinates() };
                        })(n);
                        break;
                    case 'MultiPolygon':
                        i = (function qX(n, e) {
                            let t;
                            return e && (t = e.rightHanded), { type: 'MultiPolygon', coordinates: n.getCoordinates(t) };
                        })(n, e);
                        break;
                    case 'GeometryCollection':
                        i = (function GX(n, e) {
                            return (
                                delete (e = Object.assign({}, e)).featureProjection,
                                {
                                    type: 'GeometryCollection',
                                    geometries: n.getGeometriesArray().map(function (i) {
                                        return Wb(i, e);
                                    }),
                                }
                            );
                        })(n, e);
                        break;
                    case 'Circle':
                        i = { type: 'GeometryCollection', geometries: [] };
                        break;
                    default:
                        throw new Error('Unsupported geometry type: ' + t);
                }
                return i;
            }
            const ZX = class FX extends AX {
                constructor(e) {
                    (e = e || {}),
                        super(),
                        (this.dataProjection = Xe(e.dataProjection ? e.dataProjection : 'EPSG:4326')),
                        e.featureProjection && (this.defaultFeatureProjection = Xe(e.featureProjection)),
                        (this.geometryName_ = e.geometryName),
                        (this.extractGeometryName_ = e.extractGeometryName),
                        (this.supportedMediaTypes = ['application/geo+json', 'application/vnd.geo+json']);
                }
                readFeatureFromObject(e, t) {
                    let i = null;
                    i = 'Feature' === e.type ? e : { type: 'Feature', geometry: e, properties: null };
                    const r = Gb(i.geometry, t),
                        o = new xX();
                    return (
                        this.geometryName_
                            ? o.setGeometryName(this.geometryName_)
                            : this.extractGeometryName_ && 'geometry_name' in i !== void 0 && o.setGeometryName(i.geometry_name),
                        o.setGeometry(r),
                        'id' in i && o.setId(i.id),
                        i.properties && o.setProperties(i.properties, !0),
                        o
                    );
                }
                readFeaturesFromObject(e, t) {
                    let r = null;
                    if ('FeatureCollection' === e.type) {
                        r = [];
                        const s = e.features;
                        for (let a = 0, l = s.length; a < l; ++a) r.push(this.readFeatureFromObject(s[a], t));
                    } else r = [this.readFeatureFromObject(e, t)];
                    return r;
                }
                readGeometryFromObject(e, t) {
                    return Gb(e, t);
                }
                readProjectionFromObject(e) {
                    const t = e.crs;
                    let i;
                    return (
                        t
                            ? 'name' == t.type
                                ? (i = Xe(t.properties.name))
                                : 'EPSG' === t.type
                                  ? (i = Xe('EPSG:' + t.properties.code))
                                  : pe(!1, 36)
                            : (i = this.dataProjection),
                        i
                    );
                }
                writeFeatureObject(e, t) {
                    t = this.adaptOptions(t);
                    const i = { type: 'Feature', geometry: null, properties: null },
                        r = e.getId();
                    if ((void 0 !== r && (i.id = r), !e.hasProperties())) return i;
                    const o = e.getProperties(),
                        s = e.getGeometry();
                    return s && ((i.geometry = Wb(s, t)), delete o[e.getGeometryName()]), ma(o) || (i.properties = o), i;
                }
                writeFeaturesObject(e, t) {
                    t = this.adaptOptions(t);
                    const i = [];
                    for (let r = 0, o = e.length; r < o; ++r) i.push(this.writeFeatureObject(e[r], t));
                    return { type: 'FeatureCollection', features: i };
                }
                writeGeometryObject(e, t) {
                    return Wb(e, this.adaptOptions(t));
                }
            };
            let XA = (() => {
                class n {
                    constructor() {
                        (this.tileSources = [
                            { name: 'None', source: null },
                            { name: 'OSM', source: new pX() },
                        ]),
                            (this.selectedTileSource = this.tileSources[1]),
                            (this.vectorSources = []),
                            (this.extent = [813079.7791264898, 5929220.284081122, 848966.9639063801, 5936863.986909639]),
                            (this.tileLayer = new HY()),
                            (this.vectorLayer = new kq()),
                            (this.map = new yY({
                                interactions: KR().extend([new XR()]),
                                layers: [this.tileLayer, this.vectorLayer],
                                view: new Si({ constrainResolution: !0 }),
                                controls: zR().extend([new UR(), new Lq({ extent: this.extent }), new Hq()]),
                            }));
                        const t = new DX({ formatConstructors: [ZX] });
                        t.on('addfeatures', (i) => {
                            const o = new vX({ features: i.features ?? [] }),
                                s = { name: i.file.name, source: o };
                            this.vectorSources.push(s), this.setVectorSource(s);
                        }),
                            this.map.addInteraction(t);
                    }
                    updateView(t = 2, i = [0, 0]) {
                        this.map.getView().setZoom(t),
                            this.map.getView().setCenter(
                                (function D5(n, e) {
                                    return lR(), Ec(n, 'EPSG:4326', void 0 !== e ? e : 'EPSG:3857');
                                })(i),
                            );
                    }
                    updateSize(t = 'map') {
                        this.map.setTarget(t), this.map.updateSize();
                    }
                    setTileSource(t = this.selectedTileSource) {
                        (this.selectedTileSource = t), this.tileLayer.setSource(t.source);
                    }
                    setVectorSource(t) {
                        this.vectorLayer.setSource(t.source), this.map.getView().fit(this.vectorLayer.getSource().getExtent());
                    }
                    static #e = (this.ɵfac = function (i) {
                        return new (i || n)();
                    });
                    static #t = (this.ɵprov = j({ token: n, factory: n.ɵfac, providedIn: 'root' }));
                }
                return n;
            })();
            const QX = ['addListener', 'removeListener'],
                JX = ['addEventListener', 'removeEventListener'],
                eK = ['on', 'off'];
            function $b(n, e, t, i) {
                if ((Te(t) && ((i = t), (t = void 0)), i)) return $b(n, e, t).pipe(Q_(i));
                const [r, o] = (function iK(n) {
                    return Te(n.addEventListener) && Te(n.removeEventListener);
                })(n)
                    ? JX.map((s) => (a) => n[s](e, a, t))
                    : (function tK(n) {
                            return Te(n.addListener) && Te(n.removeListener);
                        })(n)
                      ? QX.map(KA(n, e))
                      : (function nK(n) {
                              return Te(n.on) && Te(n.off);
                          })(n)
                        ? eK.map(KA(n, e))
                        : [];
                if (!r && Z_(n)) return rc((s) => $b(s, e, t))(cn(n));
                if (!r) throw new TypeError('Invalid event target');
                return new ht((s) => {
                    const a = (...l) => s.next(1 < l.length ? l : l[0]);
                    return r(a), () => o(a);
                });
            }
            function KA(n, e) {
                return (t) => (i) => n[t](e, i);
            }
            const Fc = {
                schedule(n) {
                    let e = requestAnimationFrame,
                        t = cancelAnimationFrame;
                    const { delegate: i } = Fc;
                    i && ((e = i.requestAnimationFrame), (t = i.cancelAnimationFrame));
                    const r = e((o) => {
                        (t = void 0), n(o);
                    });
                    return new xt(() => t?.(r));
                },
                requestAnimationFrame(...n) {
                    const { delegate: e } = Fc;
                    return (e?.requestAnimationFrame || requestAnimationFrame)(...n);
                },
                cancelAnimationFrame(...n) {
                    const { delegate: e } = Fc;
                    return (e?.cancelAnimationFrame || cancelAnimationFrame)(...n);
                },
                delegate: void 0,
            };
            new (class oK extends my {
                flush(e) {
                    this._active = !0;
                    const t = this._scheduled;
                    this._scheduled = void 0;
                    const { actions: i } = this;
                    let r;
                    e = e || i.shift();
                    do {
                        if ((r = e.execute(e.state, e.delay))) break;
                    } while ((e = i[0]) && e.id === t && i.shift());
                    if (((this._active = !1), r)) {
                        for (; (e = i[0]) && e.id === t && i.shift(); ) e.unsubscribe();
                        throw r;
                    }
                }
            })(
                class rK extends fy {
                    constructor(e, t) {
                        super(e, t), (this.scheduler = e), (this.work = t);
                    }
                    requestAsyncId(e, t, i = 0) {
                        return null !== i && i > 0
                            ? super.requestAsyncId(e, t, i)
                            : (e.actions.push(this), e._scheduled || (e._scheduled = Fc.requestAnimationFrame(() => e.flush(void 0))));
                    }
                    recycleAsyncId(e, t, i = 0) {
                        var r;
                        if (null != i ? i > 0 : this.delay > 0) return super.recycleAsyncId(e, t, i);
                        const { actions: o } = e;
                        null != t &&
                            (null === (r = o[o.length - 1]) || void 0 === r ? void 0 : r.id) !== t &&
                            (Fc.cancelAnimationFrame(t), (e._scheduled = void 0));
                    }
                },
            );
            let Yb,
                aK = 1;
            const pf = {};
            function ZA(n) {
                return n in pf && (delete pf[n], !0);
            }
            const lK = {
                    setImmediate(n) {
                        const e = aK++;
                        return (pf[e] = !0), Yb || (Yb = Promise.resolve()), Yb.then(() => ZA(e) && n()), e;
                    },
                    clearImmediate(n) {
                        ZA(n);
                    },
                },
                { setImmediate: cK, clearImmediate: uK } = lK,
                gf = {
                    setImmediate(...n) {
                        const { delegate: e } = gf;
                        return (e?.setImmediate || cK)(...n);
                    },
                    clearImmediate(n) {
                        const { delegate: e } = gf;
                        return (e?.clearImmediate || uK)(n);
                    },
                    delegate: void 0,
                };
            new (class hK extends my {
                flush(e) {
                    this._active = !0;
                    const t = this._scheduled;
                    this._scheduled = void 0;
                    const { actions: i } = this;
                    let r;
                    e = e || i.shift();
                    do {
                        if ((r = e.execute(e.state, e.delay))) break;
                    } while ((e = i[0]) && e.id === t && i.shift());
                    if (((this._active = !1), r)) {
                        for (; (e = i[0]) && e.id === t && i.shift(); ) e.unsubscribe();
                        throw r;
                    }
                }
            })(
                class dK extends fy {
                    constructor(e, t) {
                        super(e, t), (this.scheduler = e), (this.work = t);
                    }
                    requestAsyncId(e, t, i = 0) {
                        return null !== i && i > 0
                            ? super.requestAsyncId(e, t, i)
                            : (e.actions.push(this), e._scheduled || (e._scheduled = gf.setImmediate(e.flush.bind(e, void 0))));
                    }
                    recycleAsyncId(e, t, i = 0) {
                        var r;
                        if (null != i ? i > 0 : this.delay > 0) return super.recycleAsyncId(e, t, i);
                        const { actions: o } = e;
                        null != t &&
                            (null === (r = o[o.length - 1]) || void 0 === r ? void 0 : r.id) !== t &&
                            (gf.clearImmediate(t), e._scheduled === t && (e._scheduled = void 0));
                    }
                },
            );
            function QA(n, e = py) {
                return (function mK(n) {
                    return Vt((e, t) => {
                        let i = !1,
                            r = null,
                            o = null,
                            s = !1;
                        const a = () => {
                                if ((o?.unsubscribe(), (o = null), i)) {
                                    i = !1;
                                    const c = r;
                                    (r = null), t.next(c);
                                }
                                s && t.complete();
                            },
                            l = () => {
                                (o = null), s && t.complete();
                            };
                        e.subscribe(
                            Ht(
                                t,
                                (c) => {
                                    (i = !0), (r = c), o || cn(n(c)).subscribe((o = Ht(t, a, l)));
                                },
                                () => {
                                    (s = !0), (!i || !o || o.closed) && t.complete();
                                },
                            ),
                        );
                    });
                })(() =>
                    (function gK(n = 0, e, t = x$) {
                        let i = -1;
                        return (
                            null != e && (sT(e) ? (t = e) : (i = e)),
                            new ht((r) => {
                                let o = (function pK(n) {
                                    return n instanceof Date && !isNaN(n);
                                })(n)
                                    ? +n - t.now()
                                    : n;
                                o < 0 && (o = 0);
                                let s = 0;
                                return t.schedule(function () {
                                    r.closed || (r.next(s++), 0 <= i ? this.schedule(void 0, i) : r.complete());
                                }, o);
                            })
                        );
                    })(n, e),
                );
            }
            let yK = (() => {
                    class n {
                        constructor(t, i, r) {
                            (this._ngZone = t),
                                (this._platform = i),
                                (this._scrolled = new et()),
                                (this._globalSubscription = null),
                                (this._scrolledCount = 0),
                                (this.scrollContainers = new Map()),
                                (this._document = r);
                        }
                        register(t) {
                            this.scrollContainers.has(t) ||
                                this.scrollContainers.set(
                                    t,
                                    t.elementScrolled().subscribe(() => this._scrolled.next(t)),
                                );
                        }
                        deregister(t) {
                            const i = this.scrollContainers.get(t);
                            i && (i.unsubscribe(), this.scrollContainers.delete(t));
                        }
                        scrolled(t = 20) {
                            return this._platform.isBrowser
                                ? new ht((i) => {
                                      this._globalSubscription || this._addGlobalListener();
                                      const r = t > 0 ? this._scrolled.pipe(QA(t)).subscribe(i) : this._scrolled.subscribe(i);
                                      return (
                                          this._scrolledCount++,
                                          () => {
                                              r.unsubscribe(), this._scrolledCount--, this._scrolledCount || this._removeGlobalListener();
                                          }
                                      );
                                  })
                                : qi();
                        }
                        ngOnDestroy() {
                            this._removeGlobalListener(),
                                this.scrollContainers.forEach((t, i) => this.deregister(i)),
                                this._scrolled.complete();
                        }
                        ancestorScrolled(t, i) {
                            const r = this.getAncestorScrollContainers(t);
                            return this.scrolled(i).pipe(Xi((o) => !o || r.indexOf(o) > -1));
                        }
                        getAncestorScrollContainers(t) {
                            const i = [];
                            return (
                                this.scrollContainers.forEach((r, o) => {
                                    this._scrollableContainsElement(o, t) && i.push(o);
                                }),
                                i
                            );
                        }
                        _getWindow() {
                            return this._document.defaultView || window;
                        }
                        _scrollableContainsElement(t, i) {
                            let r = ca(i),
                                o = t.getElementRef().nativeElement;
                            do {
                                if (r == o) return !0;
                            } while ((r = r.parentElement));
                            return !1;
                        }
                        _addGlobalListener() {
                            this._globalSubscription = this._ngZone.runOutsideAngular(() =>
                                $b(this._getWindow().document, 'scroll').subscribe(() => this._scrolled.next()),
                            );
                        }
                        _removeGlobalListener() {
                            this._globalSubscription && (this._globalSubscription.unsubscribe(), (this._globalSubscription = null));
                        }
                        static #e = (this.ɵfac = function (i) {
                            return new (i || n)(T(ce), T(Xt), T(De, 8));
                        });
                        static #t = (this.ɵprov = j({ token: n, factory: n.ɵfac, providedIn: 'root' }));
                    }
                    return n;
                })(),
                JA = (() => {
                    class n {
                        constructor(t, i, r) {
                            (this._platform = t),
                                (this._change = new et()),
                                (this._changeListener = (o) => {
                                    this._change.next(o);
                                }),
                                (this._document = r),
                                i.runOutsideAngular(() => {
                                    if (t.isBrowser) {
                                        const o = this._getWindow();
                                        o.addEventListener('resize', this._changeListener),
                                            o.addEventListener('orientationchange', this._changeListener);
                                    }
                                    this.change().subscribe(() => (this._viewportSize = null));
                                });
                        }
                        ngOnDestroy() {
                            if (this._platform.isBrowser) {
                                const t = this._getWindow();
                                t.removeEventListener('resize', this._changeListener),
                                    t.removeEventListener('orientationchange', this._changeListener);
                            }
                            this._change.complete();
                        }
                        getViewportSize() {
                            this._viewportSize || this._updateViewportSize();
                            const t = { width: this._viewportSize.width, height: this._viewportSize.height };
                            return this._platform.isBrowser || (this._viewportSize = null), t;
                        }
                        getViewportRect() {
                            const t = this.getViewportScrollPosition(),
                                { width: i, height: r } = this.getViewportSize();
                            return { top: t.top, left: t.left, bottom: t.top + r, right: t.left + i, height: r, width: i };
                        }
                        getViewportScrollPosition() {
                            if (!this._platform.isBrowser) return { top: 0, left: 0 };
                            const t = this._document,
                                i = this._getWindow(),
                                r = t.documentElement,
                                o = r.getBoundingClientRect();
                            return {
                                top: -o.top || t.body.scrollTop || i.scrollY || r.scrollTop || 0,
                                left: -o.left || t.body.scrollLeft || i.scrollX || r.scrollLeft || 0,
                            };
                        }
                        change(t = 20) {
                            return t > 0 ? this._change.pipe(QA(t)) : this._change;
                        }
                        _getWindow() {
                            return this._document.defaultView || window;
                        }
                        _updateViewportSize() {
                            const t = this._getWindow();
                            this._viewportSize = this._platform.isBrowser
                                ? { width: t.innerWidth, height: t.innerHeight }
                                : { width: 0, height: 0 };
                        }
                        static #e = (this.ɵfac = function (i) {
                            return new (i || n)(T(Xt), T(ce), T(De, 8));
                        });
                        static #t = (this.ɵprov = j({ token: n, factory: n.ɵfac, providedIn: 'root' }));
                    }
                    return n;
                })();
            const vK = new L('cdk-dir-doc', {
                    providedIn: 'root',
                    factory: function EK() {
                        return $(De);
                    },
                }),
                wK = /^(ar|ckb|dv|he|iw|fa|nqo|ps|sd|ug|ur|yi|.*[-_](Adlm|Arab|Hebr|Nkoo|Rohg|Thaa))(?!.*[-_](Latn|Cyrl)($|-|_))($|-|_)/i;
            let qb = (() => {
                class n {
                    constructor(t) {
                        (this.value = 'ltr'),
                            (this.change = new en()),
                            t &&
                                (this.value = (function CK(n) {
                                    const e = n?.toLowerCase() || '';
                                    return 'auto' === e && typeof navigator < 'u' && navigator?.language
                                        ? wK.test(navigator.language)
                                            ? 'rtl'
                                            : 'ltr'
                                        : 'rtl' === e
                                          ? 'rtl'
                                          : 'ltr';
                                })((t.body ? t.body.dir : null) || (t.documentElement ? t.documentElement.dir : null) || 'ltr'));
                    }
                    ngOnDestroy() {
                        this.change.complete();
                    }
                    static #e = (this.ɵfac = function (i) {
                        return new (i || n)(T(vK, 8));
                    });
                    static #t = (this.ɵprov = j({ token: n, factory: n.ɵfac, providedIn: 'root' }));
                }
                return n;
            })();
            class Xb {
                attach(e) {
                    return (this._attachedHost = e), e.attach(this);
                }
                detach() {
                    let e = this._attachedHost;
                    null != e && ((this._attachedHost = null), e.detach());
                }
                get isAttached() {
                    return null != this._attachedHost;
                }
                setAttachedHost(e) {
                    this._attachedHost = e;
                }
            }
            class Kb extends Xb {
                constructor(e, t, i, r, o) {
                    super(),
                        (this.component = e),
                        (this.viewContainerRef = t),
                        (this.injector = i),
                        (this.componentFactoryResolver = r),
                        (this.projectableNodes = o);
                }
            }
            class eO extends Xb {
                constructor(e, t, i, r) {
                    super(), (this.templateRef = e), (this.viewContainerRef = t), (this.context = i), (this.injector = r);
                }
                get origin() {
                    return this.templateRef.elementRef;
                }
                attach(e, t = this.context) {
                    return (this.context = t), super.attach(e);
                }
                detach() {
                    return (this.context = void 0), super.detach();
                }
            }
            class DK extends Xb {
                constructor(e) {
                    super(), (this.element = e instanceof Tt ? e.nativeElement : e);
                }
            }
            class Zb {
                constructor() {
                    (this._isDisposed = !1), (this.attachDomPortal = null);
                }
                hasAttached() {
                    return !!this._attachedPortal;
                }
                attach(e) {
                    return e instanceof Kb
                        ? ((this._attachedPortal = e), this.attachComponentPortal(e))
                        : e instanceof eO
                          ? ((this._attachedPortal = e), this.attachTemplatePortal(e))
                          : this.attachDomPortal && e instanceof DK
                            ? ((this._attachedPortal = e), this.attachDomPortal(e))
                            : void 0;
                }
                detach() {
                    this._attachedPortal && (this._attachedPortal.setAttachedHost(null), (this._attachedPortal = null)),
                        this._invokeDisposeFn();
                }
                dispose() {
                    this.hasAttached() && this.detach(), this._invokeDisposeFn(), (this._isDisposed = !0);
                }
                setDisposeFn(e) {
                    this._disposeFn = e;
                }
                _invokeDisposeFn() {
                    this._disposeFn && (this._disposeFn(), (this._disposeFn = null));
                }
            }
            class IK extends Zb {
                constructor(e, t, i, r, o) {
                    super(),
                        (this.outletElement = e),
                        (this._componentFactoryResolver = t),
                        (this._appRef = i),
                        (this._defaultInjector = r),
                        (this.attachDomPortal = (s) => {
                            const a = s.element,
                                l = this._document.createComment('dom-portal');
                            a.parentNode.insertBefore(l, a),
                                this.outletElement.appendChild(a),
                                (this._attachedPortal = s),
                                super.setDisposeFn(() => {
                                    l.parentNode && l.parentNode.replaceChild(a, l);
                                });
                        }),
                        (this._document = o);
                }
                attachComponentPortal(e) {
                    const i = (e.componentFactoryResolver || this._componentFactoryResolver).resolveComponentFactory(e.component);
                    let r;
                    return (
                        e.viewContainerRef
                            ? ((r = e.viewContainerRef.createComponent(
                                  i,
                                  e.viewContainerRef.length,
                                  e.injector || e.viewContainerRef.injector,
                                  e.projectableNodes || void 0,
                              )),
                              this.setDisposeFn(() => r.destroy()))
                            : ((r = i.create(e.injector || this._defaultInjector || Mt.NULL)),
                              this._appRef.attachView(r.hostView),
                              this.setDisposeFn(() => {
                                  this._appRef.viewCount > 0 && this._appRef.detachView(r.hostView), r.destroy();
                              })),
                        this.outletElement.appendChild(this._getComponentRootNode(r)),
                        (this._attachedPortal = e),
                        r
                    );
                }
                attachTemplatePortal(e) {
                    let t = e.viewContainerRef,
                        i = t.createEmbeddedView(e.templateRef, e.context, { injector: e.injector });
                    return (
                        i.rootNodes.forEach((r) => this.outletElement.appendChild(r)),
                        i.detectChanges(),
                        this.setDisposeFn(() => {
                            let r = t.indexOf(i);
                            -1 !== r && t.remove(r);
                        }),
                        (this._attachedPortal = e),
                        i
                    );
                }
                dispose() {
                    super.dispose(), this.outletElement.remove();
                }
                _getComponentRootNode(e) {
                    return e.hostView.rootNodes[0];
                }
            }
            let Qb = (() => {
                class n extends Zb {
                    constructor(t, i, r) {
                        super(),
                            (this._componentFactoryResolver = t),
                            (this._viewContainerRef = i),
                            (this._isInitialized = !1),
                            (this.attached = new en()),
                            (this.attachDomPortal = (o) => {
                                const s = o.element,
                                    a = this._document.createComment('dom-portal');
                                o.setAttachedHost(this),
                                    s.parentNode.insertBefore(a, s),
                                    this._getRootNode().appendChild(s),
                                    (this._attachedPortal = o),
                                    super.setDisposeFn(() => {
                                        a.parentNode && a.parentNode.replaceChild(s, a);
                                    });
                            }),
                            (this._document = r);
                    }
                    get portal() {
                        return this._attachedPortal;
                    }
                    set portal(t) {
                        (this.hasAttached() && !t && !this._isInitialized) ||
                            (this.hasAttached() && super.detach(), t && super.attach(t), (this._attachedPortal = t || null));
                    }
                    get attachedRef() {
                        return this._attachedRef;
                    }
                    ngOnInit() {
                        this._isInitialized = !0;
                    }
                    ngOnDestroy() {
                        super.dispose(), (this._attachedRef = this._attachedPortal = null);
                    }
                    attachComponentPortal(t) {
                        t.setAttachedHost(this);
                        const i = null != t.viewContainerRef ? t.viewContainerRef : this._viewContainerRef,
                            o = (t.componentFactoryResolver || this._componentFactoryResolver).resolveComponentFactory(t.component),
                            s = i.createComponent(o, i.length, t.injector || i.injector, t.projectableNodes || void 0);
                        return (
                            i !== this._viewContainerRef && this._getRootNode().appendChild(s.hostView.rootNodes[0]),
                            super.setDisposeFn(() => s.destroy()),
                            (this._attachedPortal = t),
                            (this._attachedRef = s),
                            this.attached.emit(s),
                            s
                        );
                    }
                    attachTemplatePortal(t) {
                        t.setAttachedHost(this);
                        const i = this._viewContainerRef.createEmbeddedView(t.templateRef, t.context, { injector: t.injector });
                        return (
                            super.setDisposeFn(() => this._viewContainerRef.clear()),
                            (this._attachedPortal = t),
                            (this._attachedRef = i),
                            this.attached.emit(i),
                            i
                        );
                    }
                    _getRootNode() {
                        const t = this._viewContainerRef.element.nativeElement;
                        return t.nodeType === t.ELEMENT_NODE ? t : t.parentNode;
                    }
                    static #e = (this.ɵfac = function (i) {
                        return new (i || n)(P(Fs), P(qn), P(De));
                    });
                    static #t = (this.ɵdir = zt({
                        type: n,
                        selectors: [['', 'cdkPortalOutlet', '']],
                        inputs: { portal: [st.None, 'cdkPortalOutlet', 'portal'] },
                        outputs: { attached: 'attached' },
                        exportAs: ['cdkPortalOutlet'],
                        standalone: !0,
                        features: [Dr],
                    }));
                }
                return n;
            })();
            function tO(n = 1 / 0) {
                return rc(ns, n);
            }
            function nO(...n) {
                const e = nc(n),
                    t = (function D3(n, e) {
                        return 'number' == typeof $_(n) ? n.pop() : e;
                    })(n, 1 / 0),
                    i = n;
                return i.length ? (1 === i.length ? cn(i[0]) : tO(t)(ic(i, e))) : ey;
            }
            const iO = r$();
            class xK {
                constructor(e, t) {
                    (this._viewportRuler = e),
                        (this._previousHTMLStyles = { top: '', left: '' }),
                        (this._isEnabled = !1),
                        (this._document = t);
                }
                attach() {}
                enable() {
                    if (this._canBeEnabled()) {
                        const e = this._document.documentElement;
                        (this._previousScrollPosition = this._viewportRuler.getViewportScrollPosition()),
                            (this._previousHTMLStyles.left = e.style.left || ''),
                            (this._previousHTMLStyles.top = e.style.top || ''),
                            (e.style.left = pt(-this._previousScrollPosition.left)),
                            (e.style.top = pt(-this._previousScrollPosition.top)),
                            e.classList.add('cdk-global-scrollblock'),
                            (this._isEnabled = !0);
                    }
                }
                disable() {
                    if (this._isEnabled) {
                        const e = this._document.documentElement,
                            i = e.style,
                            r = this._document.body.style,
                            o = i.scrollBehavior || '',
                            s = r.scrollBehavior || '';
                        (this._isEnabled = !1),
                            (i.left = this._previousHTMLStyles.left),
                            (i.top = this._previousHTMLStyles.top),
                            e.classList.remove('cdk-global-scrollblock'),
                            iO && (i.scrollBehavior = r.scrollBehavior = 'auto'),
                            window.scroll(this._previousScrollPosition.left, this._previousScrollPosition.top),
                            iO && ((i.scrollBehavior = o), (r.scrollBehavior = s));
                    }
                }
                _canBeEnabled() {
                    if (this._document.documentElement.classList.contains('cdk-global-scrollblock') || this._isEnabled) return !1;
                    const t = this._document.body,
                        i = this._viewportRuler.getViewportSize();
                    return t.scrollHeight > i.height || t.scrollWidth > i.width;
                }
            }
            class SK {
                constructor(e, t, i, r) {
                    (this._scrollDispatcher = e),
                        (this._ngZone = t),
                        (this._viewportRuler = i),
                        (this._config = r),
                        (this._scrollSubscription = null),
                        (this._detach = () => {
                            this.disable(), this._overlayRef.hasAttached() && this._ngZone.run(() => this._overlayRef.detach());
                        });
                }
                attach(e) {
                    this._overlayRef = e;
                }
                enable() {
                    if (this._scrollSubscription) return;
                    const e = this._scrollDispatcher
                        .scrolled(0)
                        .pipe(Xi((t) => !t || !this._overlayRef.overlayElement.contains(t.getElementRef().nativeElement)));
                    this._config && this._config.threshold && this._config.threshold > 1
                        ? ((this._initialScrollPosition = this._viewportRuler.getViewportScrollPosition().top),
                          (this._scrollSubscription = e.subscribe(() => {
                              const t = this._viewportRuler.getViewportScrollPosition().top;
                              Math.abs(t - this._initialScrollPosition) > this._config.threshold
                                  ? this._detach()
                                  : this._overlayRef.updatePosition();
                          })))
                        : (this._scrollSubscription = e.subscribe(this._detach));
                }
                disable() {
                    this._scrollSubscription && (this._scrollSubscription.unsubscribe(), (this._scrollSubscription = null));
                }
                detach() {
                    this.disable(), (this._overlayRef = null);
                }
            }
            class rO {
                enable() {}
                disable() {}
                attach() {}
            }
            function Jb(n, e) {
                return e.some((t) => n.bottom < t.top || n.top > t.bottom || n.right < t.left || n.left > t.right);
            }
            function oO(n, e) {
                return e.some((t) => n.top < t.top || n.bottom > t.bottom || n.left < t.left || n.right > t.right);
            }
            class TK {
                constructor(e, t, i, r) {
                    (this._scrollDispatcher = e),
                        (this._viewportRuler = t),
                        (this._ngZone = i),
                        (this._config = r),
                        (this._scrollSubscription = null);
                }
                attach(e) {
                    this._overlayRef = e;
                }
                enable() {
                    this._scrollSubscription ||
                        (this._scrollSubscription = this._scrollDispatcher
                            .scrolled(this._config ? this._config.scrollThrottle : 0)
                            .subscribe(() => {
                                if ((this._overlayRef.updatePosition(), this._config && this._config.autoClose)) {
                                    const t = this._overlayRef.overlayElement.getBoundingClientRect(),
                                        { width: i, height: r } = this._viewportRuler.getViewportSize();
                                    Jb(t, [{ width: i, height: r, bottom: r, right: i, top: 0, left: 0 }]) &&
                                        (this.disable(), this._ngZone.run(() => this._overlayRef.detach()));
                                }
                            }));
                }
                disable() {
                    this._scrollSubscription && (this._scrollSubscription.unsubscribe(), (this._scrollSubscription = null));
                }
                detach() {
                    this.disable(), (this._overlayRef = null);
                }
            }
            let MK = (() => {
                class n {
                    constructor(t, i, r, o) {
                        (this._scrollDispatcher = t),
                            (this._viewportRuler = i),
                            (this._ngZone = r),
                            (this.noop = () => new rO()),
                            (this.close = (s) => new SK(this._scrollDispatcher, this._ngZone, this._viewportRuler, s)),
                            (this.block = () => new xK(this._viewportRuler, this._document)),
                            (this.reposition = (s) => new TK(this._scrollDispatcher, this._viewportRuler, this._ngZone, s)),
                            (this._document = o);
                    }
                    static #e = (this.ɵfac = function (i) {
                        return new (i || n)(T(yK), T(JA), T(ce), T(De));
                    });
                    static #t = (this.ɵprov = j({ token: n, factory: n.ɵfac, providedIn: 'root' }));
                }
                return n;
            })();
            class sO {
                constructor(e) {
                    if (
                        ((this.scrollStrategy = new rO()),
                        (this.panelClass = ''),
                        (this.hasBackdrop = !1),
                        (this.backdropClass = 'cdk-overlay-dark-backdrop'),
                        (this.disposeOnNavigation = !1),
                        e)
                    ) {
                        const t = Object.keys(e);
                        for (const i of t) void 0 !== e[i] && (this[i] = e[i]);
                    }
                }
            }
            class RK {
                constructor(e, t) {
                    (this.connectionPair = e), (this.scrollableViewProperties = t);
                }
            }
            let aO = (() => {
                    class n {
                        constructor(t) {
                            (this._attachedOverlays = []), (this._document = t);
                        }
                        ngOnDestroy() {
                            this.detach();
                        }
                        add(t) {
                            this.remove(t), this._attachedOverlays.push(t);
                        }
                        remove(t) {
                            const i = this._attachedOverlays.indexOf(t);
                            i > -1 && this._attachedOverlays.splice(i, 1), 0 === this._attachedOverlays.length && this.detach();
                        }
                        static #e = (this.ɵfac = function (i) {
                            return new (i || n)(T(De));
                        });
                        static #t = (this.ɵprov = j({ token: n, factory: n.ɵfac, providedIn: 'root' }));
                    }
                    return n;
                })(),
                AK = (() => {
                    class n extends aO {
                        constructor(t, i) {
                            super(t),
                                (this._ngZone = i),
                                (this._keydownListener = (r) => {
                                    const o = this._attachedOverlays;
                                    for (let s = o.length - 1; s > -1; s--)
                                        if (o[s]._keydownEvents.observers.length > 0) {
                                            const a = o[s]._keydownEvents;
                                            this._ngZone ? this._ngZone.run(() => a.next(r)) : a.next(r);
                                            break;
                                        }
                                });
                        }
                        add(t) {
                            super.add(t),
                                this._isAttached ||
                                    (this._ngZone
                                        ? this._ngZone.runOutsideAngular(() =>
                                              this._document.body.addEventListener('keydown', this._keydownListener),
                                          )
                                        : this._document.body.addEventListener('keydown', this._keydownListener),
                                    (this._isAttached = !0));
                        }
                        detach() {
                            this._isAttached &&
                                (this._document.body.removeEventListener('keydown', this._keydownListener), (this._isAttached = !1));
                        }
                        static #e = (this.ɵfac = function (i) {
                            return new (i || n)(T(De), T(ce, 8));
                        });
                        static #t = (this.ɵprov = j({ token: n, factory: n.ɵfac, providedIn: 'root' }));
                    }
                    return n;
                })(),
                OK = (() => {
                    class n extends aO {
                        constructor(t, i, r) {
                            super(t),
                                (this._platform = i),
                                (this._ngZone = r),
                                (this._cursorStyleIsSet = !1),
                                (this._pointerDownListener = (o) => {
                                    this._pointerDownEventTarget = Nr(o);
                                }),
                                (this._clickListener = (o) => {
                                    const s = Nr(o),
                                        a = 'click' === o.type && this._pointerDownEventTarget ? this._pointerDownEventTarget : s;
                                    this._pointerDownEventTarget = null;
                                    const l = this._attachedOverlays.slice();
                                    for (let c = l.length - 1; c > -1; c--) {
                                        const u = l[c];
                                        if (u._outsidePointerEvents.observers.length < 1 || !u.hasAttached()) continue;
                                        if (u.overlayElement.contains(s) || u.overlayElement.contains(a)) break;
                                        const d = u._outsidePointerEvents;
                                        this._ngZone ? this._ngZone.run(() => d.next(o)) : d.next(o);
                                    }
                                });
                        }
                        add(t) {
                            if ((super.add(t), !this._isAttached)) {
                                const i = this._document.body;
                                this._ngZone
                                    ? this._ngZone.runOutsideAngular(() => this._addEventListeners(i))
                                    : this._addEventListeners(i),
                                    this._platform.IOS &&
                                        !this._cursorStyleIsSet &&
                                        ((this._cursorOriginalValue = i.style.cursor),
                                        (i.style.cursor = 'pointer'),
                                        (this._cursorStyleIsSet = !0)),
                                    (this._isAttached = !0);
                            }
                        }
                        detach() {
                            if (this._isAttached) {
                                const t = this._document.body;
                                t.removeEventListener('pointerdown', this._pointerDownListener, !0),
                                    t.removeEventListener('click', this._clickListener, !0),
                                    t.removeEventListener('auxclick', this._clickListener, !0),
                                    t.removeEventListener('contextmenu', this._clickListener, !0),
                                    this._platform.IOS &&
                                        this._cursorStyleIsSet &&
                                        ((t.style.cursor = this._cursorOriginalValue), (this._cursorStyleIsSet = !1)),
                                    (this._isAttached = !1);
                            }
                        }
                        _addEventListeners(t) {
                            t.addEventListener('pointerdown', this._pointerDownListener, !0),
                                t.addEventListener('click', this._clickListener, !0),
                                t.addEventListener('auxclick', this._clickListener, !0),
                                t.addEventListener('contextmenu', this._clickListener, !0);
                        }
                        static #e = (this.ɵfac = function (i) {
                            return new (i || n)(T(De), T(Xt), T(ce, 8));
                        });
                        static #t = (this.ɵprov = j({ token: n, factory: n.ɵfac, providedIn: 'root' }));
                    }
                    return n;
                })(),
                ev = (() => {
                    class n {
                        constructor(t, i) {
                            (this._platform = i), (this._document = t);
                        }
                        ngOnDestroy() {
                            this._containerElement?.remove();
                        }
                        getContainerElement() {
                            return this._containerElement || this._createContainer(), this._containerElement;
                        }
                        _createContainer() {
                            const t = 'cdk-overlay-container';
                            if (this._platform.isBrowser || JT()) {
                                const r = this._document.querySelectorAll(`.${t}[platform="server"], .${t}[platform="test"]`);
                                for (let o = 0; o < r.length; o++) r[o].remove();
                            }
                            const i = this._document.createElement('div');
                            i.classList.add(t),
                                JT()
                                    ? i.setAttribute('platform', 'test')
                                    : this._platform.isBrowser || i.setAttribute('platform', 'server'),
                                this._document.body.appendChild(i),
                                (this._containerElement = i);
                        }
                        static #e = (this.ɵfac = function (i) {
                            return new (i || n)(T(De), T(Xt));
                        });
                        static #t = (this.ɵprov = j({ token: n, factory: n.ɵfac, providedIn: 'root' }));
                    }
                    return n;
                })();
            class _f {
                constructor(e, t, i, r, o, s, a, l, c, u = !1) {
                    (this._portalOutlet = e),
                        (this._host = t),
                        (this._pane = i),
                        (this._config = r),
                        (this._ngZone = o),
                        (this._keyboardDispatcher = s),
                        (this._document = a),
                        (this._location = l),
                        (this._outsideClickDispatcher = c),
                        (this._animationsDisabled = u),
                        (this._backdropElement = null),
                        (this._backdropClick = new et()),
                        (this._attachments = new et()),
                        (this._detachments = new et()),
                        (this._locationChanges = xt.EMPTY),
                        (this._backdropClickHandler = (d) => this._backdropClick.next(d)),
                        (this._backdropTransitionendHandler = (d) => {
                            this._disposeBackdrop(d.target);
                        }),
                        (this._keydownEvents = new et()),
                        (this._outsidePointerEvents = new et()),
                        r.scrollStrategy && ((this._scrollStrategy = r.scrollStrategy), this._scrollStrategy.attach(this)),
                        (this._positionStrategy = r.positionStrategy);
                }
                get overlayElement() {
                    return this._pane;
                }
                get backdropElement() {
                    return this._backdropElement;
                }
                get hostElement() {
                    return this._host;
                }
                attach(e) {
                    !this._host.parentElement && this._previousHostParent && this._previousHostParent.appendChild(this._host);
                    const t = this._portalOutlet.attach(e);
                    return (
                        this._positionStrategy && this._positionStrategy.attach(this),
                        this._updateStackingOrder(),
                        this._updateElementSize(),
                        this._updateElementDirection(),
                        this._scrollStrategy && this._scrollStrategy.enable(),
                        this._ngZone.onStable.pipe(Io(1)).subscribe(() => {
                            this.hasAttached() && this.updatePosition();
                        }),
                        this._togglePointerEvents(!0),
                        this._config.hasBackdrop && this._attachBackdrop(),
                        this._config.panelClass && this._toggleClasses(this._pane, this._config.panelClass, !0),
                        this._attachments.next(),
                        this._keyboardDispatcher.add(this),
                        this._config.disposeOnNavigation && (this._locationChanges = this._location.subscribe(() => this.dispose())),
                        this._outsideClickDispatcher.add(this),
                        'function' == typeof t?.onDestroy &&
                            t.onDestroy(() => {
                                this.hasAttached() && this._ngZone.runOutsideAngular(() => Promise.resolve().then(() => this.detach()));
                            }),
                        t
                    );
                }
                detach() {
                    if (!this.hasAttached()) return;
                    this.detachBackdrop(),
                        this._togglePointerEvents(!1),
                        this._positionStrategy && this._positionStrategy.detach && this._positionStrategy.detach(),
                        this._scrollStrategy && this._scrollStrategy.disable();
                    const e = this._portalOutlet.detach();
                    return (
                        this._detachments.next(),
                        this._keyboardDispatcher.remove(this),
                        this._detachContentWhenStable(),
                        this._locationChanges.unsubscribe(),
                        this._outsideClickDispatcher.remove(this),
                        e
                    );
                }
                dispose() {
                    const e = this.hasAttached();
                    this._positionStrategy && this._positionStrategy.dispose(),
                        this._disposeScrollStrategy(),
                        this._disposeBackdrop(this._backdropElement),
                        this._locationChanges.unsubscribe(),
                        this._keyboardDispatcher.remove(this),
                        this._portalOutlet.dispose(),
                        this._attachments.complete(),
                        this._backdropClick.complete(),
                        this._keydownEvents.complete(),
                        this._outsidePointerEvents.complete(),
                        this._outsideClickDispatcher.remove(this),
                        this._host?.remove(),
                        (this._previousHostParent = this._pane = this._host = null),
                        e && this._detachments.next(),
                        this._detachments.complete();
                }
                hasAttached() {
                    return this._portalOutlet.hasAttached();
                }
                backdropClick() {
                    return this._backdropClick;
                }
                attachments() {
                    return this._attachments;
                }
                detachments() {
                    return this._detachments;
                }
                keydownEvents() {
                    return this._keydownEvents;
                }
                outsidePointerEvents() {
                    return this._outsidePointerEvents;
                }
                getConfig() {
                    return this._config;
                }
                updatePosition() {
                    this._positionStrategy && this._positionStrategy.apply();
                }
                updatePositionStrategy(e) {
                    e !== this._positionStrategy &&
                        (this._positionStrategy && this._positionStrategy.dispose(),
                        (this._positionStrategy = e),
                        this.hasAttached() && (e.attach(this), this.updatePosition()));
                }
                updateSize(e) {
                    (this._config = { ...this._config, ...e }), this._updateElementSize();
                }
                setDirection(e) {
                    (this._config = { ...this._config, direction: e }), this._updateElementDirection();
                }
                addPanelClass(e) {
                    this._pane && this._toggleClasses(this._pane, e, !0);
                }
                removePanelClass(e) {
                    this._pane && this._toggleClasses(this._pane, e, !1);
                }
                getDirection() {
                    const e = this._config.direction;
                    return e ? ('string' == typeof e ? e : e.value) : 'ltr';
                }
                updateScrollStrategy(e) {
                    e !== this._scrollStrategy &&
                        (this._disposeScrollStrategy(), (this._scrollStrategy = e), this.hasAttached() && (e.attach(this), e.enable()));
                }
                _updateElementDirection() {
                    this._host.setAttribute('dir', this.getDirection());
                }
                _updateElementSize() {
                    if (!this._pane) return;
                    const e = this._pane.style;
                    (e.width = pt(this._config.width)),
                        (e.height = pt(this._config.height)),
                        (e.minWidth = pt(this._config.minWidth)),
                        (e.minHeight = pt(this._config.minHeight)),
                        (e.maxWidth = pt(this._config.maxWidth)),
                        (e.maxHeight = pt(this._config.maxHeight));
                }
                _togglePointerEvents(e) {
                    this._pane.style.pointerEvents = e ? '' : 'none';
                }
                _attachBackdrop() {
                    const e = 'cdk-overlay-backdrop-showing';
                    (this._backdropElement = this._document.createElement('div')),
                        this._backdropElement.classList.add('cdk-overlay-backdrop'),
                        this._animationsDisabled && this._backdropElement.classList.add('cdk-overlay-backdrop-noop-animation'),
                        this._config.backdropClass && this._toggleClasses(this._backdropElement, this._config.backdropClass, !0),
                        this._host.parentElement.insertBefore(this._backdropElement, this._host),
                        this._backdropElement.addEventListener('click', this._backdropClickHandler),
                        !this._animationsDisabled && typeof requestAnimationFrame < 'u'
                            ? this._ngZone.runOutsideAngular(() => {
                                  requestAnimationFrame(() => {
                                      this._backdropElement && this._backdropElement.classList.add(e);
                                  });
                              })
                            : this._backdropElement.classList.add(e);
                }
                _updateStackingOrder() {
                    this._host.nextSibling && this._host.parentNode.appendChild(this._host);
                }
                detachBackdrop() {
                    const e = this._backdropElement;
                    if (e) {
                        if (this._animationsDisabled) return void this._disposeBackdrop(e);
                        e.classList.remove('cdk-overlay-backdrop-showing'),
                            this._ngZone.runOutsideAngular(() => {
                                e.addEventListener('transitionend', this._backdropTransitionendHandler);
                            }),
                            (e.style.pointerEvents = 'none'),
                            (this._backdropTimeout = this._ngZone.runOutsideAngular(() =>
                                setTimeout(() => {
                                    this._disposeBackdrop(e);
                                }, 500),
                            ));
                    }
                }
                _toggleClasses(e, t, i) {
                    const r = mh(t || []).filter((o) => !!o);
                    r.length && (i ? e.classList.add(...r) : e.classList.remove(...r));
                }
                _detachContentWhenStable() {
                    this._ngZone.runOutsideAngular(() => {
                        const e = this._ngZone.onStable.pipe(gy(nO(this._attachments, this._detachments))).subscribe(() => {
                            (!this._pane || !this._host || 0 === this._pane.children.length) &&
                                (this._pane && this._config.panelClass && this._toggleClasses(this._pane, this._config.panelClass, !1),
                                this._host &&
                                    this._host.parentElement &&
                                    ((this._previousHostParent = this._host.parentElement), this._host.remove()),
                                e.unsubscribe());
                        });
                    });
                }
                _disposeScrollStrategy() {
                    const e = this._scrollStrategy;
                    e && (e.disable(), e.detach && e.detach());
                }
                _disposeBackdrop(e) {
                    e &&
                        (e.removeEventListener('click', this._backdropClickHandler),
                        e.removeEventListener('transitionend', this._backdropTransitionendHandler),
                        e.remove(),
                        this._backdropElement === e && (this._backdropElement = null)),
                        this._backdropTimeout && (clearTimeout(this._backdropTimeout), (this._backdropTimeout = void 0));
                }
            }
            const lO = 'cdk-overlay-connected-position-bounding-box',
                NK = /([A-Za-z%]+)$/;
            class PK {
                get positions() {
                    return this._preferredPositions;
                }
                constructor(e, t, i, r, o) {
                    (this._viewportRuler = t),
                        (this._document = i),
                        (this._platform = r),
                        (this._overlayContainer = o),
                        (this._lastBoundingBoxSize = { width: 0, height: 0 }),
                        (this._isPushed = !1),
                        (this._canPush = !0),
                        (this._growAfterOpen = !1),
                        (this._hasFlexibleDimensions = !0),
                        (this._positionLocked = !1),
                        (this._viewportMargin = 0),
                        (this._scrollables = []),
                        (this._preferredPositions = []),
                        (this._positionChanges = new et()),
                        (this._resizeSubscription = xt.EMPTY),
                        (this._offsetX = 0),
                        (this._offsetY = 0),
                        (this._appliedPanelClasses = []),
                        (this.positionChanges = this._positionChanges),
                        this.setOrigin(e);
                }
                attach(e) {
                    this._validatePositions(),
                        e.hostElement.classList.add(lO),
                        (this._overlayRef = e),
                        (this._boundingBox = e.hostElement),
                        (this._pane = e.overlayElement),
                        (this._isDisposed = !1),
                        (this._isInitialRender = !0),
                        (this._lastPosition = null),
                        this._resizeSubscription.unsubscribe(),
                        (this._resizeSubscription = this._viewportRuler.change().subscribe(() => {
                            (this._isInitialRender = !0), this.apply();
                        }));
                }
                apply() {
                    if (this._isDisposed || !this._platform.isBrowser) return;
                    if (!this._isInitialRender && this._positionLocked && this._lastPosition) return void this.reapplyLastPosition();
                    this._clearPanelClasses(),
                        this._resetOverlayElementStyles(),
                        this._resetBoundingBoxStyles(),
                        (this._viewportRect = this._getNarrowedViewportRect()),
                        (this._originRect = this._getOriginRect()),
                        (this._overlayRect = this._pane.getBoundingClientRect()),
                        (this._containerRect = this._overlayContainer.getContainerElement().getBoundingClientRect());
                    const e = this._originRect,
                        t = this._overlayRect,
                        i = this._viewportRect,
                        r = this._containerRect,
                        o = [];
                    let s;
                    for (let a of this._preferredPositions) {
                        let l = this._getOriginPoint(e, r, a),
                            c = this._getOverlayPoint(l, t, a),
                            u = this._getOverlayFit(c, t, i, a);
                        if (u.isCompletelyWithinViewport) return (this._isPushed = !1), void this._applyPosition(a, l);
                        this._canFitWithFlexibleDimensions(u, c, i)
                            ? o.push({ position: a, origin: l, overlayRect: t, boundingBoxRect: this._calculateBoundingBoxRect(l, a) })
                            : (!s || s.overlayFit.visibleArea < u.visibleArea) &&
                              (s = { overlayFit: u, overlayPoint: c, originPoint: l, position: a, overlayRect: t });
                    }
                    if (o.length) {
                        let a = null,
                            l = -1;
                        for (const c of o) {
                            const u = c.boundingBoxRect.width * c.boundingBoxRect.height * (c.position.weight || 1);
                            u > l && ((l = u), (a = c));
                        }
                        return (this._isPushed = !1), void this._applyPosition(a.position, a.origin);
                    }
                    if (this._canPush) return (this._isPushed = !0), void this._applyPosition(s.position, s.originPoint);
                    this._applyPosition(s.position, s.originPoint);
                }
                detach() {
                    this._clearPanelClasses(),
                        (this._lastPosition = null),
                        (this._previousPushAmount = null),
                        this._resizeSubscription.unsubscribe();
                }
                dispose() {
                    this._isDisposed ||
                        (this._boundingBox &&
                            $o(this._boundingBox.style, {
                                top: '',
                                left: '',
                                right: '',
                                bottom: '',
                                height: '',
                                width: '',
                                alignItems: '',
                                justifyContent: '',
                            }),
                        this._pane && this._resetOverlayElementStyles(),
                        this._overlayRef && this._overlayRef.hostElement.classList.remove(lO),
                        this.detach(),
                        this._positionChanges.complete(),
                        (this._overlayRef = this._boundingBox = null),
                        (this._isDisposed = !0));
                }
                reapplyLastPosition() {
                    if (this._isDisposed || !this._platform.isBrowser) return;
                    const e = this._lastPosition;
                    if (e) {
                        (this._originRect = this._getOriginRect()),
                            (this._overlayRect = this._pane.getBoundingClientRect()),
                            (this._viewportRect = this._getNarrowedViewportRect()),
                            (this._containerRect = this._overlayContainer.getContainerElement().getBoundingClientRect());
                        const t = this._getOriginPoint(this._originRect, this._containerRect, e);
                        this._applyPosition(e, t);
                    } else this.apply();
                }
                withScrollableContainers(e) {
                    return (this._scrollables = e), this;
                }
                withPositions(e) {
                    return (
                        (this._preferredPositions = e),
                        -1 === e.indexOf(this._lastPosition) && (this._lastPosition = null),
                        this._validatePositions(),
                        this
                    );
                }
                withViewportMargin(e) {
                    return (this._viewportMargin = e), this;
                }
                withFlexibleDimensions(e = !0) {
                    return (this._hasFlexibleDimensions = e), this;
                }
                withGrowAfterOpen(e = !0) {
                    return (this._growAfterOpen = e), this;
                }
                withPush(e = !0) {
                    return (this._canPush = e), this;
                }
                withLockedPosition(e = !0) {
                    return (this._positionLocked = e), this;
                }
                setOrigin(e) {
                    return (this._origin = e), this;
                }
                withDefaultOffsetX(e) {
                    return (this._offsetX = e), this;
                }
                withDefaultOffsetY(e) {
                    return (this._offsetY = e), this;
                }
                withTransformOriginOn(e) {
                    return (this._transformOriginSelector = e), this;
                }
                _getOriginPoint(e, t, i) {
                    let r, o;
                    if ('center' == i.originX) r = e.left + e.width / 2;
                    else {
                        const s = this._isRtl() ? e.right : e.left,
                            a = this._isRtl() ? e.left : e.right;
                        r = 'start' == i.originX ? s : a;
                    }
                    return (
                        t.left < 0 && (r -= t.left),
                        (o = 'center' == i.originY ? e.top + e.height / 2 : 'top' == i.originY ? e.top : e.bottom),
                        t.top < 0 && (o -= t.top),
                        { x: r, y: o }
                    );
                }
                _getOverlayPoint(e, t, i) {
                    let r, o;
                    return (
                        (r =
                            'center' == i.overlayX
                                ? -t.width / 2
                                : 'start' === i.overlayX
                                  ? this._isRtl()
                                      ? -t.width
                                      : 0
                                  : this._isRtl()
                                    ? 0
                                    : -t.width),
                        (o = 'center' == i.overlayY ? -t.height / 2 : 'top' == i.overlayY ? 0 : -t.height),
                        { x: e.x + r, y: e.y + o }
                    );
                }
                _getOverlayFit(e, t, i, r) {
                    const o = uO(t);
                    let { x: s, y: a } = e,
                        l = this._getOffset(r, 'x'),
                        c = this._getOffset(r, 'y');
                    l && (s += l), c && (a += c);
                    let h = 0 - a,
                        f = a + o.height - i.height,
                        m = this._subtractOverflows(o.width, 0 - s, s + o.width - i.width),
                        p = this._subtractOverflows(o.height, h, f),
                        g = m * p;
                    return {
                        visibleArea: g,
                        isCompletelyWithinViewport: o.width * o.height === g,
                        fitsInViewportVertically: p === o.height,
                        fitsInViewportHorizontally: m == o.width,
                    };
                }
                _canFitWithFlexibleDimensions(e, t, i) {
                    if (this._hasFlexibleDimensions) {
                        const r = i.bottom - t.y,
                            o = i.right - t.x,
                            s = cO(this._overlayRef.getConfig().minHeight),
                            a = cO(this._overlayRef.getConfig().minWidth);
                        return (
                            (e.fitsInViewportVertically || (null != s && s <= r)) && (e.fitsInViewportHorizontally || (null != a && a <= o))
                        );
                    }
                    return !1;
                }
                _pushOverlayOnScreen(e, t, i) {
                    if (this._previousPushAmount && this._positionLocked)
                        return { x: e.x + this._previousPushAmount.x, y: e.y + this._previousPushAmount.y };
                    const r = uO(t),
                        o = this._viewportRect,
                        s = Math.max(e.x + r.width - o.width, 0),
                        a = Math.max(e.y + r.height - o.height, 0),
                        l = Math.max(o.top - i.top - e.y, 0),
                        c = Math.max(o.left - i.left - e.x, 0);
                    let u = 0,
                        d = 0;
                    return (
                        (u = r.width <= o.width ? c || -s : e.x < this._viewportMargin ? o.left - i.left - e.x : 0),
                        (d = r.height <= o.height ? l || -a : e.y < this._viewportMargin ? o.top - i.top - e.y : 0),
                        (this._previousPushAmount = { x: u, y: d }),
                        { x: e.x + u, y: e.y + d }
                    );
                }
                _applyPosition(e, t) {
                    if (
                        (this._setTransformOrigin(e),
                        this._setOverlayElementStyles(t, e),
                        this._setBoundingBoxStyles(t, e),
                        e.panelClass && this._addPanelClasses(e.panelClass),
                        this._positionChanges.observers.length)
                    ) {
                        const i = this._getScrollVisibility();
                        if (
                            e !== this._lastPosition ||
                            !this._lastScrollVisibility ||
                            !(function kK(n, e) {
                                return (
                                    n === e ||
                                    (n.isOriginClipped === e.isOriginClipped &&
                                        n.isOriginOutsideView === e.isOriginOutsideView &&
                                        n.isOverlayClipped === e.isOverlayClipped &&
                                        n.isOverlayOutsideView === e.isOverlayOutsideView)
                                );
                            })(this._lastScrollVisibility, i)
                        ) {
                            const r = new RK(e, i);
                            this._positionChanges.next(r);
                        }
                        this._lastScrollVisibility = i;
                    }
                    (this._lastPosition = e), (this._isInitialRender = !1);
                }
                _setTransformOrigin(e) {
                    if (!this._transformOriginSelector) return;
                    const t = this._boundingBox.querySelectorAll(this._transformOriginSelector);
                    let i,
                        r = e.overlayY;
                    i =
                        'center' === e.overlayX
                            ? 'center'
                            : this._isRtl()
                              ? 'start' === e.overlayX
                                  ? 'right'
                                  : 'left'
                              : 'start' === e.overlayX
                                ? 'left'
                                : 'right';
                    for (let o = 0; o < t.length; o++) t[o].style.transformOrigin = `${i} ${r}`;
                }
                _calculateBoundingBoxRect(e, t) {
                    const i = this._viewportRect,
                        r = this._isRtl();
                    let o, s, a, u, d, h;
                    if ('top' === t.overlayY) (s = e.y), (o = i.height - s + this._viewportMargin);
                    else if ('bottom' === t.overlayY)
                        (a = i.height - e.y + 2 * this._viewportMargin), (o = i.height - a + this._viewportMargin);
                    else {
                        const f = Math.min(i.bottom - e.y + i.top, e.y),
                            m = this._lastBoundingBoxSize.height;
                        (o = 2 * f), (s = e.y - f), o > m && !this._isInitialRender && !this._growAfterOpen && (s = e.y - m / 2);
                    }
                    if (('end' === t.overlayX && !r) || ('start' === t.overlayX && r))
                        (h = i.width - e.x + this._viewportMargin), (u = e.x - this._viewportMargin);
                    else if (('start' === t.overlayX && !r) || ('end' === t.overlayX && r)) (d = e.x), (u = i.right - e.x);
                    else {
                        const f = Math.min(i.right - e.x + i.left, e.x),
                            m = this._lastBoundingBoxSize.width;
                        (u = 2 * f), (d = e.x - f), u > m && !this._isInitialRender && !this._growAfterOpen && (d = e.x - m / 2);
                    }
                    return { top: s, left: d, bottom: a, right: h, width: u, height: o };
                }
                _setBoundingBoxStyles(e, t) {
                    const i = this._calculateBoundingBoxRect(e, t);
                    !this._isInitialRender &&
                        !this._growAfterOpen &&
                        ((i.height = Math.min(i.height, this._lastBoundingBoxSize.height)),
                        (i.width = Math.min(i.width, this._lastBoundingBoxSize.width)));
                    const r = {};
                    if (this._hasExactPosition())
                        (r.top = r.left = '0'), (r.bottom = r.right = r.maxHeight = r.maxWidth = ''), (r.width = r.height = '100%');
                    else {
                        const o = this._overlayRef.getConfig().maxHeight,
                            s = this._overlayRef.getConfig().maxWidth;
                        (r.height = pt(i.height)),
                            (r.top = pt(i.top)),
                            (r.bottom = pt(i.bottom)),
                            (r.width = pt(i.width)),
                            (r.left = pt(i.left)),
                            (r.right = pt(i.right)),
                            (r.alignItems = 'center' === t.overlayX ? 'center' : 'end' === t.overlayX ? 'flex-end' : 'flex-start'),
                            (r.justifyContent = 'center' === t.overlayY ? 'center' : 'bottom' === t.overlayY ? 'flex-end' : 'flex-start'),
                            o && (r.maxHeight = pt(o)),
                            s && (r.maxWidth = pt(s));
                    }
                    (this._lastBoundingBoxSize = i), $o(this._boundingBox.style, r);
                }
                _resetBoundingBoxStyles() {
                    $o(this._boundingBox.style, {
                        top: '0',
                        left: '0',
                        right: '0',
                        bottom: '0',
                        height: '',
                        width: '',
                        alignItems: '',
                        justifyContent: '',
                    });
                }
                _resetOverlayElementStyles() {
                    $o(this._pane.style, { top: '', left: '', bottom: '', right: '', position: '', transform: '' });
                }
                _setOverlayElementStyles(e, t) {
                    const i = {},
                        r = this._hasExactPosition(),
                        o = this._hasFlexibleDimensions,
                        s = this._overlayRef.getConfig();
                    if (r) {
                        const u = this._viewportRuler.getViewportScrollPosition();
                        $o(i, this._getExactOverlayY(t, e, u)), $o(i, this._getExactOverlayX(t, e, u));
                    } else i.position = 'static';
                    let a = '',
                        l = this._getOffset(t, 'x'),
                        c = this._getOffset(t, 'y');
                    l && (a += `translateX(${l}px) `),
                        c && (a += `translateY(${c}px)`),
                        (i.transform = a.trim()),
                        s.maxHeight && (r ? (i.maxHeight = pt(s.maxHeight)) : o && (i.maxHeight = '')),
                        s.maxWidth && (r ? (i.maxWidth = pt(s.maxWidth)) : o && (i.maxWidth = '')),
                        $o(this._pane.style, i);
                }
                _getExactOverlayY(e, t, i) {
                    let r = { top: '', bottom: '' },
                        o = this._getOverlayPoint(t, this._overlayRect, e);
                    return (
                        this._isPushed && (o = this._pushOverlayOnScreen(o, this._overlayRect, i)),
                        'bottom' === e.overlayY
                            ? (r.bottom = this._document.documentElement.clientHeight - (o.y + this._overlayRect.height) + 'px')
                            : (r.top = pt(o.y)),
                        r
                    );
                }
                _getExactOverlayX(e, t, i) {
                    let s,
                        r = { left: '', right: '' },
                        o = this._getOverlayPoint(t, this._overlayRect, e);
                    return (
                        this._isPushed && (o = this._pushOverlayOnScreen(o, this._overlayRect, i)),
                        (s = this._isRtl() ? ('end' === e.overlayX ? 'left' : 'right') : 'end' === e.overlayX ? 'right' : 'left'),
                        'right' === s
                            ? (r.right = this._document.documentElement.clientWidth - (o.x + this._overlayRect.width) + 'px')
                            : (r.left = pt(o.x)),
                        r
                    );
                }
                _getScrollVisibility() {
                    const e = this._getOriginRect(),
                        t = this._pane.getBoundingClientRect(),
                        i = this._scrollables.map((r) => r.getElementRef().nativeElement.getBoundingClientRect());
                    return {
                        isOriginClipped: oO(e, i),
                        isOriginOutsideView: Jb(e, i),
                        isOverlayClipped: oO(t, i),
                        isOverlayOutsideView: Jb(t, i),
                    };
                }
                _subtractOverflows(e, ...t) {
                    return t.reduce((i, r) => i - Math.max(r, 0), e);
                }
                _getNarrowedViewportRect() {
                    const e = this._document.documentElement.clientWidth,
                        t = this._document.documentElement.clientHeight,
                        i = this._viewportRuler.getViewportScrollPosition();
                    return {
                        top: i.top + this._viewportMargin,
                        left: i.left + this._viewportMargin,
                        right: i.left + e - this._viewportMargin,
                        bottom: i.top + t - this._viewportMargin,
                        width: e - 2 * this._viewportMargin,
                        height: t - 2 * this._viewportMargin,
                    };
                }
                _isRtl() {
                    return 'rtl' === this._overlayRef.getDirection();
                }
                _hasExactPosition() {
                    return !this._hasFlexibleDimensions || this._isPushed;
                }
                _getOffset(e, t) {
                    return 'x' === t ? (null == e.offsetX ? this._offsetX : e.offsetX) : null == e.offsetY ? this._offsetY : e.offsetY;
                }
                _validatePositions() {}
                _addPanelClasses(e) {
                    this._pane &&
                        mh(e).forEach((t) => {
                            '' !== t &&
                                -1 === this._appliedPanelClasses.indexOf(t) &&
                                (this._appliedPanelClasses.push(t), this._pane.classList.add(t));
                        });
                }
                _clearPanelClasses() {
                    this._pane &&
                        (this._appliedPanelClasses.forEach((e) => {
                            this._pane.classList.remove(e);
                        }),
                        (this._appliedPanelClasses = []));
                }
                _getOriginRect() {
                    const e = this._origin;
                    if (e instanceof Tt) return e.nativeElement.getBoundingClientRect();
                    if (e instanceof Element) return e.getBoundingClientRect();
                    const t = e.width || 0,
                        i = e.height || 0;
                    return { top: e.y, bottom: e.y + i, left: e.x, right: e.x + t, height: i, width: t };
                }
            }
            function $o(n, e) {
                for (let t in e) e.hasOwnProperty(t) && (n[t] = e[t]);
                return n;
            }
            function cO(n) {
                if ('number' != typeof n && null != n) {
                    const [e, t] = n.split(NK);
                    return t && 'px' !== t ? null : parseFloat(e);
                }
                return n || null;
            }
            function uO(n) {
                return {
                    top: Math.floor(n.top),
                    right: Math.floor(n.right),
                    bottom: Math.floor(n.bottom),
                    left: Math.floor(n.left),
                    width: Math.floor(n.width),
                    height: Math.floor(n.height),
                };
            }
            const dO = 'cdk-global-overlay-wrapper';
            class FK {
                constructor() {
                    (this._cssPosition = 'static'),
                        (this._topOffset = ''),
                        (this._bottomOffset = ''),
                        (this._alignItems = ''),
                        (this._xPosition = ''),
                        (this._xOffset = ''),
                        (this._width = ''),
                        (this._height = ''),
                        (this._isDisposed = !1);
                }
                attach(e) {
                    const t = e.getConfig();
                    (this._overlayRef = e),
                        this._width && !t.width && e.updateSize({ width: this._width }),
                        this._height && !t.height && e.updateSize({ height: this._height }),
                        e.hostElement.classList.add(dO),
                        (this._isDisposed = !1);
                }
                top(e = '') {
                    return (this._bottomOffset = ''), (this._topOffset = e), (this._alignItems = 'flex-start'), this;
                }
                left(e = '') {
                    return (this._xOffset = e), (this._xPosition = 'left'), this;
                }
                bottom(e = '') {
                    return (this._topOffset = ''), (this._bottomOffset = e), (this._alignItems = 'flex-end'), this;
                }
                right(e = '') {
                    return (this._xOffset = e), (this._xPosition = 'right'), this;
                }
                start(e = '') {
                    return (this._xOffset = e), (this._xPosition = 'start'), this;
                }
                end(e = '') {
                    return (this._xOffset = e), (this._xPosition = 'end'), this;
                }
                width(e = '') {
                    return this._overlayRef ? this._overlayRef.updateSize({ width: e }) : (this._width = e), this;
                }
                height(e = '') {
                    return this._overlayRef ? this._overlayRef.updateSize({ height: e }) : (this._height = e), this;
                }
                centerHorizontally(e = '') {
                    return this.left(e), (this._xPosition = 'center'), this;
                }
                centerVertically(e = '') {
                    return this.top(e), (this._alignItems = 'center'), this;
                }
                apply() {
                    if (!this._overlayRef || !this._overlayRef.hasAttached()) return;
                    const e = this._overlayRef.overlayElement.style,
                        t = this._overlayRef.hostElement.style,
                        i = this._overlayRef.getConfig(),
                        { width: r, height: o, maxWidth: s, maxHeight: a } = i,
                        l = !(('100%' !== r && '100vw' !== r) || (s && '100%' !== s && '100vw' !== s)),
                        c = !(('100%' !== o && '100vh' !== o) || (a && '100%' !== a && '100vh' !== a)),
                        u = this._xPosition,
                        d = this._xOffset,
                        h = 'rtl' === this._overlayRef.getConfig().direction;
                    let f = '',
                        m = '',
                        p = '';
                    l
                        ? (p = 'flex-start')
                        : 'center' === u
                          ? ((p = 'center'), h ? (m = d) : (f = d))
                          : h
                            ? 'left' === u || 'end' === u
                                ? ((p = 'flex-end'), (f = d))
                                : ('right' === u || 'start' === u) && ((p = 'flex-start'), (m = d))
                            : 'left' === u || 'start' === u
                              ? ((p = 'flex-start'), (f = d))
                              : ('right' === u || 'end' === u) && ((p = 'flex-end'), (m = d)),
                        (e.position = this._cssPosition),
                        (e.marginLeft = l ? '0' : f),
                        (e.marginTop = c ? '0' : this._topOffset),
                        (e.marginBottom = this._bottomOffset),
                        (e.marginRight = l ? '0' : m),
                        (t.justifyContent = p),
                        (t.alignItems = c ? 'flex-start' : this._alignItems);
                }
                dispose() {
                    if (this._isDisposed || !this._overlayRef) return;
                    const e = this._overlayRef.overlayElement.style,
                        t = this._overlayRef.hostElement,
                        i = t.style;
                    t.classList.remove(dO),
                        (i.justifyContent = i.alignItems = e.marginTop = e.marginBottom = e.marginLeft = e.marginRight = e.position = ''),
                        (this._overlayRef = null),
                        (this._isDisposed = !0);
                }
            }
            let LK = (() => {
                    class n {
                        constructor(t, i, r, o) {
                            (this._viewportRuler = t), (this._document = i), (this._platform = r), (this._overlayContainer = o);
                        }
                        global() {
                            return new FK();
                        }
                        flexibleConnectedTo(t) {
                            return new PK(t, this._viewportRuler, this._document, this._platform, this._overlayContainer);
                        }
                        static #e = (this.ɵfac = function (i) {
                            return new (i || n)(T(JA), T(De), T(Xt), T(ev));
                        });
                        static #t = (this.ɵprov = j({ token: n, factory: n.ɵfac, providedIn: 'root' }));
                    }
                    return n;
                })(),
                BK = 0,
                Oa = (() => {
                    class n {
                        constructor(t, i, r, o, s, a, l, c, u, d, h, f) {
                            (this.scrollStrategies = t),
                                (this._overlayContainer = i),
                                (this._componentFactoryResolver = r),
                                (this._positionBuilder = o),
                                (this._keyboardDispatcher = s),
                                (this._injector = a),
                                (this._ngZone = l),
                                (this._document = c),
                                (this._directionality = u),
                                (this._location = d),
                                (this._outsideClickDispatcher = h),
                                (this._animationsModuleType = f);
                        }
                        create(t) {
                            const i = this._createHostElement(),
                                r = this._createPaneElement(i),
                                o = this._createPortalOutlet(r),
                                s = new sO(t);
                            return (
                                (s.direction = s.direction || this._directionality.value),
                                new _f(
                                    o,
                                    i,
                                    r,
                                    s,
                                    this._ngZone,
                                    this._keyboardDispatcher,
                                    this._document,
                                    this._location,
                                    this._outsideClickDispatcher,
                                    'NoopAnimations' === this._animationsModuleType,
                                )
                            );
                        }
                        position() {
                            return this._positionBuilder;
                        }
                        _createPaneElement(t) {
                            const i = this._document.createElement('div');
                            return (i.id = 'cdk-overlay-' + BK++), i.classList.add('cdk-overlay-pane'), t.appendChild(i), i;
                        }
                        _createHostElement() {
                            const t = this._document.createElement('div');
                            return this._overlayContainer.getContainerElement().appendChild(t), t;
                        }
                        _createPortalOutlet(t) {
                            return (
                                this._appRef || (this._appRef = this._injector.get(wo)),
                                new IK(t, this._componentFactoryResolver, this._appRef, this._injector, this._document)
                            );
                        }
                        static #e = (this.ɵfac = function (i) {
                            return new (i || n)(T(MK), T(ev), T(Fs), T(LK), T(AK), T(Mt), T(ce), T(De), T(qb), T(wS), T(OK), T(yr, 8));
                        });
                        static #t = (this.ɵprov = j({ token: n, factory: n.ɵfac, providedIn: 'root' }));
                    }
                    return n;
                })();
            function tv(...n) {
                return (function UK() {
                    return tO(1);
                })()(ic(n, nc(n)));
            }
            function hO(...n) {
                const e = nc(n);
                return Vt((t, i) => {
                    (e ? tv(n, t, e) : tv(n, t)).subscribe(i);
                });
            }
            function zK(n, e) {}
            class yf {
                constructor() {
                    (this.role = 'dialog'),
                        (this.panelClass = ''),
                        (this.hasBackdrop = !0),
                        (this.backdropClass = ''),
                        (this.disableClose = !1),
                        (this.width = ''),
                        (this.height = ''),
                        (this.data = null),
                        (this.ariaDescribedBy = null),
                        (this.ariaLabelledBy = null),
                        (this.ariaLabel = null),
                        (this.ariaModal = !0),
                        (this.autoFocus = 'first-tabbable'),
                        (this.restoreFocus = !0),
                        (this.closeOnNavigation = !0),
                        (this.closeOnDestroy = !0),
                        (this.closeOnOverlayDetachments = !0);
                }
            }
            let fO = (() => {
                class n extends Zb {
                    constructor(t, i, r, o, s, a, l, c) {
                        super(),
                            (this._elementRef = t),
                            (this._focusTrapFactory = i),
                            (this._config = o),
                            (this._interactivityChecker = s),
                            (this._ngZone = a),
                            (this._overlayRef = l),
                            (this._focusMonitor = c),
                            (this._platform = $(Xt)),
                            (this._focusTrap = null),
                            (this._elementFocusedBeforeDialogWasOpened = null),
                            (this._closeInteractionType = null),
                            (this._ariaLabelledByQueue = []),
                            (this._changeDetectorRef = $(ig)),
                            (this.attachDomPortal = (u) => {
                                this._portalOutlet.hasAttached();
                                const d = this._portalOutlet.attachDomPortal(u);
                                return this._contentAttached(), d;
                            }),
                            (this._document = r),
                            this._config.ariaLabelledBy && this._ariaLabelledByQueue.push(this._config.ariaLabelledBy);
                    }
                    _addAriaLabelledBy(t) {
                        this._ariaLabelledByQueue.push(t), this._changeDetectorRef.markForCheck();
                    }
                    _removeAriaLabelledBy(t) {
                        const i = this._ariaLabelledByQueue.indexOf(t);
                        i > -1 && (this._ariaLabelledByQueue.splice(i, 1), this._changeDetectorRef.markForCheck());
                    }
                    _contentAttached() {
                        this._initializeFocusTrap(), this._handleBackdropClicks(), this._captureInitialFocus();
                    }
                    _captureInitialFocus() {
                        this._trapFocus();
                    }
                    ngOnDestroy() {
                        this._restoreFocus();
                    }
                    attachComponentPortal(t) {
                        this._portalOutlet.hasAttached();
                        const i = this._portalOutlet.attachComponentPortal(t);
                        return this._contentAttached(), i;
                    }
                    attachTemplatePortal(t) {
                        this._portalOutlet.hasAttached();
                        const i = this._portalOutlet.attachTemplatePortal(t);
                        return this._contentAttached(), i;
                    }
                    _recaptureFocus() {
                        this._containsFocus() || this._trapFocus();
                    }
                    _forceFocus(t, i) {
                        this._interactivityChecker.isFocusable(t) ||
                            ((t.tabIndex = -1),
                            this._ngZone.runOutsideAngular(() => {
                                const r = () => {
                                    t.removeEventListener('blur', r), t.removeEventListener('mousedown', r), t.removeAttribute('tabindex');
                                };
                                t.addEventListener('blur', r), t.addEventListener('mousedown', r);
                            })),
                            t.focus(i);
                    }
                    _focusByCssSelector(t, i) {
                        let r = this._elementRef.nativeElement.querySelector(t);
                        r && this._forceFocus(r, i);
                    }
                    _trapFocus() {
                        const t = this._elementRef.nativeElement;
                        switch (this._config.autoFocus) {
                            case !1:
                            case 'dialog':
                                this._containsFocus() || t.focus();
                                break;
                            case !0:
                            case 'first-tabbable':
                                this._focusTrap?.focusInitialElementWhenReady().then((i) => {
                                    i || this._focusDialogContainer();
                                });
                                break;
                            case 'first-heading':
                                this._focusByCssSelector('h1, h2, h3, h4, h5, h6, [role="heading"]');
                                break;
                            default:
                                this._focusByCssSelector(this._config.autoFocus);
                        }
                    }
                    _restoreFocus() {
                        const t = this._config.restoreFocus;
                        let i = null;
                        if (
                            ('string' == typeof t
                                ? (i = this._document.querySelector(t))
                                : 'boolean' == typeof t
                                  ? (i = t ? this._elementFocusedBeforeDialogWasOpened : null)
                                  : t && (i = t),
                            this._config.restoreFocus && i && 'function' == typeof i.focus)
                        ) {
                            const r = dy(),
                                o = this._elementRef.nativeElement;
                            (!r || r === this._document.body || r === o || o.contains(r)) &&
                                (this._focusMonitor
                                    ? (this._focusMonitor.focusVia(i, this._closeInteractionType), (this._closeInteractionType = null))
                                    : i.focus());
                        }
                        this._focusTrap && this._focusTrap.destroy();
                    }
                    _focusDialogContainer() {
                        this._elementRef.nativeElement.focus && this._elementRef.nativeElement.focus();
                    }
                    _containsFocus() {
                        const t = this._elementRef.nativeElement,
                            i = dy();
                        return t === i || t.contains(i);
                    }
                    _initializeFocusTrap() {
                        this._platform.isBrowser &&
                            ((this._focusTrap = this._focusTrapFactory.create(this._elementRef.nativeElement)),
                            this._document && (this._elementFocusedBeforeDialogWasOpened = dy()));
                    }
                    _handleBackdropClicks() {
                        this._overlayRef.backdropClick().subscribe(() => {
                            this._config.disableClose && this._recaptureFocus();
                        });
                    }
                    static #e = (this.ɵfac = function (i) {
                        return new (i || n)(P(Tt), P(cM), P(De, 8), P(yf), P(_y), P(ce), P(_f), P(yy));
                    });
                    static #t = (this.ɵcmp = Pi({
                        type: n,
                        selectors: [['cdk-dialog-container']],
                        viewQuery: function (i, r) {
                            if (
                                (1 & i &&
                                    (function OI(n, e, t) {
                                        RC(n, e, t);
                                    })(Qb, 7),
                                2 & i)
                            ) {
                                let o;
                                (function NI(n) {
                                    const e = C(),
                                        t = ge(),
                                        i = _m();
                                    au(i + 1);
                                    const r = gg(t, i);
                                    if (
                                        n.dirty &&
                                        (function QN(n) {
                                            return 4 == (4 & n[G]);
                                        })(e) ===
                                            (2 == (2 & r.metadata.flags))
                                    ) {
                                        if (null === r.matches) n.reset([]);
                                        else {
                                            const o = NC(e, i);
                                            n.reset(o, AE), n.notifyOnChanges();
                                        }
                                        return !0;
                                    }
                                    return !1;
                                })((o = PI())) && (r._portalOutlet = o.first);
                            }
                        },
                        hostAttrs: ['tabindex', '-1', 1, 'cdk-dialog-container'],
                        hostVars: 6,
                        hostBindings: function (i, r) {
                            2 & i &&
                                xr('id', r._config.id || null)('role', r._config.role)('aria-modal', r._config.ariaModal)(
                                    'aria-labelledby',
                                    r._config.ariaLabel ? null : r._ariaLabelledByQueue[0],
                                )('aria-label', r._config.ariaLabel)('aria-describedby', r._config.ariaDescribedBy || null);
                        },
                        standalone: !0,
                        features: [Dr, Gi],
                        decls: 1,
                        vars: 0,
                        consts: [['cdkPortalOutlet', '']],
                        template: function (i, r) {
                            1 & i && yo(0, zK, 0, 0, 'ng-template', 0);
                        },
                        dependencies: [Qb],
                        styles: ['.cdk-dialog-container{display:block;width:100%;height:100%;min-height:inherit;max-height:inherit}'],
                        encapsulation: 2,
                    }));
                }
                return n;
            })();
            class nv {
                constructor(e, t) {
                    (this.overlayRef = e),
                        (this.config = t),
                        (this.closed = new et()),
                        (this.disableClose = t.disableClose),
                        (this.backdropClick = e.backdropClick()),
                        (this.keydownEvents = e.keydownEvents()),
                        (this.outsidePointerEvents = e.outsidePointerEvents()),
                        (this.id = t.id),
                        this.keydownEvents.subscribe((i) => {
                            27 === i.keyCode &&
                                !this.disableClose &&
                                !hy(i) &&
                                (i.preventDefault(), this.close(void 0, { focusOrigin: 'keyboard' }));
                        }),
                        this.backdropClick.subscribe(() => {
                            this.disableClose || this.close(void 0, { focusOrigin: 'mouse' });
                        }),
                        (this._detachSubscription = e.detachments().subscribe(() => {
                            !1 !== t.closeOnOverlayDetachments && this.close();
                        }));
                }
                close(e, t) {
                    if (this.containerInstance) {
                        const i = this.closed;
                        (this.containerInstance._closeInteractionType = t?.focusOrigin || 'program'),
                            this._detachSubscription.unsubscribe(),
                            this.overlayRef.dispose(),
                            i.next(e),
                            i.complete(),
                            (this.componentInstance = this.containerInstance = null);
                    }
                }
                updatePosition() {
                    return this.overlayRef.updatePosition(), this;
                }
                updateSize(e = '', t = '') {
                    return this.overlayRef.updateSize({ width: e, height: t }), this;
                }
                addPanelClass(e) {
                    return this.overlayRef.addPanelClass(e), this;
                }
                removePanelClass(e) {
                    return this.overlayRef.removePanelClass(e), this;
                }
            }
            const mO = new L('DialogScrollStrategy', {
                    providedIn: 'root',
                    factory: () => {
                        const n = $(Oa);
                        return () => n.scrollStrategies.block();
                    },
                }),
                GK = new L('DialogData'),
                WK = new L('DefaultDialogConfig');
            let YK = 0,
                qK = (() => {
                    class n {
                        get openDialogs() {
                            return this._parentDialog ? this._parentDialog.openDialogs : this._openDialogsAtThisLevel;
                        }
                        get afterOpened() {
                            return this._parentDialog ? this._parentDialog.afterOpened : this._afterOpenedAtThisLevel;
                        }
                        constructor(t, i, r, o, s, a) {
                            (this._overlay = t),
                                (this._injector = i),
                                (this._defaultOptions = r),
                                (this._parentDialog = o),
                                (this._overlayContainer = s),
                                (this._openDialogsAtThisLevel = []),
                                (this._afterAllClosedAtThisLevel = new et()),
                                (this._afterOpenedAtThisLevel = new et()),
                                (this._ariaHiddenElements = new Map()),
                                (this.afterAllClosed = (function HK(n) {
                                    return new ht((e) => {
                                        cn(n()).subscribe(e);
                                    });
                                })(() =>
                                    this.openDialogs.length ? this._getAfterAllClosed() : this._getAfterAllClosed().pipe(hO(void 0)),
                                )),
                                (this._scrollStrategy = a);
                        }
                        open(t, i) {
                            ((i = { ...(this._defaultOptions || new yf()), ...i }).id = i.id || 'cdk-dialog-' + YK++),
                                i.id && this.getDialogById(i.id);
                            const o = this._getOverlayConfig(i),
                                s = this._overlay.create(o),
                                a = new nv(s, i),
                                l = this._attachContainer(s, a, i);
                            return (
                                (a.containerInstance = l),
                                this._attachDialogContent(t, a, l, i),
                                this.openDialogs.length || this._hideNonDialogContentFromAssistiveTechnology(),
                                this.openDialogs.push(a),
                                a.closed.subscribe(() => this._removeOpenDialog(a, !0)),
                                this.afterOpened.next(a),
                                a
                            );
                        }
                        closeAll() {
                            iv(this.openDialogs, (t) => t.close());
                        }
                        getDialogById(t) {
                            return this.openDialogs.find((i) => i.id === t);
                        }
                        ngOnDestroy() {
                            iv(this._openDialogsAtThisLevel, (t) => {
                                !1 === t.config.closeOnDestroy && this._removeOpenDialog(t, !1);
                            }),
                                iv(this._openDialogsAtThisLevel, (t) => t.close()),
                                this._afterAllClosedAtThisLevel.complete(),
                                this._afterOpenedAtThisLevel.complete(),
                                (this._openDialogsAtThisLevel = []);
                        }
                        _getOverlayConfig(t) {
                            const i = new sO({
                                positionStrategy:
                                    t.positionStrategy || this._overlay.position().global().centerHorizontally().centerVertically(),
                                scrollStrategy: t.scrollStrategy || this._scrollStrategy(),
                                panelClass: t.panelClass,
                                hasBackdrop: t.hasBackdrop,
                                direction: t.direction,
                                minWidth: t.minWidth,
                                minHeight: t.minHeight,
                                maxWidth: t.maxWidth,
                                maxHeight: t.maxHeight,
                                width: t.width,
                                height: t.height,
                                disposeOnNavigation: t.closeOnNavigation,
                            });
                            return t.backdropClass && (i.backdropClass = t.backdropClass), i;
                        }
                        _attachContainer(t, i, r) {
                            const o = r.injector || r.viewContainerRef?.injector,
                                s = [
                                    { provide: yf, useValue: r },
                                    { provide: nv, useValue: i },
                                    { provide: _f, useValue: t },
                                ];
                            let a;
                            r.container
                                ? 'function' == typeof r.container
                                    ? (a = r.container)
                                    : ((a = r.container.type), s.push(...r.container.providers(r)))
                                : (a = fO);
                            const l = new Kb(
                                a,
                                r.viewContainerRef,
                                Mt.create({ parent: o || this._injector, providers: s }),
                                r.componentFactoryResolver,
                            );
                            return t.attach(l).instance;
                        }
                        _attachDialogContent(t, i, r, o) {
                            if (t instanceof _i) {
                                const s = this._createInjector(o, i, r, void 0);
                                let a = { $implicit: o.data, dialogRef: i };
                                o.templateContext &&
                                    (a = { ...a, ...('function' == typeof o.templateContext ? o.templateContext() : o.templateContext) }),
                                    r.attachTemplatePortal(new eO(t, null, a, s));
                            } else {
                                const s = this._createInjector(o, i, r, this._injector),
                                    a = r.attachComponentPortal(new Kb(t, o.viewContainerRef, s, o.componentFactoryResolver));
                                (i.componentRef = a), (i.componentInstance = a.instance);
                            }
                        }
                        _createInjector(t, i, r, o) {
                            const s = t.injector || t.viewContainerRef?.injector,
                                a = [
                                    { provide: GK, useValue: t.data },
                                    { provide: nv, useValue: i },
                                ];
                            return (
                                t.providers &&
                                    ('function' == typeof t.providers ? a.push(...t.providers(i, t, r)) : a.push(...t.providers)),
                                t.direction &&
                                    (!s || !s.get(qb, null, { optional: !0 })) &&
                                    a.push({ provide: qb, useValue: { value: t.direction, change: qi() } }),
                                Mt.create({ parent: s || o, providers: a })
                            );
                        }
                        _removeOpenDialog(t, i) {
                            const r = this.openDialogs.indexOf(t);
                            r > -1 &&
                                (this.openDialogs.splice(r, 1),
                                this.openDialogs.length ||
                                    (this._ariaHiddenElements.forEach((o, s) => {
                                        o ? s.setAttribute('aria-hidden', o) : s.removeAttribute('aria-hidden');
                                    }),
                                    this._ariaHiddenElements.clear(),
                                    i && this._getAfterAllClosed().next()));
                        }
                        _hideNonDialogContentFromAssistiveTechnology() {
                            const t = this._overlayContainer.getContainerElement();
                            if (t.parentElement) {
                                const i = t.parentElement.children;
                                for (let r = i.length - 1; r > -1; r--) {
                                    const o = i[r];
                                    o !== t &&
                                        'SCRIPT' !== o.nodeName &&
                                        'STYLE' !== o.nodeName &&
                                        !o.hasAttribute('aria-live') &&
                                        (this._ariaHiddenElements.set(o, o.getAttribute('aria-hidden')),
                                        o.setAttribute('aria-hidden', 'true'));
                                }
                            }
                        }
                        _getAfterAllClosed() {
                            const t = this._parentDialog;
                            return t ? t._getAfterAllClosed() : this._afterAllClosedAtThisLevel;
                        }
                        static #e = (this.ɵfac = function (i) {
                            return new (i || n)(T(Oa), T(Mt), T(WK, 8), T(n, 12), T(ev), T(mO));
                        });
                        static #t = (this.ɵprov = j({ token: n, factory: n.ɵfac, providedIn: 'root' }));
                    }
                    return n;
                })();
            function iv(n, e) {
                let t = n.length;
                for (; t--; ) e(n[t]);
            }
            function pO(n, e, t) {
                n ? Yi(t, n, e) : e();
            }
            const gO = new Set();
            let Yo,
                ZK = (() => {
                    class n {
                        constructor(t, i) {
                            (this._platform = t),
                                (this._nonce = i),
                                (this._matchMedia = this._platform.isBrowser && window.matchMedia ? window.matchMedia.bind(window) : JK);
                        }
                        matchMedia(t) {
                            return (
                                (this._platform.WEBKIT || this._platform.BLINK) &&
                                    (function QK(n, e) {
                                        if (!gO.has(n))
                                            try {
                                                Yo ||
                                                    ((Yo = document.createElement('style')),
                                                    e && (Yo.nonce = e),
                                                    Yo.setAttribute('type', 'text/css'),
                                                    document.head.appendChild(Yo)),
                                                    Yo.sheet && (Yo.sheet.insertRule(`@media ${n} {body{ }}`, 0), gO.add(n));
                                            } catch (t) {
                                                console.error(t);
                                            }
                                    })(t, this._nonce),
                                this._matchMedia(t)
                            );
                        }
                        static #e = (this.ɵfac = function (i) {
                            return new (i || n)(T(Xt), T(xm, 8));
                        });
                        static #t = (this.ɵprov = j({ token: n, factory: n.ɵfac, providedIn: 'root' }));
                    }
                    return n;
                })();
            function JK(n) {
                return { matches: 'all' === n || '' === n, media: n, addListener: () => {}, removeListener: () => {} };
            }
            let eZ = (() => {
                class n {
                    constructor(t, i) {
                        (this._mediaMatcher = t), (this._zone = i), (this._queries = new Map()), (this._destroySubject = new et());
                    }
                    ngOnDestroy() {
                        this._destroySubject.next(), this._destroySubject.complete();
                    }
                    isMatched(t) {
                        return _O(mh(t)).some((r) => this._registerQuery(r).mql.matches);
                    }
                    observe(t) {
                        let o = (function XK(...n) {
                            const e = nc(n),
                                t = aT(n),
                                { args: i, keys: r } = DT(n);
                            if (0 === i.length) return ic([], e);
                            const o = new ht(
                                (function KK(n, e, t = ns) {
                                    return (i) => {
                                        pO(
                                            e,
                                            () => {
                                                const { length: r } = n,
                                                    o = new Array(r);
                                                let s = r,
                                                    a = r;
                                                for (let l = 0; l < r; l++)
                                                    pO(
                                                        e,
                                                        () => {
                                                            const c = ic(n[l], e);
                                                            let u = !1;
                                                            c.subscribe(
                                                                Ht(
                                                                    i,
                                                                    (d) => {
                                                                        (o[l] = d), u || ((u = !0), a--), a || i.next(t(o.slice()));
                                                                    },
                                                                    () => {
                                                                        --s || i.complete();
                                                                    },
                                                                ),
                                                            );
                                                        },
                                                        i,
                                                    );
                                            },
                                            i,
                                        );
                                    };
                                })(i, e, r ? (s) => IT(r, s) : ns),
                            );
                            return t ? o.pipe(Q_(t)) : o;
                        })(_O(mh(t)).map((s) => this._registerQuery(s).observable));
                        return (
                            (o = tv(
                                o.pipe(Io(1)),
                                o.pipe(
                                    iM(1),
                                    (function nM(n, e = py) {
                                        return Vt((t, i) => {
                                            let r = null,
                                                o = null,
                                                s = null;
                                            const a = () => {
                                                if (r) {
                                                    r.unsubscribe(), (r = null);
                                                    const c = o;
                                                    (o = null), i.next(c);
                                                }
                                            };
                                            function l() {
                                                const c = s + n,
                                                    u = e.now();
                                                if (u < c) return (r = this.schedule(void 0, c - u)), void i.add(r);
                                                a();
                                            }
                                            t.subscribe(
                                                Ht(
                                                    i,
                                                    (c) => {
                                                        (o = c), (s = e.now()), r || ((r = e.schedule(l, n)), i.add(r));
                                                    },
                                                    () => {
                                                        a(), i.complete();
                                                    },
                                                    void 0,
                                                    () => {
                                                        o = r = null;
                                                    },
                                                ),
                                            );
                                        });
                                    })(0),
                                ),
                            )),
                            o.pipe(
                                Ut((s) => {
                                    const a = { matches: !1, breakpoints: {} };
                                    return (
                                        s.forEach(({ matches: l, query: c }) => {
                                            (a.matches = a.matches || l), (a.breakpoints[c] = l);
                                        }),
                                        a
                                    );
                                }),
                            )
                        );
                    }
                    _registerQuery(t) {
                        if (this._queries.has(t)) return this._queries.get(t);
                        const i = this._mediaMatcher.matchMedia(t),
                            o = {
                                observable: new ht((s) => {
                                    const a = (l) => this._zone.run(() => s.next(l));
                                    return (
                                        i.addListener(a),
                                        () => {
                                            i.removeListener(a);
                                        }
                                    );
                                }).pipe(
                                    hO(i),
                                    Ut(({ matches: s }) => ({ query: t, matches: s })),
                                    gy(this._destroySubject),
                                ),
                                mql: i,
                            };
                        return this._queries.set(t, o), o;
                    }
                    static #e = (this.ɵfac = function (i) {
                        return new (i || n)(T(ZK), T(ce));
                    });
                    static #t = (this.ɵprov = j({ token: n, factory: n.ɵfac, providedIn: 'root' }));
                }
                return n;
            })();
            function _O(n) {
                return n
                    .map((e) => e.split(','))
                    .reduce((e, t) => e.concat(t))
                    .map((e) => e.trim());
            }
            const Na_Medium = '(min-width: 960px) and (max-width: 1279.98px)',
                Na_Large = '(min-width: 1280px) and (max-width: 1919.98px)';
            var ne = (function (n) {
                return (
                    (n[(n.State = 0)] = 'State'),
                    (n[(n.Transition = 1)] = 'Transition'),
                    (n[(n.Sequence = 2)] = 'Sequence'),
                    (n[(n.Group = 3)] = 'Group'),
                    (n[(n.Animate = 4)] = 'Animate'),
                    (n[(n.Keyframes = 5)] = 'Keyframes'),
                    (n[(n.Style = 6)] = 'Style'),
                    (n[(n.Trigger = 7)] = 'Trigger'),
                    (n[(n.Reference = 8)] = 'Reference'),
                    (n[(n.AnimateChild = 9)] = 'AnimateChild'),
                    (n[(n.AnimateRef = 10)] = 'AnimateRef'),
                    (n[(n.Query = 11)] = 'Query'),
                    (n[(n.Stagger = 12)] = 'Stagger'),
                    n
                );
            })(ne || {});
            const sr = '*';
            function tZ(n, e) {
                return { type: ne.Trigger, name: n, definitions: e, options: {} };
            }
            function yO(n, e = null) {
                return { type: ne.Animate, styles: e, timings: n };
            }
            function bO(n, e = null) {
                return { type: ne.Group, steps: n, options: e };
            }
            function bf(n) {
                return { type: ne.Style, styles: n, offset: null };
            }
            function vO(n, e, t) {
                return { type: ne.State, name: n, styles: e, options: t };
            }
            function EO(n, e, t = null) {
                return { type: ne.Transition, expr: n, animation: e, options: t };
            }
            function wO(n = null) {
                return { type: ne.AnimateChild, options: n };
            }
            function CO(n, e, t = null) {
                return { type: ne.Query, selector: n, animation: e, options: t };
            }
            class Lc {
                constructor(e = 0, t = 0) {
                    (this._onDoneFns = []),
                        (this._onStartFns = []),
                        (this._onDestroyFns = []),
                        (this._originalOnDoneFns = []),
                        (this._originalOnStartFns = []),
                        (this._started = !1),
                        (this._destroyed = !1),
                        (this._finished = !1),
                        (this._position = 0),
                        (this.parentPlayer = null),
                        (this.totalTime = e + t);
                }
                _onFinish() {
                    this._finished || ((this._finished = !0), this._onDoneFns.forEach((e) => e()), (this._onDoneFns = []));
                }
                onStart(e) {
                    this._originalOnStartFns.push(e), this._onStartFns.push(e);
                }
                onDone(e) {
                    this._originalOnDoneFns.push(e), this._onDoneFns.push(e);
                }
                onDestroy(e) {
                    this._onDestroyFns.push(e);
                }
                hasStarted() {
                    return this._started;
                }
                init() {}
                play() {
                    this.hasStarted() || (this._onStart(), this.triggerMicrotask()), (this._started = !0);
                }
                triggerMicrotask() {
                    queueMicrotask(() => this._onFinish());
                }
                _onStart() {
                    this._onStartFns.forEach((e) => e()), (this._onStartFns = []);
                }
                pause() {}
                restart() {}
                finish() {
                    this._onFinish();
                }
                destroy() {
                    this._destroyed ||
                        ((this._destroyed = !0),
                        this.hasStarted() || this._onStart(),
                        this.finish(),
                        this._onDestroyFns.forEach((e) => e()),
                        (this._onDestroyFns = []));
                }
                reset() {
                    (this._started = !1),
                        (this._finished = !1),
                        (this._onStartFns = this._originalOnStartFns),
                        (this._onDoneFns = this._originalOnDoneFns);
                }
                setPosition(e) {
                    this._position = this.totalTime ? e * this.totalTime : 1;
                }
                getPosition() {
                    return this.totalTime ? this._position / this.totalTime : 1;
                }
                triggerCallback(e) {
                    const t = 'start' == e ? this._onStartFns : this._onDoneFns;
                    t.forEach((i) => i()), (t.length = 0);
                }
            }
            class DO {
                constructor(e) {
                    (this._onDoneFns = []),
                        (this._onStartFns = []),
                        (this._finished = !1),
                        (this._started = !1),
                        (this._destroyed = !1),
                        (this._onDestroyFns = []),
                        (this.parentPlayer = null),
                        (this.totalTime = 0),
                        (this.players = e);
                    let t = 0,
                        i = 0,
                        r = 0;
                    const o = this.players.length;
                    0 == o
                        ? queueMicrotask(() => this._onFinish())
                        : this.players.forEach((s) => {
                              s.onDone(() => {
                                  ++t == o && this._onFinish();
                              }),
                                  s.onDestroy(() => {
                                      ++i == o && this._onDestroy();
                                  }),
                                  s.onStart(() => {
                                      ++r == o && this._onStart();
                                  });
                          }),
                        (this.totalTime = this.players.reduce((s, a) => Math.max(s, a.totalTime), 0));
                }
                _onFinish() {
                    this._finished || ((this._finished = !0), this._onDoneFns.forEach((e) => e()), (this._onDoneFns = []));
                }
                init() {
                    this.players.forEach((e) => e.init());
                }
                onStart(e) {
                    this._onStartFns.push(e);
                }
                _onStart() {
                    this.hasStarted() || ((this._started = !0), this._onStartFns.forEach((e) => e()), (this._onStartFns = []));
                }
                onDone(e) {
                    this._onDoneFns.push(e);
                }
                onDestroy(e) {
                    this._onDestroyFns.push(e);
                }
                hasStarted() {
                    return this._started;
                }
                play() {
                    this.parentPlayer || this.init(), this._onStart(), this.players.forEach((e) => e.play());
                }
                pause() {
                    this.players.forEach((e) => e.pause());
                }
                restart() {
                    this.players.forEach((e) => e.restart());
                }
                finish() {
                    this._onFinish(), this.players.forEach((e) => e.finish());
                }
                destroy() {
                    this._onDestroy();
                }
                _onDestroy() {
                    this._destroyed ||
                        ((this._destroyed = !0),
                        this._onFinish(),
                        this.players.forEach((e) => e.destroy()),
                        this._onDestroyFns.forEach((e) => e()),
                        (this._onDestroyFns = []));
                }
                reset() {
                    this.players.forEach((e) => e.reset()), (this._destroyed = !1), (this._finished = !1), (this._started = !1);
                }
                setPosition(e) {
                    const t = e * this.totalTime;
                    this.players.forEach((i) => {
                        const r = i.totalTime ? Math.min(1, t / i.totalTime) : 1;
                        i.setPosition(r);
                    });
                }
                getPosition() {
                    const e = this.players.reduce((t, i) => (null === t || i.totalTime > t.totalTime ? i : t), null);
                    return null != e ? e.getPosition() : 0;
                }
                beforeDestroy() {
                    this.players.forEach((e) => {
                        e.beforeDestroy && e.beforeDestroy();
                    });
                }
                triggerCallback(e) {
                    const t = 'start' == e ? this._onStartFns : this._onDoneFns;
                    t.forEach((i) => i()), (t.length = 0);
                }
            }
            function aZ(n, e) {}
            const lZ = {
                bottomSheetState: tZ('state', [
                    vO('void, hidden', bf({ transform: 'translateY(100%)' })),
                    vO('visible', bf({ transform: 'translateY(0%)' })),
                    EO(
                        'visible => void, visible => hidden',
                        bO([yO(`${pM.COMPLEX} ${mM.ACCELERATION_CURVE}`), CO('@*', wO(), { optional: !0 })]),
                    ),
                    EO('void => visible', bO([yO(`${pM.EXITING} ${mM.DECELERATION_CURVE}`), CO('@*', wO(), { optional: !0 })])),
                ]),
            };
            let cZ = (() => {
                class n extends fO {
                    constructor(t, i, r, o, s, a, l, c, u) {
                        super(t, i, r, o, s, a, l, u),
                            (this._animationState = 'void'),
                            (this._animationStateChanged = new en()),
                            (this._breakpointSubscription = c.observe([Na_Medium, Na_Large, '(min-width: 1920px)']).subscribe(() => {
                                this._toggleClass('mat-bottom-sheet-container-medium', c.isMatched(Na_Medium)),
                                    this._toggleClass('mat-bottom-sheet-container-large', c.isMatched(Na_Large)),
                                    this._toggleClass('mat-bottom-sheet-container-xlarge', c.isMatched('(min-width: 1920px)'));
                            }));
                    }
                    enter() {
                        this._destroyed || ((this._animationState = 'visible'), this._changeDetectorRef.detectChanges());
                    }
                    exit() {
                        this._destroyed || ((this._animationState = 'hidden'), this._changeDetectorRef.markForCheck());
                    }
                    ngOnDestroy() {
                        super.ngOnDestroy(), this._breakpointSubscription.unsubscribe(), (this._destroyed = !0);
                    }
                    _onAnimationDone(t) {
                        'visible' === t.toState && this._trapFocus(), this._animationStateChanged.emit(t);
                    }
                    _onAnimationStart(t) {
                        this._animationStateChanged.emit(t);
                    }
                    _captureInitialFocus() {}
                    _toggleClass(t, i) {
                        this._elementRef.nativeElement.classList.toggle(t, i);
                    }
                    static #e = (this.ɵfac = function (i) {
                        return new (i || n)(P(Tt), P(cM), P(De, 8), P(yf), P(_y), P(ce), P(_f), P(eZ), P(yy));
                    });
                    static #t = (this.ɵcmp = Pi({
                        type: n,
                        selectors: [['mat-bottom-sheet-container']],
                        hostAttrs: ['tabindex', '-1', 1, 'mat-bottom-sheet-container'],
                        hostVars: 4,
                        hostBindings: function (i, r) {
                            1 & i &&
                                qg('@state.start', function (s) {
                                    return r._onAnimationStart(s);
                                })('@state.done', function (s) {
                                    return r._onAnimationDone(s);
                                }),
                                2 & i &&
                                    (xr('role', r._config.role)('aria-modal', r._config.ariaModal)('aria-label', r._config.ariaLabel),
                                    Wg('@state', r._animationState));
                        },
                        standalone: !0,
                        features: [Dr, Gi],
                        decls: 1,
                        vars: 0,
                        consts: [['cdkPortalOutlet', '']],
                        template: function (i, r) {
                            1 & i && yo(0, aZ, 0, 0, 'ng-template', 0);
                        },
                        dependencies: [Qb],
                        styles: [
                            '.mat-bottom-sheet-container{box-shadow:0px 8px 10px -5px rgba(0, 0, 0, 0.2), 0px 16px 24px 2px rgba(0, 0, 0, 0.14), 0px 6px 30px 5px rgba(0, 0, 0, 0.12);padding:8px 16px;min-width:100vw;box-sizing:border-box;display:block;outline:0;max-height:80vh;overflow:auto;background:var(--mat-bottom-sheet-container-background-color);color:var(--mat-bottom-sheet-container-text-color);font-family:var(--mat-bottom-sheet-container-text-font);font-size:var(--mat-bottom-sheet-container-text-size);line-height:var(--mat-bottom-sheet-container-text-line-height);font-weight:var(--mat-bottom-sheet-container-text-weight);letter-spacing:var(--mat-bottom-sheet-container-text-tracking)}.cdk-high-contrast-active .mat-bottom-sheet-container{outline:1px solid}.mat-bottom-sheet-container-xlarge,.mat-bottom-sheet-container-large,.mat-bottom-sheet-container-medium{border-top-left-radius:var(--mat-bottom-sheet-container-shape);border-top-right-radius:var(--mat-bottom-sheet-container-shape)}.mat-bottom-sheet-container-medium{min-width:384px;max-width:calc(100vw - 128px)}.mat-bottom-sheet-container-large{min-width:512px;max-width:calc(100vw - 256px)}.mat-bottom-sheet-container-xlarge{min-width:576px;max-width:calc(100vw - 384px)}',
                        ],
                        encapsulation: 2,
                        data: { animation: [lZ.bottomSheetState] },
                    }));
                }
                return n;
            })();
            const uZ = new L('MatBottomSheetData');
            class dZ {
                constructor() {
                    (this.data = null),
                        (this.hasBackdrop = !0),
                        (this.disableClose = !1),
                        (this.ariaLabel = null),
                        (this.ariaModal = !0),
                        (this.closeOnNavigation = !0),
                        (this.autoFocus = 'dialog'),
                        (this.restoreFocus = !0);
                }
            }
            class ov {
                get instance() {
                    return this._ref.componentInstance;
                }
                get componentRef() {
                    return this._ref.componentRef;
                }
                constructor(e, t, i) {
                    (this._ref = e),
                        (this._afterOpened = new et()),
                        (this.containerInstance = i),
                        (this.disableClose = t.disableClose),
                        i._animationStateChanged
                            .pipe(
                                Xi((r) => 'done' === r.phaseName && 'visible' === r.toState),
                                Io(1),
                            )
                            .subscribe(() => {
                                this._afterOpened.next(), this._afterOpened.complete();
                            }),
                        i._animationStateChanged
                            .pipe(
                                Xi((r) => 'done' === r.phaseName && 'hidden' === r.toState),
                                Io(1),
                            )
                            .subscribe(() => {
                                clearTimeout(this._closeFallbackTimeout), this._ref.close(this._result);
                            }),
                        e.overlayRef.detachments().subscribe(() => {
                            this._ref.close(this._result);
                        }),
                        nO(this.backdropClick(), this.keydownEvents().pipe(Xi((r) => 27 === r.keyCode))).subscribe((r) => {
                            !this.disableClose && ('keydown' !== r.type || !hy(r)) && (r.preventDefault(), this.dismiss());
                        });
                }
                dismiss(e) {
                    this.containerInstance &&
                        (this.containerInstance._animationStateChanged
                            .pipe(
                                Xi((t) => 'start' === t.phaseName),
                                Io(1),
                            )
                            .subscribe((t) => {
                                (this._closeFallbackTimeout = setTimeout(() => {
                                    this._ref.close(this._result);
                                }, t.totalTime + 100)),
                                    this._ref.overlayRef.detachBackdrop();
                            }),
                        (this._result = e),
                        this.containerInstance.exit(),
                        (this.containerInstance = null));
                }
                afterDismissed() {
                    return this._ref.closed;
                }
                afterOpened() {
                    return this._afterOpened;
                }
                backdropClick() {
                    return this._ref.backdropClick;
                }
                keydownEvents() {
                    return this._ref.keydownEvents;
                }
            }
            const hZ = new L('mat-bottom-sheet-default-options');
            let fZ = (() => {
                class n {
                    get _openedBottomSheetRef() {
                        const t = this._parentBottomSheet;
                        return t ? t._openedBottomSheetRef : this._bottomSheetRefAtThisLevel;
                    }
                    set _openedBottomSheetRef(t) {
                        this._parentBottomSheet
                            ? (this._parentBottomSheet._openedBottomSheetRef = t)
                            : (this._bottomSheetRefAtThisLevel = t);
                    }
                    constructor(t, i, r, o) {
                        (this._overlay = t),
                            (this._parentBottomSheet = r),
                            (this._defaultOptions = o),
                            (this._bottomSheetRefAtThisLevel = null),
                            (this._dialog = i.get(qK));
                    }
                    open(t, i) {
                        const r = { ...(this._defaultOptions || new dZ()), ...i };
                        let o;
                        return (
                            this._dialog.open(t, {
                                ...r,
                                disableClose: !0,
                                closeOnOverlayDetachments: !1,
                                maxWidth: '100%',
                                container: cZ,
                                scrollStrategy: r.scrollStrategy || this._overlay.scrollStrategies.block(),
                                positionStrategy: this._overlay.position().global().centerHorizontally().bottom('0'),
                                templateContext: () => ({ bottomSheetRef: o }),
                                providers: (s, a, l) => (
                                    (o = new ov(s, r, l)),
                                    [
                                        { provide: ov, useValue: o },
                                        { provide: uZ, useValue: r.data },
                                    ]
                                ),
                            }),
                            o.afterDismissed().subscribe(() => {
                                this._openedBottomSheetRef === o && (this._openedBottomSheetRef = null);
                            }),
                            this._openedBottomSheetRef
                                ? (this._openedBottomSheetRef.afterDismissed().subscribe(() => o.containerInstance?.enter()),
                                  this._openedBottomSheetRef.dismiss())
                                : o.containerInstance.enter(),
                            (this._openedBottomSheetRef = o),
                            o
                        );
                    }
                    dismiss(t) {
                        this._openedBottomSheetRef && this._openedBottomSheetRef.dismiss(t);
                    }
                    ngOnDestroy() {
                        this._bottomSheetRefAtThisLevel && this._bottomSheetRefAtThisLevel.dismiss();
                    }
                    static #e = (this.ɵfac = function (i) {
                        return new (i || n)(T(Oa), T(Mt), T(n, 12), T(hZ, 8));
                    });
                    static #t = (this.ɵprov = j({ token: n, factory: n.ɵfac, providedIn: 'root' }));
                }
                return n;
            })();
            const IO = (n, e) => e.name;
            function mZ(n, e) {
                if (1 & n) {
                    const t = Gg();
                    Bt(0, 'button', 5),
                        na('click', function () {
                            const o = dm(t).$implicit;
                            return hm(Rd().geoService.setTileSource(o));
                        }),
                        Tr(1),
                        an();
                }
                if (2 & n) {
                    const t = e.$implicit;
                    Ng('disabled', t === Rd().geoService.selectedTileSource), Os(), zl(' ', t.name, ' ');
                }
            }
            function pZ(n, e) {
                if (1 & n) {
                    const t = Gg();
                    Bt(0, 'button', 6),
                        na('click', function () {
                            const o = dm(t).$implicit;
                            return hm(Rd().geoService.setVectorSource(o));
                        }),
                        Tr(1),
                        an();
                }
                if (2 & n) {
                    const t = e.$implicit;
                    Os(), zl(' ', t.name, ' ');
                }
            }
            let gZ = (() => {
                    class n {
                        constructor(t, i, r) {
                            (this.controlStateService = t), (this.geoService = i), (this.bottomSheetRef = r);
                        }
                        ngOnInit() {
                            this.bottomSheetRef.afterOpened().subscribe(() => this.controlStateService.set(!0)),
                                this.bottomSheetRef.afterDismissed().subscribe(() => this.controlStateService.set(!1));
                        }
                        close() {
                            this.bottomSheetRef.dismiss();
                        }
                        static #e = (this.ɵfac = function (i) {
                            return new (i || n)(P(MM), P(XA), P(ov));
                        });
                        static #t = (this.ɵcmp = Pi({
                            type: n,
                            selectors: [['app-layer-control']],
                            standalone: !0,
                            features: [Gi],
                            decls: 20,
                            vars: 0,
                            consts: [
                                [1, 'layer-headline'],
                                [1, 'headline'],
                                [1, 'close-button'],
                                ['mat-icon-button', '', 3, 'click'],
                                [1, 'item-list'],
                                ['mat-stroked-button', '', 3, 'disabled', 'click'],
                                ['mat-stroked-button', '', 3, 'click'],
                                ['mat-stroked-button', '', 3, 'disabled'],
                                ['mat-stroked-button', ''],
                            ],
                            template: function (i, r) {
                                1 & i &&
                                    (Bt(0, 'div', 0)(1, 'p', 1)(2, 'span'),
                                    Tr(3, 'Layer'),
                                    an()(),
                                    Bt(4, 'div', 2)(5, 'button', 3),
                                    na('click', function () {
                                        return r.close();
                                    }),
                                    Bt(6, 'mat-icon'),
                                    Tr(7, 'close'),
                                    an()()()(),
                                    Bt(8, 'div', 4),
                                    Bg(9, mZ, 2, 2, 'button', 7, IO),
                                    an(),
                                    Bt(11, 'p', 1)(12, 'span'),
                                    Tr(13, 'Display GeoJSON'),
                                    an(),
                                    Ei(14, 'br'),
                                    Bt(15, 'small'),
                                    Tr(16, 'To incorporate data, simply drag a GeoJSON file and drop it onto the map.'),
                                    an()(),
                                    Bt(17, 'div', 4),
                                    Bg(18, pZ, 2, 1, 'button', 8, IO),
                                    an()),
                                    2 & i && (Os(9), jg(r.geoService.tileSources), Os(9), jg(r.geoService.vectorSources));
                            },
                            dependencies: [g8, ZT, b8],
                            styles: [
                                '[_nghost-%COMP%]   .item-list[_ngcontent-%COMP%]{display:grid;grid-gap:5px;margin-bottom:1rem}[_nghost-%COMP%]   .layer-headline[_ngcontent-%COMP%]{align-items:end;display:flex;justify-content:space-between}[_nghost-%COMP%]   .headline[_ngcontent-%COMP%]{font-size:medium}[_nghost-%COMP%]   .headline[_ngcontent-%COMP%]   span[_ngcontent-%COMP%]{font-weight:500}',
                            ],
                        }));
                    }
                    return n;
                })(),
                _Z = (() => {
                    class n {
                        constructor(t, i, r) {
                            (this.controlStateService = t),
                                (this.geoService = i),
                                (this.bottomSheet = r),
                                (this.isControlsOpened = this.controlStateService.sheetState);
                        }
                        ngAfterViewInit() {
                            this.geoService.updateView(), this.geoService.setTileSource(), this.geoService.updateSize();
                        }
                        openControls() {
                            this.bottomSheet.open(gZ, { autoFocus: !1 });
                        }
                        static #e = (this.ɵfac = function (i) {
                            return new (i || n)(P(MM), P(XA), P(fZ));
                        });
                        static #t = (this.ɵcmp = Pi({
                            type: n,
                            selectors: [['app-root']],
                            standalone: !0,
                            features: [Gi],
                            decls: 4,
                            vars: 1,
                            consts: [
                                ['id', 'map', 1, 'map'],
                                ['color', 'primary', 'mat-mini-fab', '', 1, 'map-controls-button', 3, 'click'],
                            ],
                            template: function (i, r) {
                                1 & i &&
                                    (Ei(0, 'div', 0),
                                    Bt(1, 'button', 1),
                                    na('click', function () {
                                        return r.openControls();
                                    }),
                                    Bt(2, 'mat-icon'),
                                    Tr(3),
                                    an()()),
                                    2 & i && (Os(3), Zg(r.isControlsOpened() ? 'expand_more' : 'expand_less'));
                            },
                            dependencies: [ZT, y8],
                            styles: [
                                '[_nghost-%COMP%]   .map[_ngcontent-%COMP%]{width:100%;height:100vh}[_nghost-%COMP%]   .map-controls-button[_ngcontent-%COMP%]{position:fixed;left:50%;bottom:.5em;transform:translate(-50%,-50%);margin:0 auto}',
                            ],
                        }));
                    }
                    return n;
                })();
            function xO(n) {
                return new S(3e3, !1);
            }
            function Yr(n) {
                switch (n.length) {
                    case 0:
                        return new Lc();
                    case 1:
                        return n[0];
                    default:
                        return new DO(n);
                }
            }
            function SO(n, e, t = new Map(), i = new Map()) {
                const r = [],
                    o = [];
                let s = -1,
                    a = null;
                if (
                    (e.forEach((l) => {
                        const c = l.get('offset'),
                            u = c == s,
                            d = (u && a) || new Map();
                        l.forEach((h, f) => {
                            let m = f,
                                p = h;
                            if ('offset' !== f)
                                switch (((m = n.normalizePropertyName(m, r)), p)) {
                                    case '!':
                                        p = t.get(f);
                                        break;
                                    case sr:
                                        p = i.get(f);
                                        break;
                                    default:
                                        p = n.normalizeStyleValue(f, m, p, r);
                                }
                            d.set(m, p);
                        }),
                            u || o.push(d),
                            (a = d),
                            (s = c);
                    }),
                    r.length)
                )
                    throw (function VZ(n) {
                        return new S(3502, !1);
                    })();
                return o;
            }
            function sv(n, e, t, i) {
                switch (e) {
                    case 'start':
                        n.onStart(() => i(t && av(t, 'start', n)));
                        break;
                    case 'done':
                        n.onDone(() => i(t && av(t, 'done', n)));
                        break;
                    case 'destroy':
                        n.onDestroy(() => i(t && av(t, 'destroy', n)));
                }
            }
            function av(n, e, t) {
                const o = lv(n.element, n.triggerName, n.fromState, n.toState, e || n.phaseName, t.totalTime ?? n.totalTime, !!t.disabled),
                    s = n._data;
                return null != s && (o._data = s), o;
            }
            function lv(n, e, t, i, r = '', o = 0, s) {
                return { element: n, triggerName: e, fromState: t, toState: i, phaseName: r, totalTime: o, disabled: !!s };
            }
            function Dn(n, e, t) {
                let i = n.get(e);
                return i || n.set(e, (i = t)), i;
            }
            function TO(n) {
                const e = n.indexOf(':');
                return [n.substring(1, e), n.slice(e + 1)];
            }
            const QZ = typeof document > 'u' ? null : document.documentElement;
            function cv(n) {
                const e = n.parentNode || n.host || null;
                return e === QZ ? null : e;
            }
            let qo = null,
                MO = !1;
            function RO(n, e) {
                for (; e; ) {
                    if (e === n) return !0;
                    e = cv(e);
                }
                return !1;
            }
            function AO(n, e, t) {
                if (t) return Array.from(n.querySelectorAll(e));
                const i = n.querySelector(e);
                return i ? [i] : [];
            }
            let uv = (() => {
                class n {
                    validateStyleProperty(t) {
                        return (function e6(n) {
                            qo ||
                                ((qo =
                                    (function t6() {
                                        return typeof document < 'u' ? document.body : null;
                                    })() || {}),
                                (MO = !!qo.style && 'WebkitAppearance' in qo.style));
                            let e = !0;
                            return (
                                qo.style &&
                                    !(function JZ(n) {
                                        return 'ebkit' == n.substring(1, 6);
                                    })(n) &&
                                    ((e = n in qo.style), !e && MO && (e = 'Webkit' + n.charAt(0).toUpperCase() + n.slice(1) in qo.style)),
                                e
                            );
                        })(t);
                    }
                    matchesElement(t, i) {
                        return !1;
                    }
                    containsElement(t, i) {
                        return RO(t, i);
                    }
                    getParentElement(t) {
                        return cv(t);
                    }
                    query(t, i, r) {
                        return AO(t, i, r);
                    }
                    computeStyle(t, i, r) {
                        return r || '';
                    }
                    animate(t, i, r, o, s, a = [], l) {
                        return new Lc(r, o);
                    }
                    static #e = (this.ɵfac = function (i) {
                        return new (i || n)();
                    });
                    static #t = (this.ɵprov = j({ token: n, factory: n.ɵfac }));
                }
                return n;
            })();
            class dv {
                static #e = (this.NOOP = new uv());
            }
            class hv {}
            const i6 = 1e3,
                fv = 'ng-enter',
                vf = 'ng-leave',
                Ef = 'ng-trigger',
                wf = '.ng-trigger',
                NO = 'ng-animating',
                mv = '.ng-animating';
            function ar(n) {
                if ('number' == typeof n) return n;
                const e = n.match(/^(-?[\.\d]+)(m?s)/);
                return !e || e.length < 2 ? 0 : pv(parseFloat(e[1]), e[2]);
            }
            function pv(n, e) {
                return 's' === e ? n * i6 : n;
            }
            function Cf(n, e, t) {
                return n.hasOwnProperty('duration')
                    ? n
                    : (function o6(n, e, t) {
                          let r,
                              o = 0,
                              s = '';
                          if ('string' == typeof n) {
                              const a = n.match(/^(-?[\.\d]+)(m?s)(?:\s+(-?[\.\d]+)(m?s))?(?:\s+([-a-z]+(?:\(.+?\))?))?$/i);
                              if (null === a) return e.push(xO()), { duration: 0, delay: 0, easing: '' };
                              r = pv(parseFloat(a[1]), a[2]);
                              const l = a[3];
                              null != l && (o = pv(parseFloat(l), a[4]));
                              const c = a[5];
                              c && (s = c);
                          } else r = n;
                          if (!t) {
                              let a = !1,
                                  l = e.length;
                              r < 0 &&
                                  (e.push(
                                      (function yZ() {
                                          return new S(3100, !1);
                                      })(),
                                  ),
                                  (a = !0)),
                                  o < 0 &&
                                      (e.push(
                                          (function bZ() {
                                              return new S(3101, !1);
                                          })(),
                                      ),
                                      (a = !0)),
                                  a && e.splice(l, 0, xO());
                          }
                          return { duration: r, delay: o, easing: s };
                      })(n, e, t);
            }
            function Ri(n, e, t) {
                e.forEach((i, r) => {
                    const o = _v(r);
                    t && !t.has(r) && t.set(r, n.style[o]), (n.style[o] = i);
                });
            }
            function Xo(n, e) {
                e.forEach((t, i) => {
                    const r = _v(i);
                    n.style[r] = '';
                });
            }
            function Bc(n) {
                return Array.isArray(n)
                    ? 1 == n.length
                        ? n[0]
                        : (function nZ(n, e = null) {
                              return { type: ne.Sequence, steps: n, options: e };
                          })(n)
                    : n;
            }
            const gv = new RegExp('{{\\s*(.+?)\\s*}}', 'g');
            function kO(n) {
                let e = [];
                if ('string' == typeof n) {
                    let t;
                    for (; (t = gv.exec(n)); ) e.push(t[1]);
                    gv.lastIndex = 0;
                }
                return e;
            }
            function jc(n, e, t) {
                const i = `${n}`,
                    r = i.replace(gv, (o, s) => {
                        let a = e[s];
                        return (
                            null == a &&
                                (t.push(
                                    (function EZ(n) {
                                        return new S(3003, !1);
                                    })(),
                                ),
                                (a = '')),
                            a.toString()
                        );
                    });
                return r == i ? n : r;
            }
            const l6 = /-+([a-z0-9])/g;
            function _v(n) {
                return n.replace(l6, (...e) => e[1].toUpperCase());
            }
            function In(n, e, t) {
                switch (e.type) {
                    case ne.Trigger:
                        return n.visitTrigger(e, t);
                    case ne.State:
                        return n.visitState(e, t);
                    case ne.Transition:
                        return n.visitTransition(e, t);
                    case ne.Sequence:
                        return n.visitSequence(e, t);
                    case ne.Group:
                        return n.visitGroup(e, t);
                    case ne.Animate:
                        return n.visitAnimate(e, t);
                    case ne.Keyframes:
                        return n.visitKeyframes(e, t);
                    case ne.Style:
                        return n.visitStyle(e, t);
                    case ne.Reference:
                        return n.visitReference(e, t);
                    case ne.AnimateChild:
                        return n.visitAnimateChild(e, t);
                    case ne.AnimateRef:
                        return n.visitAnimateRef(e, t);
                    case ne.Query:
                        return n.visitQuery(e, t);
                    case ne.Stagger:
                        return n.visitStagger(e, t);
                    default:
                        throw (function wZ(n) {
                            return new S(3004, !1);
                        })();
                }
            }
            function yv(n, e) {
                return window.getComputedStyle(n)[e];
            }
            const d6 = new Set([
                'width',
                'height',
                'minWidth',
                'minHeight',
                'maxWidth',
                'maxHeight',
                'left',
                'top',
                'bottom',
                'right',
                'fontSize',
                'outlineWidth',
                'outlineOffset',
                'paddingTop',
                'paddingLeft',
                'paddingBottom',
                'paddingRight',
                'marginTop',
                'marginLeft',
                'marginBottom',
                'marginRight',
                'borderRadius',
                'borderWidth',
                'borderTopWidth',
                'borderLeftWidth',
                'borderRightWidth',
                'borderBottomWidth',
                'textIndent',
                'perspective',
            ]);
            class FO extends hv {
                normalizePropertyName(e, t) {
                    return _v(e);
                }
                normalizeStyleValue(e, t, i, r) {
                    let o = '';
                    const s = i.toString().trim();
                    if (d6.has(t) && 0 !== i && '0' !== i)
                        if ('number' == typeof i) o = 'px';
                        else {
                            const a = i.match(/^[+-]?[\d\.]+([a-z]*)$/);
                            a &&
                                0 == a[1].length &&
                                r.push(
                                    (function CZ(n, e) {
                                        return new S(3005, !1);
                                    })(),
                                );
                        }
                    return s + o;
                }
            }
            const Df = '*';
            const If = new Set(['true', '1']),
                xf = new Set(['false', '0']);
            function LO(n, e) {
                const t = If.has(n) || xf.has(n),
                    i = If.has(e) || xf.has(e);
                return (r, o) => {
                    let s = n == Df || n == r,
                        a = e == Df || e == o;
                    return (
                        !s && t && 'boolean' == typeof r && (s = r ? If.has(n) : xf.has(n)),
                        !a && i && 'boolean' == typeof o && (a = o ? If.has(e) : xf.has(e)),
                        s && a
                    );
                };
            }
            const p6 = new RegExp('s*:selfs*,?', 'g');
            function bv(n, e, t, i) {
                return new g6(n).build(e, t, i);
            }
            class g6 {
                constructor(e) {
                    this._driver = e;
                }
                build(e, t, i) {
                    const r = new b6(t);
                    return this._resetContextStyleTimingState(r), In(this, Bc(e), r);
                }
                _resetContextStyleTimingState(e) {
                    (e.currentQuerySelector = ''),
                        (e.collectedStyles = new Map()),
                        e.collectedStyles.set('', new Map()),
                        (e.currentTime = 0);
                }
                visitTrigger(e, t) {
                    let i = (t.queryCount = 0),
                        r = (t.depCount = 0);
                    const o = [],
                        s = [];
                    return (
                        '@' == e.name.charAt(0) &&
                            t.errors.push(
                                (function DZ() {
                                    return new S(3006, !1);
                                })(),
                            ),
                        e.definitions.forEach((a) => {
                            if ((this._resetContextStyleTimingState(t), a.type == ne.State)) {
                                const l = a,
                                    c = l.name;
                                c
                                    .toString()
                                    .split(/\s*,\s*/)
                                    .forEach((u) => {
                                        (l.name = u), o.push(this.visitState(l, t));
                                    }),
                                    (l.name = c);
                            } else if (a.type == ne.Transition) {
                                const l = this.visitTransition(a, t);
                                (i += l.queryCount), (r += l.depCount), s.push(l);
                            } else
                                t.errors.push(
                                    (function IZ() {
                                        return new S(3007, !1);
                                    })(),
                                );
                        }),
                        { type: ne.Trigger, name: e.name, states: o, transitions: s, queryCount: i, depCount: r, options: null }
                    );
                }
                visitState(e, t) {
                    const i = this.visitStyle(e.styles, t),
                        r = (e.options && e.options.params) || null;
                    if (i.containsDynamicStyles) {
                        const o = new Set(),
                            s = r || {};
                        i.styles.forEach((a) => {
                            a instanceof Map &&
                                a.forEach((l) => {
                                    kO(l).forEach((c) => {
                                        s.hasOwnProperty(c) || o.add(c);
                                    });
                                });
                        }),
                            o.size &&
                                t.errors.push(
                                    (function xZ(n, e) {
                                        return new S(3008, !1);
                                    })(0, o.values()),
                                );
                    }
                    return { type: ne.State, name: e.name, style: i, options: r ? { params: r } : null };
                }
                visitTransition(e, t) {
                    (t.queryCount = 0), (t.depCount = 0);
                    const i = In(this, Bc(e.animation), t),
                        r = (function h6(n, e) {
                            const t = [];
                            return (
                                'string' == typeof n
                                    ? n.split(/\s*,\s*/).forEach((i) =>
                                          (function f6(n, e, t) {
                                              if (':' == n[0]) {
                                                  const l = (function m6(n, e) {
                                                      switch (n) {
                                                          case ':enter':
                                                              return 'void => *';
                                                          case ':leave':
                                                              return '* => void';
                                                          case ':increment':
                                                              return (t, i) => parseFloat(i) > parseFloat(t);
                                                          case ':decrement':
                                                              return (t, i) => parseFloat(i) < parseFloat(t);
                                                          default:
                                                              return (
                                                                  e.push(
                                                                      (function FZ(n) {
                                                                          return new S(3016, !1);
                                                                      })(),
                                                                  ),
                                                                  '* => *'
                                                              );
                                                      }
                                                  })(n, t);
                                                  if ('function' == typeof l) return void e.push(l);
                                                  n = l;
                                              }
                                              const i = n.match(/^(\*|[-\w]+)\s*(<?[=-]>)\s*(\*|[-\w]+)$/);
                                              if (null == i || i.length < 4)
                                                  return (
                                                      t.push(
                                                          (function kZ(n) {
                                                              return new S(3015, !1);
                                                          })(),
                                                      ),
                                                      e
                                                  );
                                              const r = i[1],
                                                  o = i[2],
                                                  s = i[3];
                                              e.push(LO(r, s)), '<' == o[0] && (r != Df || s != Df) && e.push(LO(s, r));
                                          })(i, t, e),
                                      )
                                    : t.push(n),
                                t
                            );
                        })(e.expr, t.errors);
                    return {
                        type: ne.Transition,
                        matchers: r,
                        animation: i,
                        queryCount: t.queryCount,
                        depCount: t.depCount,
                        options: Ko(e.options),
                    };
                }
                visitSequence(e, t) {
                    return { type: ne.Sequence, steps: e.steps.map((i) => In(this, i, t)), options: Ko(e.options) };
                }
                visitGroup(e, t) {
                    const i = t.currentTime;
                    let r = 0;
                    const o = e.steps.map((s) => {
                        t.currentTime = i;
                        const a = In(this, s, t);
                        return (r = Math.max(r, t.currentTime)), a;
                    });
                    return (t.currentTime = r), { type: ne.Group, steps: o, options: Ko(e.options) };
                }
                visitAnimate(e, t) {
                    const i = (function E6(n, e) {
                        if (n.hasOwnProperty('duration')) return n;
                        if ('number' == typeof n) return vv(Cf(n, e).duration, 0, '');
                        const t = n;
                        if (t.split(/\s+/).some((o) => '{' == o.charAt(0) && '{' == o.charAt(1))) {
                            const o = vv(0, 0, '');
                            return (o.dynamic = !0), (o.strValue = t), o;
                        }
                        const r = Cf(t, e);
                        return vv(r.duration, r.delay, r.easing);
                    })(e.timings, t.errors);
                    t.currentAnimateTimings = i;
                    let r,
                        o = e.styles ? e.styles : bf({});
                    if (o.type == ne.Keyframes) r = this.visitKeyframes(o, t);
                    else {
                        let s = e.styles,
                            a = !1;
                        if (!s) {
                            a = !0;
                            const c = {};
                            i.easing && (c.easing = i.easing), (s = bf(c));
                        }
                        t.currentTime += i.duration + i.delay;
                        const l = this.visitStyle(s, t);
                        (l.isEmptyStep = a), (r = l);
                    }
                    return (t.currentAnimateTimings = null), { type: ne.Animate, timings: i, style: r, options: null };
                }
                visitStyle(e, t) {
                    const i = this._makeStyleAst(e, t);
                    return this._validateStyleAst(i, t), i;
                }
                _makeStyleAst(e, t) {
                    const i = [],
                        r = Array.isArray(e.styles) ? e.styles : [e.styles];
                    for (let a of r)
                        'string' == typeof a ? (a === sr ? i.push(a) : t.errors.push(new S(3002, !1))) : i.push(new Map(Object.entries(a)));
                    let o = !1,
                        s = null;
                    return (
                        i.forEach((a) => {
                            if (a instanceof Map && (a.has('easing') && ((s = a.get('easing')), a.delete('easing')), !o))
                                for (let l of a.values())
                                    if (l.toString().indexOf('{{') >= 0) {
                                        o = !0;
                                        break;
                                    }
                        }),
                        { type: ne.Style, styles: i, easing: s, offset: e.offset, containsDynamicStyles: o, options: null }
                    );
                }
                _validateStyleAst(e, t) {
                    const i = t.currentAnimateTimings;
                    let r = t.currentTime,
                        o = t.currentTime;
                    i && o > 0 && (o -= i.duration + i.delay),
                        e.styles.forEach((s) => {
                            'string' != typeof s &&
                                s.forEach((a, l) => {
                                    const c = t.collectedStyles.get(t.currentQuerySelector),
                                        u = c.get(l);
                                    let d = !0;
                                    u &&
                                        (o != r &&
                                            o >= u.startTime &&
                                            r <= u.endTime &&
                                            (t.errors.push(
                                                (function TZ(n, e, t, i, r) {
                                                    return new S(3010, !1);
                                                })(),
                                            ),
                                            (d = !1)),
                                        (o = u.startTime)),
                                        d && c.set(l, { startTime: o, endTime: r }),
                                        t.options &&
                                            (function a6(n, e, t) {
                                                const i = e.params || {},
                                                    r = kO(n);
                                                r.length &&
                                                    r.forEach((o) => {
                                                        i.hasOwnProperty(o) ||
                                                            t.push(
                                                                (function vZ(n) {
                                                                    return new S(3001, !1);
                                                                })(),
                                                            );
                                                    });
                                            })(a, t.options, t.errors);
                                });
                        });
                }
                visitKeyframes(e, t) {
                    const i = { type: ne.Keyframes, styles: [], options: null };
                    if (!t.currentAnimateTimings)
                        return (
                            t.errors.push(
                                (function MZ() {
                                    return new S(3011, !1);
                                })(),
                            ),
                            i
                        );
                    let o = 0;
                    const s = [];
                    let a = !1,
                        l = !1,
                        c = 0;
                    const u = e.steps.map((y) => {
                        const _ = this._makeStyleAst(y, t);
                        let b =
                                null != _.offset
                                    ? _.offset
                                    : (function v6(n) {
                                          if ('string' == typeof n) return null;
                                          let e = null;
                                          if (Array.isArray(n))
                                              n.forEach((t) => {
                                                  if (t instanceof Map && t.has('offset')) {
                                                      const i = t;
                                                      (e = parseFloat(i.get('offset'))), i.delete('offset');
                                                  }
                                              });
                                          else if (n instanceof Map && n.has('offset')) {
                                              const t = n;
                                              (e = parseFloat(t.get('offset'))), t.delete('offset');
                                          }
                                          return e;
                                      })(_.styles),
                            v = 0;
                        return null != b && (o++, (v = _.offset = b)), (l = l || v < 0 || v > 1), (a = a || v < c), (c = v), s.push(v), _;
                    });
                    l &&
                        t.errors.push(
                            (function RZ() {
                                return new S(3012, !1);
                            })(),
                        ),
                        a &&
                            t.errors.push(
                                (function AZ() {
                                    return new S(3200, !1);
                                })(),
                            );
                    const d = e.steps.length;
                    let h = 0;
                    o > 0 && o < d
                        ? t.errors.push(
                              (function OZ() {
                                  return new S(3202, !1);
                              })(),
                          )
                        : 0 == o && (h = 1 / (d - 1));
                    const f = d - 1,
                        m = t.currentTime,
                        p = t.currentAnimateTimings,
                        g = p.duration;
                    return (
                        u.forEach((y, _) => {
                            const b = h > 0 ? (_ == f ? 1 : h * _) : s[_],
                                v = b * g;
                            (t.currentTime = m + p.delay + v),
                                (p.duration = v),
                                this._validateStyleAst(y, t),
                                (y.offset = b),
                                i.styles.push(y);
                        }),
                        i
                    );
                }
                visitReference(e, t) {
                    return { type: ne.Reference, animation: In(this, Bc(e.animation), t), options: Ko(e.options) };
                }
                visitAnimateChild(e, t) {
                    return t.depCount++, { type: ne.AnimateChild, options: Ko(e.options) };
                }
                visitAnimateRef(e, t) {
                    return { type: ne.AnimateRef, animation: this.visitReference(e.animation, t), options: Ko(e.options) };
                }
                visitQuery(e, t) {
                    const i = t.currentQuerySelector,
                        r = e.options || {};
                    t.queryCount++, (t.currentQuery = e);
                    const [o, s] = (function _6(n) {
                        const e = !!n.split(/\s*,\s*/).find((t) => ':self' == t);
                        return (
                            e && (n = n.replace(p6, '')),
                            (n = n
                                .replace(/@\*/g, wf)
                                .replace(/@\w+/g, (t) => wf + '-' + t.slice(1))
                                .replace(/:animating/g, mv)),
                            [n, e]
                        );
                    })(e.selector);
                    (t.currentQuerySelector = i.length ? i + ' ' + o : o), Dn(t.collectedStyles, t.currentQuerySelector, new Map());
                    const a = In(this, Bc(e.animation), t);
                    return (
                        (t.currentQuery = null),
                        (t.currentQuerySelector = i),
                        {
                            type: ne.Query,
                            selector: o,
                            limit: r.limit || 0,
                            optional: !!r.optional,
                            includeSelf: s,
                            animation: a,
                            originalSelector: e.selector,
                            options: Ko(e.options),
                        }
                    );
                }
                visitStagger(e, t) {
                    t.currentQuery ||
                        t.errors.push(
                            (function NZ() {
                                return new S(3013, !1);
                            })(),
                        );
                    const i = 'full' === e.timings ? { duration: 0, delay: 0, easing: 'full' } : Cf(e.timings, t.errors, !0);
                    return { type: ne.Stagger, animation: In(this, Bc(e.animation), t), timings: i, options: null };
                }
            }
            class b6 {
                constructor(e) {
                    (this.errors = e),
                        (this.queryCount = 0),
                        (this.depCount = 0),
                        (this.currentTransition = null),
                        (this.currentQuery = null),
                        (this.currentQuerySelector = null),
                        (this.currentAnimateTimings = null),
                        (this.currentTime = 0),
                        (this.collectedStyles = new Map()),
                        (this.options = null),
                        (this.unsupportedCSSPropertiesFound = new Set());
                }
            }
            function Ko(n) {
                return (
                    n
                        ? (n = { ...n }).params &&
                          (n.params = (function y6(n) {
                              return n ? { ...n } : null;
                          })(n.params))
                        : (n = {}),
                    n
                );
            }
            function vv(n, e, t) {
                return { duration: n, delay: e, easing: t };
            }
            function Ev(n, e, t, i, r, o, s = null, a = !1) {
                return {
                    type: 1,
                    element: n,
                    keyframes: e,
                    preStyleProps: t,
                    postStyleProps: i,
                    duration: r,
                    delay: o,
                    totalTime: r + o,
                    easing: s,
                    subTimeline: a,
                };
            }
            class Sf {
                constructor() {
                    this._map = new Map();
                }
                get(e) {
                    return this._map.get(e) || [];
                }
                append(e, t) {
                    let i = this._map.get(e);
                    i || this._map.set(e, (i = [])), i.push(...t);
                }
                has(e) {
                    return this._map.has(e);
                }
                clear() {
                    this._map.clear();
                }
            }
            const D6 = new RegExp(':enter', 'g'),
                x6 = new RegExp(':leave', 'g');
            function wv(n, e, t, i, r, o = new Map(), s = new Map(), a, l, c = []) {
                return new S6().buildKeyframes(n, e, t, i, r, o, s, a, l, c);
            }
            class S6 {
                buildKeyframes(e, t, i, r, o, s, a, l, c, u = []) {
                    c = c || new Sf();
                    const d = new Cv(e, t, c, r, o, u, []);
                    d.options = l;
                    const h = l.delay ? ar(l.delay) : 0;
                    d.currentTimeline.delayNextStep(h), d.currentTimeline.setStyles([s], null, d.errors, l), In(this, i, d);
                    const f = d.timelines.filter((m) => m.containsAnimation());
                    if (f.length && a.size) {
                        let m;
                        for (let p = f.length - 1; p >= 0; p--) {
                            const g = f[p];
                            if (g.element === t) {
                                m = g;
                                break;
                            }
                        }
                        m && !m.allowOnlyTimelineStyles() && m.setStyles([a], null, d.errors, l);
                    }
                    return f.length ? f.map((m) => m.buildKeyframes()) : [Ev(t, [], [], [], 0, h, '', !1)];
                }
                visitTrigger(e, t) {}
                visitState(e, t) {}
                visitTransition(e, t) {}
                visitAnimateChild(e, t) {
                    const i = t.subInstructions.get(t.element);
                    if (i) {
                        const r = t.createSubContext(e.options),
                            o = t.currentTimeline.currentTime,
                            s = this._visitSubInstructions(i, r, r.options);
                        o != s && t.transformIntoNewTimeline(s);
                    }
                    t.previousNode = e;
                }
                visitAnimateRef(e, t) {
                    const i = t.createSubContext(e.options);
                    i.transformIntoNewTimeline(),
                        this._applyAnimationRefDelays([e.options, e.animation.options], t, i),
                        this.visitReference(e.animation, i),
                        t.transformIntoNewTimeline(i.currentTimeline.currentTime),
                        (t.previousNode = e);
                }
                _applyAnimationRefDelays(e, t, i) {
                    for (const r of e) {
                        const o = r?.delay;
                        if (o) {
                            const s = 'number' == typeof o ? o : ar(jc(o, r?.params ?? {}, t.errors));
                            i.delayNextStep(s);
                        }
                    }
                }
                _visitSubInstructions(e, t, i) {
                    let o = t.currentTimeline.currentTime;
                    const s = null != i.duration ? ar(i.duration) : null,
                        a = null != i.delay ? ar(i.delay) : null;
                    return (
                        0 !== s &&
                            e.forEach((l) => {
                                const c = t.appendInstructionToTimeline(l, s, a);
                                o = Math.max(o, c.duration + c.delay);
                            }),
                        o
                    );
                }
                visitReference(e, t) {
                    t.updateOptions(e.options, !0), In(this, e.animation, t), (t.previousNode = e);
                }
                visitSequence(e, t) {
                    const i = t.subContextCount;
                    let r = t;
                    const o = e.options;
                    if (o && (o.params || o.delay) && ((r = t.createSubContext(o)), r.transformIntoNewTimeline(), null != o.delay)) {
                        r.previousNode.type == ne.Style && (r.currentTimeline.snapshotCurrentStyles(), (r.previousNode = Tf));
                        const s = ar(o.delay);
                        r.delayNextStep(s);
                    }
                    e.steps.length &&
                        (e.steps.forEach((s) => In(this, s, r)),
                        r.currentTimeline.applyStylesToKeyframe(),
                        r.subContextCount > i && r.transformIntoNewTimeline()),
                        (t.previousNode = e);
                }
                visitGroup(e, t) {
                    const i = [];
                    let r = t.currentTimeline.currentTime;
                    const o = e.options && e.options.delay ? ar(e.options.delay) : 0;
                    e.steps.forEach((s) => {
                        const a = t.createSubContext(e.options);
                        o && a.delayNextStep(o),
                            In(this, s, a),
                            (r = Math.max(r, a.currentTimeline.currentTime)),
                            i.push(a.currentTimeline);
                    }),
                        i.forEach((s) => t.currentTimeline.mergeTimelineCollectedStyles(s)),
                        t.transformIntoNewTimeline(r),
                        (t.previousNode = e);
                }
                _visitTiming(e, t) {
                    if (e.dynamic) {
                        const i = e.strValue;
                        return Cf(t.params ? jc(i, t.params, t.errors) : i, t.errors);
                    }
                    return { duration: e.duration, delay: e.delay, easing: e.easing };
                }
                visitAnimate(e, t) {
                    const i = (t.currentAnimateTimings = this._visitTiming(e.timings, t)),
                        r = t.currentTimeline;
                    i.delay && (t.incrementTime(i.delay), r.snapshotCurrentStyles());
                    const o = e.style;
                    o.type == ne.Keyframes
                        ? this.visitKeyframes(o, t)
                        : (t.incrementTime(i.duration), this.visitStyle(o, t), r.applyStylesToKeyframe()),
                        (t.currentAnimateTimings = null),
                        (t.previousNode = e);
                }
                visitStyle(e, t) {
                    const i = t.currentTimeline,
                        r = t.currentAnimateTimings;
                    !r && i.hasCurrentStyleProperties() && i.forwardFrame();
                    const o = (r && r.easing) || e.easing;
                    e.isEmptyStep ? i.applyEmptyStep(o) : i.setStyles(e.styles, o, t.errors, t.options), (t.previousNode = e);
                }
                visitKeyframes(e, t) {
                    const i = t.currentAnimateTimings,
                        r = t.currentTimeline.duration,
                        o = i.duration,
                        a = t.createSubContext().currentTimeline;
                    (a.easing = i.easing),
                        e.styles.forEach((l) => {
                            a.forwardTime((l.offset || 0) * o),
                                a.setStyles(l.styles, l.easing, t.errors, t.options),
                                a.applyStylesToKeyframe();
                        }),
                        t.currentTimeline.mergeTimelineCollectedStyles(a),
                        t.transformIntoNewTimeline(r + o),
                        (t.previousNode = e);
                }
                visitQuery(e, t) {
                    const i = t.currentTimeline.currentTime,
                        r = e.options || {},
                        o = r.delay ? ar(r.delay) : 0;
                    o &&
                        (t.previousNode.type === ne.Style || (0 == i && t.currentTimeline.hasCurrentStyleProperties())) &&
                        (t.currentTimeline.snapshotCurrentStyles(), (t.previousNode = Tf));
                    let s = i;
                    const a = t.invokeQuery(e.selector, e.originalSelector, e.limit, e.includeSelf, !!r.optional, t.errors);
                    t.currentQueryTotal = a.length;
                    let l = null;
                    a.forEach((c, u) => {
                        t.currentQueryIndex = u;
                        const d = t.createSubContext(e.options, c);
                        o && d.delayNextStep(o),
                            c === t.element && (l = d.currentTimeline),
                            In(this, e.animation, d),
                            d.currentTimeline.applyStylesToKeyframe(),
                            (s = Math.max(s, d.currentTimeline.currentTime));
                    }),
                        (t.currentQueryIndex = 0),
                        (t.currentQueryTotal = 0),
                        t.transformIntoNewTimeline(s),
                        l && (t.currentTimeline.mergeTimelineCollectedStyles(l), t.currentTimeline.snapshotCurrentStyles()),
                        (t.previousNode = e);
                }
                visitStagger(e, t) {
                    const i = t.parentContext,
                        r = t.currentTimeline,
                        o = e.timings,
                        s = Math.abs(o.duration),
                        a = s * (t.currentQueryTotal - 1);
                    let l = s * t.currentQueryIndex;
                    switch (o.duration < 0 ? 'reverse' : o.easing) {
                        case 'reverse':
                            l = a - l;
                            break;
                        case 'full':
                            l = i.currentStaggerTime;
                    }
                    const u = t.currentTimeline;
                    l && u.delayNextStep(l);
                    const d = u.currentTime;
                    In(this, e.animation, t),
                        (t.previousNode = e),
                        (i.currentStaggerTime = r.currentTime - d + (r.startTime - i.currentTimeline.startTime));
                }
            }
            const Tf = {};
            class Cv {
                constructor(e, t, i, r, o, s, a, l) {
                    (this._driver = e),
                        (this.element = t),
                        (this.subInstructions = i),
                        (this._enterClassName = r),
                        (this._leaveClassName = o),
                        (this.errors = s),
                        (this.timelines = a),
                        (this.parentContext = null),
                        (this.currentAnimateTimings = null),
                        (this.previousNode = Tf),
                        (this.subContextCount = 0),
                        (this.options = {}),
                        (this.currentQueryIndex = 0),
                        (this.currentQueryTotal = 0),
                        (this.currentStaggerTime = 0),
                        (this.currentTimeline = l || new Mf(this._driver, t, 0)),
                        a.push(this.currentTimeline);
                }
                get params() {
                    return this.options.params;
                }
                updateOptions(e, t) {
                    if (!e) return;
                    const i = e;
                    let r = this.options;
                    null != i.duration && (r.duration = ar(i.duration)), null != i.delay && (r.delay = ar(i.delay));
                    const o = i.params;
                    if (o) {
                        let s = r.params;
                        s || (s = this.options.params = {}),
                            Object.keys(o).forEach((a) => {
                                (!t || !s.hasOwnProperty(a)) && (s[a] = jc(o[a], s, this.errors));
                            });
                    }
                }
                _copyOptions() {
                    const e = {};
                    if (this.options) {
                        const t = this.options.params;
                        if (t) {
                            const i = (e.params = {});
                            Object.keys(t).forEach((r) => {
                                i[r] = t[r];
                            });
                        }
                    }
                    return e;
                }
                createSubContext(e = null, t, i) {
                    const r = t || this.element,
                        o = new Cv(
                            this._driver,
                            r,
                            this.subInstructions,
                            this._enterClassName,
                            this._leaveClassName,
                            this.errors,
                            this.timelines,
                            this.currentTimeline.fork(r, i || 0),
                        );
                    return (
                        (o.previousNode = this.previousNode),
                        (o.currentAnimateTimings = this.currentAnimateTimings),
                        (o.options = this._copyOptions()),
                        o.updateOptions(e),
                        (o.currentQueryIndex = this.currentQueryIndex),
                        (o.currentQueryTotal = this.currentQueryTotal),
                        (o.parentContext = this),
                        this.subContextCount++,
                        o
                    );
                }
                transformIntoNewTimeline(e) {
                    return (
                        (this.previousNode = Tf),
                        (this.currentTimeline = this.currentTimeline.fork(this.element, e)),
                        this.timelines.push(this.currentTimeline),
                        this.currentTimeline
                    );
                }
                appendInstructionToTimeline(e, t, i) {
                    const r = { duration: t ?? e.duration, delay: this.currentTimeline.currentTime + (i ?? 0) + e.delay, easing: '' },
                        o = new T6(this._driver, e.element, e.keyframes, e.preStyleProps, e.postStyleProps, r, e.stretchStartingKeyframe);
                    return this.timelines.push(o), r;
                }
                incrementTime(e) {
                    this.currentTimeline.forwardTime(this.currentTimeline.duration + e);
                }
                delayNextStep(e) {
                    e > 0 && this.currentTimeline.delayNextStep(e);
                }
                invokeQuery(e, t, i, r, o, s) {
                    let a = [];
                    if ((r && a.push(this.element), e.length > 0)) {
                        e = (e = e.replace(D6, '.' + this._enterClassName)).replace(x6, '.' + this._leaveClassName);
                        let c = this._driver.query(this.element, e, 1 != i);
                        0 !== i && (c = i < 0 ? c.slice(c.length + i, c.length) : c.slice(0, i)), a.push(...c);
                    }
                    return (
                        !o &&
                            0 == a.length &&
                            s.push(
                                (function PZ(n) {
                                    return new S(3014, !1);
                                })(),
                            ),
                        a
                    );
                }
            }
            class Mf {
                constructor(e, t, i, r) {
                    (this._driver = e),
                        (this.element = t),
                        (this.startTime = i),
                        (this._elementTimelineStylesLookup = r),
                        (this.duration = 0),
                        (this.easing = null),
                        (this._previousKeyframe = new Map()),
                        (this._currentKeyframe = new Map()),
                        (this._keyframes = new Map()),
                        (this._styleSummary = new Map()),
                        (this._localTimelineStyles = new Map()),
                        (this._pendingStyles = new Map()),
                        (this._backFill = new Map()),
                        (this._currentEmptyStepKeyframe = null),
                        this._elementTimelineStylesLookup || (this._elementTimelineStylesLookup = new Map()),
                        (this._globalTimelineStyles = this._elementTimelineStylesLookup.get(t)),
                        this._globalTimelineStyles ||
                            ((this._globalTimelineStyles = this._localTimelineStyles),
                            this._elementTimelineStylesLookup.set(t, this._localTimelineStyles)),
                        this._loadKeyframe();
                }
                containsAnimation() {
                    switch (this._keyframes.size) {
                        case 0:
                            return !1;
                        case 1:
                            return this.hasCurrentStyleProperties();
                        default:
                            return !0;
                    }
                }
                hasCurrentStyleProperties() {
                    return this._currentKeyframe.size > 0;
                }
                get currentTime() {
                    return this.startTime + this.duration;
                }
                delayNextStep(e) {
                    const t = 1 === this._keyframes.size && this._pendingStyles.size;
                    this.duration || t
                        ? (this.forwardTime(this.currentTime + e), t && this.snapshotCurrentStyles())
                        : (this.startTime += e);
                }
                fork(e, t) {
                    return this.applyStylesToKeyframe(), new Mf(this._driver, e, t || this.currentTime, this._elementTimelineStylesLookup);
                }
                _loadKeyframe() {
                    this._currentKeyframe && (this._previousKeyframe = this._currentKeyframe),
                        (this._currentKeyframe = this._keyframes.get(this.duration)),
                        this._currentKeyframe ||
                            ((this._currentKeyframe = new Map()), this._keyframes.set(this.duration, this._currentKeyframe));
                }
                forwardFrame() {
                    (this.duration += 1), this._loadKeyframe();
                }
                forwardTime(e) {
                    this.applyStylesToKeyframe(), (this.duration = e), this._loadKeyframe();
                }
                _updateStyle(e, t) {
                    this._localTimelineStyles.set(e, t),
                        this._globalTimelineStyles.set(e, t),
                        this._styleSummary.set(e, { time: this.currentTime, value: t });
                }
                allowOnlyTimelineStyles() {
                    return this._currentEmptyStepKeyframe !== this._currentKeyframe;
                }
                applyEmptyStep(e) {
                    e && this._previousKeyframe.set('easing', e);
                    for (let [t, i] of this._globalTimelineStyles) this._backFill.set(t, i || sr), this._currentKeyframe.set(t, sr);
                    this._currentEmptyStepKeyframe = this._currentKeyframe;
                }
                setStyles(e, t, i, r) {
                    t && this._previousKeyframe.set('easing', t);
                    const o = (r && r.params) || {},
                        s = (function M6(n, e) {
                            const t = new Map();
                            let i;
                            return (
                                n.forEach((r) => {
                                    if ('*' === r) {
                                        i ??= e.keys();
                                        for (let o of i) t.set(o, sr);
                                    } else for (let [o, s] of r) t.set(o, s);
                                }),
                                t
                            );
                        })(e, this._globalTimelineStyles);
                    for (let [a, l] of s) {
                        const c = jc(l, o, i);
                        this._pendingStyles.set(a, c),
                            this._localTimelineStyles.has(a) || this._backFill.set(a, this._globalTimelineStyles.get(a) ?? sr),
                            this._updateStyle(a, c);
                    }
                }
                applyStylesToKeyframe() {
                    0 != this._pendingStyles.size &&
                        (this._pendingStyles.forEach((e, t) => {
                            this._currentKeyframe.set(t, e);
                        }),
                        this._pendingStyles.clear(),
                        this._localTimelineStyles.forEach((e, t) => {
                            this._currentKeyframe.has(t) || this._currentKeyframe.set(t, e);
                        }));
                }
                snapshotCurrentStyles() {
                    for (let [e, t] of this._localTimelineStyles) this._pendingStyles.set(e, t), this._updateStyle(e, t);
                }
                getFinalKeyframe() {
                    return this._keyframes.get(this.duration);
                }
                get properties() {
                    const e = [];
                    for (let t in this._currentKeyframe) e.push(t);
                    return e;
                }
                mergeTimelineCollectedStyles(e) {
                    e._styleSummary.forEach((t, i) => {
                        const r = this._styleSummary.get(i);
                        (!r || t.time > r.time) && this._updateStyle(i, t.value);
                    });
                }
                buildKeyframes() {
                    this.applyStylesToKeyframe();
                    const e = new Set(),
                        t = new Set(),
                        i = 1 === this._keyframes.size && 0 === this.duration;
                    let r = [];
                    this._keyframes.forEach((a, l) => {
                        const c = new Map([...this._backFill, ...a]);
                        c.forEach((u, d) => {
                            '!' === u ? e.add(d) : u === sr && t.add(d);
                        }),
                            i || c.set('offset', l / this.duration),
                            r.push(c);
                    });
                    const o = [...e.values()],
                        s = [...t.values()];
                    if (i) {
                        const a = r[0],
                            l = new Map(a);
                        a.set('offset', 0), l.set('offset', 1), (r = [a, l]);
                    }
                    return Ev(this.element, r, o, s, this.duration, this.startTime, this.easing, !1);
                }
            }
            class T6 extends Mf {
                constructor(e, t, i, r, o, s, a = !1) {
                    super(e, t, s.delay),
                        (this.keyframes = i),
                        (this.preStyleProps = r),
                        (this.postStyleProps = o),
                        (this._stretchStartingKeyframe = a),
                        (this.timings = { duration: s.duration, delay: s.delay, easing: s.easing });
                }
                containsAnimation() {
                    return this.keyframes.length > 1;
                }
                buildKeyframes() {
                    let e = this.keyframes,
                        { delay: t, duration: i, easing: r } = this.timings;
                    if (this._stretchStartingKeyframe && t) {
                        const o = [],
                            s = i + t,
                            a = t / s,
                            l = new Map(e[0]);
                        l.set('offset', 0), o.push(l);
                        const c = new Map(e[0]);
                        c.set('offset', VO(a)), o.push(c);
                        const u = e.length - 1;
                        for (let d = 1; d <= u; d++) {
                            let h = new Map(e[d]);
                            const f = h.get('offset');
                            h.set('offset', VO((t + f * i) / s)), o.push(h);
                        }
                        (i = s), (t = 0), (r = ''), (e = o);
                    }
                    return Ev(this.element, e, this.preStyleProps, this.postStyleProps, i, t, r, !0);
                }
            }
            function VO(n, e = 3) {
                const t = Math.pow(10, e - 1);
                return Math.round(n * t) / t;
            }
            function HO(n, e, t, i, r, o, s, a, l, c, u, d, h) {
                return {
                    type: 0,
                    element: n,
                    triggerName: e,
                    isRemovalTransition: r,
                    fromState: t,
                    fromStyles: o,
                    toState: i,
                    toStyles: s,
                    timelines: a,
                    queriedElements: l,
                    preStyleProps: c,
                    postStyleProps: u,
                    totalTime: d,
                    errors: h,
                };
            }
            const Dv = {};
            class UO {
                constructor(e, t, i) {
                    (this._triggerName = e), (this.ast = t), (this._stateStyles = i);
                }
                match(e, t, i, r) {
                    return (function R6(n, e, t, i, r) {
                        return n.some((o) => o(e, t, i, r));
                    })(this.ast.matchers, e, t, i, r);
                }
                buildStyles(e, t, i) {
                    let r = this._stateStyles.get('*');
                    return void 0 !== e && (r = this._stateStyles.get(e?.toString()) || r), r ? r.buildStyles(t, i) : new Map();
                }
                build(e, t, i, r, o, s, a, l, c, u) {
                    const d = [],
                        h = (this.ast.options && this.ast.options.params) || Dv,
                        m = this.buildStyles(i, (a && a.params) || Dv, d),
                        p = (l && l.params) || Dv,
                        g = this.buildStyles(r, p, d),
                        y = new Set(),
                        _ = new Map(),
                        b = new Map(),
                        v = 'void' === r,
                        E = { params: zO(p, h), delay: this.ast.options?.delay },
                        R = u ? [] : wv(e, t, this.ast.animation, o, s, m, g, E, c, d);
                    let N = 0;
                    return (
                        R.forEach((k) => {
                            N = Math.max(k.duration + k.delay, N);
                        }),
                        d.length
                            ? HO(t, this._triggerName, i, r, v, m, g, [], [], _, b, N, d)
                            : (R.forEach((k) => {
                                  const U = k.element,
                                      Y = Dn(_, U, new Set());
                                  k.preStyleProps.forEach((de) => Y.add(de));
                                  const be = Dn(b, U, new Set());
                                  k.postStyleProps.forEach((de) => be.add(de)), U !== t && y.add(U);
                              }),
                              HO(t, this._triggerName, i, r, v, m, g, R, [...y.values()], _, b, N))
                    );
                }
            }
            function zO(n, e) {
                const t = { ...e };
                return (
                    Object.entries(n).forEach(([i, r]) => {
                        null != r && (t[i] = r);
                    }),
                    t
                );
            }
            class A6 {
                constructor(e, t, i) {
                    (this.styles = e), (this.defaultParams = t), (this.normalizer = i);
                }
                buildStyles(e, t) {
                    const i = new Map(),
                        r = zO(e, this.defaultParams);
                    return (
                        this.styles.styles.forEach((o) => {
                            'string' != typeof o &&
                                o.forEach((s, a) => {
                                    s && (s = jc(s, r, t));
                                    const l = this.normalizer.normalizePropertyName(a, t);
                                    (s = this.normalizer.normalizeStyleValue(a, l, s, t)), i.set(a, s);
                                });
                        }),
                        i
                    );
                }
            }
            class N6 {
                constructor(e, t, i) {
                    (this.name = e),
                        (this.ast = t),
                        (this._normalizer = i),
                        (this.transitionFactories = []),
                        (this.states = new Map()),
                        t.states.forEach((r) => {
                            this.states.set(r.name, new A6(r.style, (r.options && r.options.params) || {}, i));
                        }),
                        GO(this.states, 'true', '1'),
                        GO(this.states, 'false', '0'),
                        t.transitions.forEach((r) => {
                            this.transitionFactories.push(new UO(e, r, this.states));
                        }),
                        (this.fallbackTransition = (function P6(n, e, t) {
                            return new UO(
                                n,
                                {
                                    type: ne.Transition,
                                    animation: { type: ne.Sequence, steps: [], options: null },
                                    matchers: [(s, a) => !0],
                                    options: null,
                                    queryCount: 0,
                                    depCount: 0,
                                },
                                e,
                            );
                        })(e, this.states));
                }
                get containsQueries() {
                    return this.ast.queryCount > 0;
                }
                matchTransition(e, t, i, r) {
                    return this.transitionFactories.find((s) => s.match(e, t, i, r)) || null;
                }
                matchStyles(e, t, i) {
                    return this.fallbackTransition.buildStyles(e, t, i);
                }
            }
            function GO(n, e, t) {
                n.has(e) ? n.has(t) || n.set(t, n.get(e)) : n.has(t) && n.set(e, n.get(t));
            }
            const k6 = new Sf();
            class F6 {
                constructor(e, t, i) {
                    (this.bodyNode = e),
                        (this._driver = t),
                        (this._normalizer = i),
                        (this._animations = new Map()),
                        (this._playersById = new Map()),
                        (this.players = []);
                }
                register(e, t) {
                    const i = [],
                        o = bv(this._driver, t, i, []);
                    if (i.length)
                        throw (function HZ(n) {
                            return new S(3503, !1);
                        })();
                    this._animations.set(e, o);
                }
                _buildPlayer(e, t, i) {
                    const r = e.element,
                        o = SO(this._normalizer, e.keyframes, t, i);
                    return this._driver.animate(r, o, e.duration, e.delay, e.easing, [], !0);
                }
                create(e, t, i = {}) {
                    const r = [],
                        o = this._animations.get(e);
                    let s;
                    const a = new Map();
                    if (
                        (o
                            ? ((s = wv(this._driver, t, o, fv, vf, new Map(), new Map(), i, k6, r)),
                              s.forEach((u) => {
                                  const d = Dn(a, u.element, new Map());
                                  u.postStyleProps.forEach((h) => d.set(h, null));
                              }))
                            : (r.push(
                                  (function UZ() {
                                      return new S(3300, !1);
                                  })(),
                              ),
                              (s = [])),
                        r.length)
                    )
                        throw (function zZ(n) {
                            return new S(3504, !1);
                        })();
                    a.forEach((u, d) => {
                        u.forEach((h, f) => {
                            u.set(f, this._driver.computeStyle(d, f, sr));
                        });
                    });
                    const c = Yr(
                        s.map((u) => {
                            const d = a.get(u.element);
                            return this._buildPlayer(u, new Map(), d);
                        }),
                    );
                    return this._playersById.set(e, c), c.onDestroy(() => this.destroy(e)), this.players.push(c), c;
                }
                destroy(e) {
                    const t = this._getPlayer(e);
                    t.destroy(), this._playersById.delete(e);
                    const i = this.players.indexOf(t);
                    i >= 0 && this.players.splice(i, 1);
                }
                _getPlayer(e) {
                    const t = this._playersById.get(e);
                    if (!t)
                        throw (function GZ(n) {
                            return new S(3301, !1);
                        })();
                    return t;
                }
                listen(e, t, i, r) {
                    const o = lv(t, '', '', '');
                    return sv(this._getPlayer(e), i, o, r), () => {};
                }
                command(e, t, i, r) {
                    if ('register' == i) return void this.register(e, r[0]);
                    if ('create' == i) return void this.create(e, t, r[0] || {});
                    const o = this._getPlayer(e);
                    switch (i) {
                        case 'play':
                            o.play();
                            break;
                        case 'pause':
                            o.pause();
                            break;
                        case 'reset':
                            o.reset();
                            break;
                        case 'restart':
                            o.restart();
                            break;
                        case 'finish':
                            o.finish();
                            break;
                        case 'init':
                            o.init();
                            break;
                        case 'setPosition':
                            o.setPosition(parseFloat(r[0]));
                            break;
                        case 'destroy':
                            this.destroy(e);
                    }
                }
            }
            const WO = 'ng-animate-queued',
                Iv = 'ng-animate-disabled',
                H6 = [],
                $O = { namespaceId: '', setForRemoval: !1, setForMove: !1, hasAnimation: !1, removedBeforeQueried: !1 },
                U6 = { namespaceId: '', setForMove: !1, setForRemoval: !1, hasAnimation: !1, removedBeforeQueried: !0 },
                ii = '__ng_removed';
            class xv {
                get params() {
                    return this.options.params;
                }
                constructor(e, t = '') {
                    this.namespaceId = t;
                    const i = e && e.hasOwnProperty('value');
                    if (
                        ((this.value = (function $6(n) {
                            return n ?? null;
                        })(i ? e.value : e)),
                        i)
                    ) {
                        const { value: o, ...s } = e;
                        this.options = s;
                    } else this.options = {};
                    this.options.params || (this.options.params = {});
                }
                absorbOptions(e) {
                    const t = e.params;
                    if (t) {
                        const i = this.options.params;
                        Object.keys(t).forEach((r) => {
                            null == i[r] && (i[r] = t[r]);
                        });
                    }
                }
            }
            const Vc = 'void',
                Sv = new xv(Vc);
            class z6 {
                constructor(e, t, i) {
                    (this.id = e),
                        (this.hostElement = t),
                        (this._engine = i),
                        (this.players = []),
                        (this._triggers = new Map()),
                        (this._queue = []),
                        (this._elementListeners = new Map()),
                        (this._hostClassName = 'ng-tns-' + e),
                        Ln(t, this._hostClassName);
                }
                listen(e, t, i, r) {
                    if (!this._triggers.has(t))
                        throw (function WZ(n, e) {
                            return new S(3302, !1);
                        })();
                    if (null == i || 0 == i.length)
                        throw (function $Z(n) {
                            return new S(3303, !1);
                        })();
                    if (
                        !(function Y6(n) {
                            return 'start' == n || 'done' == n;
                        })(i)
                    )
                        throw (function YZ(n, e) {
                            return new S(3400, !1);
                        })();
                    const o = Dn(this._elementListeners, e, []),
                        s = { name: t, phase: i, callback: r };
                    o.push(s);
                    const a = Dn(this._engine.statesByElement, e, new Map());
                    return (
                        a.has(t) || (Ln(e, Ef), Ln(e, Ef + '-' + t), a.set(t, Sv)),
                        () => {
                            this._engine.afterFlush(() => {
                                const l = o.indexOf(s);
                                l >= 0 && o.splice(l, 1), this._triggers.has(t) || a.delete(t);
                            });
                        }
                    );
                }
                register(e, t) {
                    return !this._triggers.has(e) && (this._triggers.set(e, t), !0);
                }
                _getTrigger(e) {
                    const t = this._triggers.get(e);
                    if (!t)
                        throw (function qZ(n) {
                            return new S(3401, !1);
                        })();
                    return t;
                }
                trigger(e, t, i, r = !0) {
                    const o = this._getTrigger(t),
                        s = new Tv(this.id, t, e);
                    let a = this._engine.statesByElement.get(e);
                    a || (Ln(e, Ef), Ln(e, Ef + '-' + t), this._engine.statesByElement.set(e, (a = new Map())));
                    let l = a.get(t);
                    const c = new xv(i, this.id);
                    if (
                        (!(i && i.hasOwnProperty('value')) && l && c.absorbOptions(l.options),
                        a.set(t, c),
                        l || (l = Sv),
                        c.value !== Vc && l.value === c.value)
                    ) {
                        if (
                            !(function K6(n, e) {
                                const t = Object.keys(n),
                                    i = Object.keys(e);
                                if (t.length != i.length) return !1;
                                for (let r = 0; r < t.length; r++) {
                                    const o = t[r];
                                    if (!e.hasOwnProperty(o) || n[o] !== e[o]) return !1;
                                }
                                return !0;
                            })(l.params, c.params)
                        ) {
                            const p = [],
                                g = o.matchStyles(l.value, l.params, p),
                                y = o.matchStyles(c.value, c.params, p);
                            p.length
                                ? this._engine.reportError(p)
                                : this._engine.afterFlush(() => {
                                      Xo(e, g), Ri(e, y);
                                  });
                        }
                        return;
                    }
                    const h = Dn(this._engine.playersByElement, e, []);
                    h.forEach((p) => {
                        p.namespaceId == this.id && p.triggerName == t && p.queued && p.destroy();
                    });
                    let f = o.matchTransition(l.value, c.value, e, c.params),
                        m = !1;
                    if (!f) {
                        if (!r) return;
                        (f = o.fallbackTransition), (m = !0);
                    }
                    return (
                        this._engine.totalQueuedPlayers++,
                        this._queue.push({
                            element: e,
                            triggerName: t,
                            transition: f,
                            fromState: l,
                            toState: c,
                            player: s,
                            isFallbackTransition: m,
                        }),
                        m ||
                            (Ln(e, WO),
                            s.onStart(() => {
                                Pa(e, WO);
                            })),
                        s.onDone(() => {
                            let p = this.players.indexOf(s);
                            p >= 0 && this.players.splice(p, 1);
                            const g = this._engine.playersByElement.get(e);
                            if (g) {
                                let y = g.indexOf(s);
                                y >= 0 && g.splice(y, 1);
                            }
                        }),
                        this.players.push(s),
                        h.push(s),
                        s
                    );
                }
                deregister(e) {
                    this._triggers.delete(e),
                        this._engine.statesByElement.forEach((t) => t.delete(e)),
                        this._elementListeners.forEach((t, i) => {
                            this._elementListeners.set(
                                i,
                                t.filter((r) => r.name != e),
                            );
                        });
                }
                clearElementCache(e) {
                    this._engine.statesByElement.delete(e), this._elementListeners.delete(e);
                    const t = this._engine.playersByElement.get(e);
                    t && (t.forEach((i) => i.destroy()), this._engine.playersByElement.delete(e));
                }
                _signalRemovalForInnerTriggers(e, t) {
                    const i = this._engine.driver.query(e, wf, !0);
                    i.forEach((r) => {
                        if (r[ii]) return;
                        const o = this._engine.fetchNamespacesByElement(r);
                        o.size ? o.forEach((s) => s.triggerLeaveAnimation(r, t, !1, !0)) : this.clearElementCache(r);
                    }),
                        this._engine.afterFlushAnimationsDone(() => i.forEach((r) => this.clearElementCache(r)));
                }
                triggerLeaveAnimation(e, t, i, r) {
                    const o = this._engine.statesByElement.get(e),
                        s = new Map();
                    if (o) {
                        const a = [];
                        if (
                            (o.forEach((l, c) => {
                                if ((s.set(c, l.value), this._triggers.has(c))) {
                                    const u = this.trigger(e, c, Vc, r);
                                    u && a.push(u);
                                }
                            }),
                            a.length)
                        )
                            return (
                                this._engine.markElementAsRemoved(this.id, e, !0, t, s),
                                i && Yr(a).onDone(() => this._engine.processLeaveNode(e)),
                                !0
                            );
                    }
                    return !1;
                }
                prepareLeaveAnimationListeners(e) {
                    const t = this._elementListeners.get(e),
                        i = this._engine.statesByElement.get(e);
                    if (t && i) {
                        const r = new Set();
                        t.forEach((o) => {
                            const s = o.name;
                            if (r.has(s)) return;
                            r.add(s);
                            const l = this._triggers.get(s).fallbackTransition,
                                c = i.get(s) || Sv,
                                u = new xv(Vc),
                                d = new Tv(this.id, s, e);
                            this._engine.totalQueuedPlayers++,
                                this._queue.push({
                                    element: e,
                                    triggerName: s,
                                    transition: l,
                                    fromState: c,
                                    toState: u,
                                    player: d,
                                    isFallbackTransition: !0,
                                });
                        });
                    }
                }
                removeNode(e, t) {
                    const i = this._engine;
                    if ((e.childElementCount && this._signalRemovalForInnerTriggers(e, t), this.triggerLeaveAnimation(e, t, !0))) return;
                    let r = !1;
                    if (i.totalAnimations) {
                        const o = i.players.length ? i.playersByQueriedElement.get(e) : [];
                        if (o && o.length) r = !0;
                        else {
                            let s = e;
                            for (; (s = s.parentNode); )
                                if (i.statesByElement.get(s)) {
                                    r = !0;
                                    break;
                                }
                        }
                    }
                    if ((this.prepareLeaveAnimationListeners(e), r)) i.markElementAsRemoved(this.id, e, !1, t);
                    else {
                        const o = e[ii];
                        (!o || o === $O) &&
                            (i.afterFlush(() => this.clearElementCache(e)), i.destroyInnerAnimations(e), i._onRemovalComplete(e, t));
                    }
                }
                insertNode(e, t) {
                    Ln(e, this._hostClassName);
                }
                drainQueuedTransitions(e) {
                    const t = [];
                    return (
                        this._queue.forEach((i) => {
                            const r = i.player;
                            if (r.destroyed) return;
                            const o = i.element,
                                s = this._elementListeners.get(o);
                            s &&
                                s.forEach((a) => {
                                    if (a.name == i.triggerName) {
                                        const l = lv(o, i.triggerName, i.fromState.value, i.toState.value);
                                        (l._data = e), sv(i.player, a.phase, l, a.callback);
                                    }
                                }),
                                r.markedForDestroy
                                    ? this._engine.afterFlush(() => {
                                          r.destroy();
                                      })
                                    : t.push(i);
                        }),
                        (this._queue = []),
                        t.sort((i, r) => {
                            const o = i.transition.ast.depCount,
                                s = r.transition.ast.depCount;
                            return 0 == o || 0 == s ? o - s : this._engine.driver.containsElement(i.element, r.element) ? 1 : -1;
                        })
                    );
                }
                destroy(e) {
                    this.players.forEach((t) => t.destroy()), this._signalRemovalForInnerTriggers(this.hostElement, e);
                }
            }
            class G6 {
                _onRemovalComplete(e, t) {
                    this.onRemovalComplete(e, t);
                }
                constructor(e, t, i, r) {
                    (this.bodyNode = e),
                        (this.driver = t),
                        (this._normalizer = i),
                        (this.scheduler = r),
                        (this.players = []),
                        (this.newHostElements = new Map()),
                        (this.playersByElement = new Map()),
                        (this.playersByQueriedElement = new Map()),
                        (this.statesByElement = new Map()),
                        (this.disabledNodes = new Set()),
                        (this.totalAnimations = 0),
                        (this.totalQueuedPlayers = 0),
                        (this._namespaceLookup = {}),
                        (this._namespaceList = []),
                        (this._flushFns = []),
                        (this._whenQuietFns = []),
                        (this.namespacesByHostElement = new Map()),
                        (this.collectedEnterElements = []),
                        (this.collectedLeaveElements = []),
                        (this.onRemovalComplete = (o, s) => {});
                }
                get queuedPlayers() {
                    const e = [];
                    return (
                        this._namespaceList.forEach((t) => {
                            t.players.forEach((i) => {
                                i.queued && e.push(i);
                            });
                        }),
                        e
                    );
                }
                createNamespace(e, t) {
                    const i = new z6(e, t, this);
                    return (
                        this.bodyNode && this.driver.containsElement(this.bodyNode, t)
                            ? this._balanceNamespaceList(i, t)
                            : (this.newHostElements.set(t, i), this.collectEnterElement(t)),
                        (this._namespaceLookup[e] = i)
                    );
                }
                _balanceNamespaceList(e, t) {
                    const i = this._namespaceList,
                        r = this.namespacesByHostElement;
                    if (i.length - 1 >= 0) {
                        let s = !1,
                            a = this.driver.getParentElement(t);
                        for (; a; ) {
                            const l = r.get(a);
                            if (l) {
                                const c = i.indexOf(l);
                                i.splice(c + 1, 0, e), (s = !0);
                                break;
                            }
                            a = this.driver.getParentElement(a);
                        }
                        s || i.unshift(e);
                    } else i.push(e);
                    return r.set(t, e), e;
                }
                register(e, t) {
                    let i = this._namespaceLookup[e];
                    return i || (i = this.createNamespace(e, t)), i;
                }
                registerTrigger(e, t, i) {
                    let r = this._namespaceLookup[e];
                    r && r.register(t, i) && this.totalAnimations++;
                }
                destroy(e, t) {
                    e &&
                        (this.afterFlush(() => {}),
                        this.afterFlushAnimationsDone(() => {
                            const i = this._fetchNamespace(e);
                            this.namespacesByHostElement.delete(i.hostElement);
                            const r = this._namespaceList.indexOf(i);
                            r >= 0 && this._namespaceList.splice(r, 1), i.destroy(t), delete this._namespaceLookup[e];
                        }));
                }
                _fetchNamespace(e) {
                    return this._namespaceLookup[e];
                }
                fetchNamespacesByElement(e) {
                    const t = new Set(),
                        i = this.statesByElement.get(e);
                    if (i)
                        for (let r of i.values())
                            if (r.namespaceId) {
                                const o = this._fetchNamespace(r.namespaceId);
                                o && t.add(o);
                            }
                    return t;
                }
                trigger(e, t, i, r) {
                    if (Rf(t)) {
                        const o = this._fetchNamespace(e);
                        if (o) return o.trigger(t, i, r), !0;
                    }
                    return !1;
                }
                insertNode(e, t, i, r) {
                    if (!Rf(t)) return;
                    const o = t[ii];
                    if (o && o.setForRemoval) {
                        (o.setForRemoval = !1), (o.setForMove = !0);
                        const s = this.collectedLeaveElements.indexOf(t);
                        s >= 0 && this.collectedLeaveElements.splice(s, 1);
                    }
                    if (e) {
                        const s = this._fetchNamespace(e);
                        s && s.insertNode(t, i);
                    }
                    r && this.collectEnterElement(t);
                }
                collectEnterElement(e) {
                    this.collectedEnterElements.push(e);
                }
                markElementAsDisabled(e, t) {
                    t
                        ? this.disabledNodes.has(e) || (this.disabledNodes.add(e), Ln(e, Iv))
                        : this.disabledNodes.has(e) && (this.disabledNodes.delete(e), Pa(e, Iv));
                }
                removeNode(e, t, i) {
                    if (Rf(t)) {
                        this.scheduler?.notify();
                        const r = e ? this._fetchNamespace(e) : null;
                        r ? r.removeNode(t, i) : this.markElementAsRemoved(e, t, !1, i);
                        const o = this.namespacesByHostElement.get(t);
                        o && o.id !== e && o.removeNode(t, i);
                    } else this._onRemovalComplete(t, i);
                }
                markElementAsRemoved(e, t, i, r, o) {
                    this.collectedLeaveElements.push(t),
                        (t[ii] = {
                            namespaceId: e,
                            setForRemoval: r,
                            hasAnimation: i,
                            removedBeforeQueried: !1,
                            previousTriggersValues: o,
                        });
                }
                listen(e, t, i, r, o) {
                    return Rf(t) ? this._fetchNamespace(e).listen(t, i, r, o) : () => {};
                }
                _buildInstruction(e, t, i, r, o) {
                    return e.transition.build(
                        this.driver,
                        e.element,
                        e.fromState.value,
                        e.toState.value,
                        i,
                        r,
                        e.fromState.options,
                        e.toState.options,
                        t,
                        o,
                    );
                }
                destroyInnerAnimations(e) {
                    let t = this.driver.query(e, wf, !0);
                    t.forEach((i) => this.destroyActiveAnimationsForElement(i)),
                        0 != this.playersByQueriedElement.size &&
                            ((t = this.driver.query(e, mv, !0)), t.forEach((i) => this.finishActiveQueriedAnimationOnElement(i)));
                }
                destroyActiveAnimationsForElement(e) {
                    const t = this.playersByElement.get(e);
                    t &&
                        t.forEach((i) => {
                            i.queued ? (i.markedForDestroy = !0) : i.destroy();
                        });
                }
                finishActiveQueriedAnimationOnElement(e) {
                    const t = this.playersByQueriedElement.get(e);
                    t && t.forEach((i) => i.finish());
                }
                whenRenderingDone() {
                    return new Promise((e) => {
                        if (this.players.length) return Yr(this.players).onDone(() => e());
                        e();
                    });
                }
                processLeaveNode(e) {
                    const t = e[ii];
                    if (t && t.setForRemoval) {
                        if (((e[ii] = $O), t.namespaceId)) {
                            this.destroyInnerAnimations(e);
                            const i = this._fetchNamespace(t.namespaceId);
                            i && i.clearElementCache(e);
                        }
                        this._onRemovalComplete(e, t.setForRemoval);
                    }
                    e.classList?.contains(Iv) && this.markElementAsDisabled(e, !1),
                        this.driver.query(e, '.ng-animate-disabled', !0).forEach((i) => {
                            this.markElementAsDisabled(i, !1);
                        });
                }
                flush(e = -1) {
                    let t = [];
                    if (
                        (this.newHostElements.size &&
                            (this.newHostElements.forEach((i, r) => this._balanceNamespaceList(i, r)), this.newHostElements.clear()),
                        this.totalAnimations && this.collectedEnterElements.length)
                    )
                        for (let i = 0; i < this.collectedEnterElements.length; i++) Ln(this.collectedEnterElements[i], 'ng-star-inserted');
                    if (this._namespaceList.length && (this.totalQueuedPlayers || this.collectedLeaveElements.length)) {
                        const i = [];
                        try {
                            t = this._flushAnimations(i, e);
                        } finally {
                            for (let r = 0; r < i.length; r++) i[r]();
                        }
                    } else
                        for (let i = 0; i < this.collectedLeaveElements.length; i++) this.processLeaveNode(this.collectedLeaveElements[i]);
                    if (
                        ((this.totalQueuedPlayers = 0),
                        (this.collectedEnterElements.length = 0),
                        (this.collectedLeaveElements.length = 0),
                        this._flushFns.forEach((i) => i()),
                        (this._flushFns = []),
                        this._whenQuietFns.length)
                    ) {
                        const i = this._whenQuietFns;
                        (this._whenQuietFns = []),
                            t.length
                                ? Yr(t).onDone(() => {
                                      i.forEach((r) => r());
                                  })
                                : i.forEach((r) => r());
                    }
                }
                reportError(e) {
                    throw (function XZ(n) {
                        return new S(3402, !1);
                    })();
                }
                _flushAnimations(e, t) {
                    const i = new Sf(),
                        r = [],
                        o = new Map(),
                        s = [],
                        a = new Map(),
                        l = new Map(),
                        c = new Map(),
                        u = new Set();
                    this.disabledNodes.forEach((I) => {
                        u.add(I);
                        const x = this.driver.query(I, '.ng-animate-queued', !0);
                        for (let M = 0; M < x.length; M++) u.add(x[M]);
                    });
                    const d = this.bodyNode,
                        h = Array.from(this.statesByElement.keys()),
                        f = XO(h, this.collectedEnterElements),
                        m = new Map();
                    let p = 0;
                    f.forEach((I, x) => {
                        const M = fv + p++;
                        m.set(x, M), I.forEach((B) => Ln(B, M));
                    });
                    const g = [],
                        y = new Set(),
                        _ = new Set();
                    for (let I = 0; I < this.collectedLeaveElements.length; I++) {
                        const x = this.collectedLeaveElements[I],
                            M = x[ii];
                        M &&
                            M.setForRemoval &&
                            (g.push(x),
                            y.add(x),
                            M.hasAnimation ? this.driver.query(x, '.ng-star-inserted', !0).forEach((B) => y.add(B)) : _.add(x));
                    }
                    const b = new Map(),
                        v = XO(h, Array.from(y));
                    v.forEach((I, x) => {
                        const M = vf + p++;
                        b.set(x, M), I.forEach((B) => Ln(B, M));
                    }),
                        e.push(() => {
                            f.forEach((I, x) => {
                                const M = m.get(x);
                                I.forEach((B) => Pa(B, M));
                            }),
                                v.forEach((I, x) => {
                                    const M = b.get(x);
                                    I.forEach((B) => Pa(B, M));
                                }),
                                g.forEach((I) => {
                                    this.processLeaveNode(I);
                                });
                        });
                    const E = [],
                        R = [];
                    for (let I = this._namespaceList.length - 1; I >= 0; I--)
                        this._namespaceList[I].drainQueuedTransitions(t).forEach((M) => {
                            const B = M.player,
                                ie = M.element;
                            if ((E.push(B), this.collectedEnterElements.length)) {
                                const Ve = ie[ii];
                                if (Ve && Ve.setForMove) {
                                    if (Ve.previousTriggersValues && Ve.previousTriggersValues.has(M.triggerName)) {
                                        const Ke = Ve.previousTriggersValues.get(M.triggerName),
                                            rt = this.statesByElement.get(M.element);
                                        if (rt && rt.has(M.triggerName)) {
                                            const ri = rt.get(M.triggerName);
                                            (ri.value = Ke), rt.set(M.triggerName, ri);
                                        }
                                    }
                                    return void B.destroy();
                                }
                            }
                            const ke = !d || !this.driver.containsElement(d, ie),
                                A = b.get(ie),
                                it = m.get(ie),
                                q = this._buildInstruction(M, i, it, A, ke);
                            if (q.errors && q.errors.length) return void R.push(q);
                            if (ke) return B.onStart(() => Xo(ie, q.fromStyles)), B.onDestroy(() => Ri(ie, q.toStyles)), void r.push(B);
                            if (M.isFallbackTransition)
                                return B.onStart(() => Xo(ie, q.fromStyles)), B.onDestroy(() => Ri(ie, q.toStyles)), void r.push(B);
                            const Ae = [];
                            q.timelines.forEach((Ve) => {
                                (Ve.stretchStartingKeyframe = !0), this.disabledNodes.has(Ve.element) || Ae.push(Ve);
                            }),
                                (q.timelines = Ae),
                                i.append(ie, q.timelines),
                                s.push({ instruction: q, player: B, element: ie }),
                                q.queriedElements.forEach((Ve) => Dn(a, Ve, []).push(B)),
                                q.preStyleProps.forEach((Ve, Ke) => {
                                    if (Ve.size) {
                                        let rt = l.get(Ke);
                                        rt || l.set(Ke, (rt = new Set())), Ve.forEach((ri, qr) => rt.add(qr));
                                    }
                                }),
                                q.postStyleProps.forEach((Ve, Ke) => {
                                    let rt = c.get(Ke);
                                    rt || c.set(Ke, (rt = new Set())), Ve.forEach((ri, qr) => rt.add(qr));
                                });
                        });
                    if (R.length) {
                        const I = [];
                        R.forEach((x) => {
                            I.push(
                                (function KZ(n, e) {
                                    return new S(3505, !1);
                                })(),
                            );
                        }),
                            E.forEach((x) => x.destroy()),
                            this.reportError(I);
                    }
                    const N = new Map(),
                        k = new Map();
                    s.forEach((I) => {
                        const x = I.element;
                        i.has(x) && (k.set(x, x), this._beforeAnimationBuild(I.player.namespaceId, I.instruction, N));
                    }),
                        r.forEach((I) => {
                            const x = I.element;
                            this._getPreviousPlayers(x, !1, I.namespaceId, I.triggerName, null).forEach((B) => {
                                Dn(N, x, []).push(B), B.destroy();
                            });
                        });
                    const U = g.filter((I) => ZO(I, l, c)),
                        Y = new Map();
                    qO(Y, this.driver, _, c, sr).forEach((I) => {
                        ZO(I, l, c) && U.push(I);
                    });
                    const de = new Map();
                    f.forEach((I, x) => {
                        qO(de, this.driver, new Set(I), l, '!');
                    }),
                        U.forEach((I) => {
                            const x = Y.get(I),
                                M = de.get(I);
                            Y.set(I, new Map([...(x?.entries() ?? []), ...(M?.entries() ?? [])]));
                        });
                    const le = [],
                        nt = [],
                        ue = {};
                    s.forEach((I) => {
                        const { element: x, player: M, instruction: B } = I;
                        if (i.has(x)) {
                            if (u.has(x))
                                return (
                                    M.onDestroy(() => Ri(x, B.toStyles)),
                                    (M.disabled = !0),
                                    M.overrideTotalTime(B.totalTime),
                                    void r.push(M)
                                );
                            let ie = ue;
                            if (k.size > 1) {
                                let A = x;
                                const it = [];
                                for (; (A = A.parentNode); ) {
                                    const q = k.get(A);
                                    if (q) {
                                        ie = q;
                                        break;
                                    }
                                    it.push(A);
                                }
                                it.forEach((q) => k.set(q, ie));
                            }
                            const ke = this._buildAnimation(M.namespaceId, B, N, o, de, Y);
                            if ((M.setRealPlayer(ke), ie === ue)) le.push(M);
                            else {
                                const A = this.playersByElement.get(ie);
                                A && A.length && (M.parentPlayer = Yr(A)), r.push(M);
                            }
                        } else Xo(x, B.fromStyles), M.onDestroy(() => Ri(x, B.toStyles)), nt.push(M), u.has(x) && r.push(M);
                    }),
                        nt.forEach((I) => {
                            const x = o.get(I.element);
                            if (x && x.length) {
                                const M = Yr(x);
                                I.setRealPlayer(M);
                            }
                        }),
                        r.forEach((I) => {
                            I.parentPlayer ? I.syncPlayerEvents(I.parentPlayer) : I.destroy();
                        });
                    for (let I = 0; I < g.length; I++) {
                        const x = g[I],
                            M = x[ii];
                        if ((Pa(x, vf), M && M.hasAnimation)) continue;
                        let B = [];
                        if (a.size) {
                            let ke = a.get(x);
                            ke && ke.length && B.push(...ke);
                            let A = this.driver.query(x, mv, !0);
                            for (let it = 0; it < A.length; it++) {
                                let q = a.get(A[it]);
                                q && q.length && B.push(...q);
                            }
                        }
                        const ie = B.filter((ke) => !ke.destroyed);
                        ie.length ? q6(this, x, ie) : this.processLeaveNode(x);
                    }
                    return (
                        (g.length = 0),
                        le.forEach((I) => {
                            this.players.push(I),
                                I.onDone(() => {
                                    I.destroy();
                                    const x = this.players.indexOf(I);
                                    this.players.splice(x, 1);
                                }),
                                I.play();
                        }),
                        le
                    );
                }
                afterFlush(e) {
                    this._flushFns.push(e);
                }
                afterFlushAnimationsDone(e) {
                    this._whenQuietFns.push(e);
                }
                _getPreviousPlayers(e, t, i, r, o) {
                    let s = [];
                    if (t) {
                        const a = this.playersByQueriedElement.get(e);
                        a && (s = a);
                    } else {
                        const a = this.playersByElement.get(e);
                        if (a) {
                            const l = !o || o == Vc;
                            a.forEach((c) => {
                                c.queued || (!l && c.triggerName != r) || s.push(c);
                            });
                        }
                    }
                    return (i || r) && (s = s.filter((a) => !((i && i != a.namespaceId) || (r && r != a.triggerName)))), s;
                }
                _beforeAnimationBuild(e, t, i) {
                    const o = t.element,
                        s = t.isRemovalTransition ? void 0 : e,
                        a = t.isRemovalTransition ? void 0 : t.triggerName;
                    for (const l of t.timelines) {
                        const c = l.element,
                            u = c !== o,
                            d = Dn(i, c, []);
                        this._getPreviousPlayers(c, u, s, a, t.toState).forEach((f) => {
                            const m = f.getRealPlayer();
                            m.beforeDestroy && m.beforeDestroy(), f.destroy(), d.push(f);
                        });
                    }
                    Xo(o, t.fromStyles);
                }
                _buildAnimation(e, t, i, r, o, s) {
                    const a = t.triggerName,
                        l = t.element,
                        c = [],
                        u = new Set(),
                        d = new Set(),
                        h = t.timelines.map((m) => {
                            const p = m.element;
                            u.add(p);
                            const g = p[ii];
                            if (g && g.removedBeforeQueried) return new Lc(m.duration, m.delay);
                            const y = p !== l,
                                _ = (function X6(n) {
                                    const e = [];
                                    return KO(n, e), e;
                                })((i.get(p) || H6).map((N) => N.getRealPlayer())).filter((N) => !!N.element && N.element === p),
                                b = o.get(p),
                                v = s.get(p),
                                E = SO(this._normalizer, m.keyframes, b, v),
                                R = this._buildPlayer(m, E, _);
                            if ((m.subTimeline && r && d.add(p), y)) {
                                const N = new Tv(e, a, p);
                                N.setRealPlayer(R), c.push(N);
                            }
                            return R;
                        });
                    c.forEach((m) => {
                        Dn(this.playersByQueriedElement, m.element, []).push(m),
                            m.onDone(() =>
                                (function W6(n, e, t) {
                                    let i = n.get(e);
                                    if (i) {
                                        if (i.length) {
                                            const r = i.indexOf(t);
                                            i.splice(r, 1);
                                        }
                                        0 == i.length && n.delete(e);
                                    }
                                    return i;
                                })(this.playersByQueriedElement, m.element, m),
                            );
                    }),
                        u.forEach((m) => Ln(m, NO));
                    const f = Yr(h);
                    return (
                        f.onDestroy(() => {
                            u.forEach((m) => Pa(m, NO)), Ri(l, t.toStyles);
                        }),
                        d.forEach((m) => {
                            Dn(r, m, []).push(f);
                        }),
                        f
                    );
                }
                _buildPlayer(e, t, i) {
                    return t.length > 0 ? this.driver.animate(e.element, t, e.duration, e.delay, e.easing, i) : new Lc(e.duration, e.delay);
                }
            }
            class Tv {
                constructor(e, t, i) {
                    (this.namespaceId = e),
                        (this.triggerName = t),
                        (this.element = i),
                        (this._player = new Lc()),
                        (this._containsRealPlayer = !1),
                        (this._queuedCallbacks = new Map()),
                        (this.destroyed = !1),
                        (this.parentPlayer = null),
                        (this.markedForDestroy = !1),
                        (this.disabled = !1),
                        (this.queued = !0),
                        (this.totalTime = 0);
                }
                setRealPlayer(e) {
                    this._containsRealPlayer ||
                        ((this._player = e),
                        this._queuedCallbacks.forEach((t, i) => {
                            t.forEach((r) => sv(e, i, void 0, r));
                        }),
                        this._queuedCallbacks.clear(),
                        (this._containsRealPlayer = !0),
                        this.overrideTotalTime(e.totalTime),
                        (this.queued = !1));
                }
                getRealPlayer() {
                    return this._player;
                }
                overrideTotalTime(e) {
                    this.totalTime = e;
                }
                syncPlayerEvents(e) {
                    const t = this._player;
                    t.triggerCallback && e.onStart(() => t.triggerCallback('start')),
                        e.onDone(() => this.finish()),
                        e.onDestroy(() => this.destroy());
                }
                _queueEvent(e, t) {
                    Dn(this._queuedCallbacks, e, []).push(t);
                }
                onDone(e) {
                    this.queued && this._queueEvent('done', e), this._player.onDone(e);
                }
                onStart(e) {
                    this.queued && this._queueEvent('start', e), this._player.onStart(e);
                }
                onDestroy(e) {
                    this.queued && this._queueEvent('destroy', e), this._player.onDestroy(e);
                }
                init() {
                    this._player.init();
                }
                hasStarted() {
                    return !this.queued && this._player.hasStarted();
                }
                play() {
                    !this.queued && this._player.play();
                }
                pause() {
                    !this.queued && this._player.pause();
                }
                restart() {
                    !this.queued && this._player.restart();
                }
                finish() {
                    this._player.finish();
                }
                destroy() {
                    (this.destroyed = !0), this._player.destroy();
                }
                reset() {
                    !this.queued && this._player.reset();
                }
                setPosition(e) {
                    this.queued || this._player.setPosition(e);
                }
                getPosition() {
                    return this.queued ? 0 : this._player.getPosition();
                }
                triggerCallback(e) {
                    const t = this._player;
                    t.triggerCallback && t.triggerCallback(e);
                }
            }
            function Rf(n) {
                return n && 1 === n.nodeType;
            }
            function YO(n, e) {
                const t = n.style.display;
                return (n.style.display = e ?? 'none'), t;
            }
            function qO(n, e, t, i, r) {
                const o = [];
                t.forEach((l) => o.push(YO(l)));
                const s = [];
                i.forEach((l, c) => {
                    const u = new Map();
                    l.forEach((d) => {
                        const h = e.computeStyle(c, d, r);
                        u.set(d, h), (!h || 0 == h.length) && ((c[ii] = U6), s.push(c));
                    }),
                        n.set(c, u);
                });
                let a = 0;
                return t.forEach((l) => YO(l, o[a++])), s;
            }
            function XO(n, e) {
                const t = new Map();
                if ((n.forEach((a) => t.set(a, [])), 0 == e.length)) return t;
                const r = new Set(e),
                    o = new Map();
                function s(a) {
                    if (!a) return 1;
                    let l = o.get(a);
                    if (l) return l;
                    const c = a.parentNode;
                    return (l = t.has(c) ? c : r.has(c) ? 1 : s(c)), o.set(a, l), l;
                }
                return (
                    e.forEach((a) => {
                        const l = s(a);
                        1 !== l && t.get(l).push(a);
                    }),
                    t
                );
            }
            function Ln(n, e) {
                n.classList?.add(e);
            }
            function Pa(n, e) {
                n.classList?.remove(e);
            }
            function q6(n, e, t) {
                Yr(t).onDone(() => n.processLeaveNode(e));
            }
            function KO(n, e) {
                for (let t = 0; t < n.length; t++) {
                    const i = n[t];
                    i instanceof DO ? KO(i.players, e) : e.push(i);
                }
            }
            function ZO(n, e, t) {
                const i = t.get(n);
                if (!i) return !1;
                let r = e.get(n);
                return r ? i.forEach((o) => r.add(o)) : e.set(n, i), t.delete(n), !0;
            }
            class Hc {
                constructor(e, t, i, r) {
                    (this._driver = t),
                        (this._normalizer = i),
                        (this._triggerCache = {}),
                        (this.onRemovalComplete = (o, s) => {}),
                        (this._transitionEngine = new G6(e.body, t, i, r)),
                        (this._timelineEngine = new F6(e.body, t, i)),
                        (this._transitionEngine.onRemovalComplete = (o, s) => this.onRemovalComplete(o, s));
                }
                registerTrigger(e, t, i, r, o) {
                    const s = e + '-' + r;
                    let a = this._triggerCache[s];
                    if (!a) {
                        const l = [],
                            u = bv(this._driver, o, l, []);
                        if (l.length)
                            throw (function jZ(n, e) {
                                return new S(3404, !1);
                            })();
                        (a = (function O6(n, e, t) {
                            return new N6(n, e, t);
                        })(r, u, this._normalizer)),
                            (this._triggerCache[s] = a);
                    }
                    this._transitionEngine.registerTrigger(t, r, a);
                }
                register(e, t) {
                    this._transitionEngine.register(e, t);
                }
                destroy(e, t) {
                    this._transitionEngine.destroy(e, t);
                }
                onInsert(e, t, i, r) {
                    this._transitionEngine.insertNode(e, t, i, r);
                }
                onRemove(e, t, i) {
                    this._transitionEngine.removeNode(e, t, i);
                }
                disableAnimations(e, t) {
                    this._transitionEngine.markElementAsDisabled(e, t);
                }
                process(e, t, i, r) {
                    if ('@' == i.charAt(0)) {
                        const [o, s] = TO(i);
                        this._timelineEngine.command(o, t, s, r);
                    } else this._transitionEngine.trigger(e, t, i, r);
                }
                listen(e, t, i, r, o) {
                    if ('@' == i.charAt(0)) {
                        const [s, a] = TO(i);
                        return this._timelineEngine.listen(s, t, a, o);
                    }
                    return this._transitionEngine.listen(e, t, i, r, o);
                }
                flush(e = -1) {
                    this._transitionEngine.flush(e);
                }
                get players() {
                    return [...this._transitionEngine.players, ...this._timelineEngine.players];
                }
                whenRenderingDone() {
                    return this._transitionEngine.whenRenderingDone();
                }
                afterFlushAnimationsDone(e) {
                    this._transitionEngine.afterFlushAnimationsDone(e);
                }
            }
            class Uc {
                static #e = (this.initialStylesByElement = new WeakMap());
                constructor(e, t, i) {
                    (this._element = e), (this._startStyles = t), (this._endStyles = i), (this._state = 0);
                    let r = Uc.initialStylesByElement.get(e);
                    r || Uc.initialStylesByElement.set(e, (r = new Map())), (this._initialStyles = r);
                }
                start() {
                    this._state < 1 && (this._startStyles && Ri(this._element, this._startStyles, this._initialStyles), (this._state = 1));
                }
                finish() {
                    this.start(),
                        this._state < 2 &&
                            (Ri(this._element, this._initialStyles),
                            this._endStyles && (Ri(this._element, this._endStyles), (this._endStyles = null)),
                            (this._state = 1));
                }
                destroy() {
                    this.finish(),
                        this._state < 3 &&
                            (Uc.initialStylesByElement.delete(this._element),
                            this._startStyles && (Xo(this._element, this._startStyles), (this._endStyles = null)),
                            this._endStyles && (Xo(this._element, this._endStyles), (this._endStyles = null)),
                            Ri(this._element, this._initialStyles),
                            (this._state = 3));
                }
            }
            function Mv(n) {
                let e = null;
                return (
                    n.forEach((t, i) => {
                        (function Q6(n) {
                            return 'display' === n || 'position' === n;
                        })(i) && ((e = e || new Map()), e.set(i, t));
                    }),
                    e
                );
            }
            class QO {
                constructor(e, t, i, r) {
                    (this.element = e),
                        (this.keyframes = t),
                        (this.options = i),
                        (this._specialStyles = r),
                        (this._onDoneFns = []),
                        (this._onStartFns = []),
                        (this._onDestroyFns = []),
                        (this._initialized = !1),
                        (this._finished = !1),
                        (this._started = !1),
                        (this._destroyed = !1),
                        (this._originalOnDoneFns = []),
                        (this._originalOnStartFns = []),
                        (this.time = 0),
                        (this.parentPlayer = null),
                        (this.currentSnapshot = new Map()),
                        (this._duration = i.duration),
                        (this._delay = i.delay || 0),
                        (this.time = this._duration + this._delay);
                }
                _onFinish() {
                    this._finished || ((this._finished = !0), this._onDoneFns.forEach((e) => e()), (this._onDoneFns = []));
                }
                init() {
                    this._buildPlayer(), this._preparePlayerBeforeStart();
                }
                _buildPlayer() {
                    if (this._initialized) return;
                    this._initialized = !0;
                    const e = this.keyframes;
                    (this.domPlayer = this._triggerWebAnimation(this.element, e, this.options)),
                        (this._finalKeyframe = e.length ? e[e.length - 1] : new Map());
                    const t = () => this._onFinish();
                    this.domPlayer.addEventListener('finish', t),
                        this.onDestroy(() => {
                            this.domPlayer.removeEventListener('finish', t);
                        });
                }
                _preparePlayerBeforeStart() {
                    this._delay ? this._resetDomPlayerState() : this.domPlayer.pause();
                }
                _convertKeyframesToObject(e) {
                    const t = [];
                    return (
                        e.forEach((i) => {
                            t.push(Object.fromEntries(i));
                        }),
                        t
                    );
                }
                _triggerWebAnimation(e, t, i) {
                    return e.animate(this._convertKeyframesToObject(t), i);
                }
                onStart(e) {
                    this._originalOnStartFns.push(e), this._onStartFns.push(e);
                }
                onDone(e) {
                    this._originalOnDoneFns.push(e), this._onDoneFns.push(e);
                }
                onDestroy(e) {
                    this._onDestroyFns.push(e);
                }
                play() {
                    this._buildPlayer(),
                        this.hasStarted() ||
                            (this._onStartFns.forEach((e) => e()),
                            (this._onStartFns = []),
                            (this._started = !0),
                            this._specialStyles && this._specialStyles.start()),
                        this.domPlayer.play();
                }
                pause() {
                    this.init(), this.domPlayer.pause();
                }
                finish() {
                    this.init(), this._specialStyles && this._specialStyles.finish(), this._onFinish(), this.domPlayer.finish();
                }
                reset() {
                    this._resetDomPlayerState(),
                        (this._destroyed = !1),
                        (this._finished = !1),
                        (this._started = !1),
                        (this._onStartFns = this._originalOnStartFns),
                        (this._onDoneFns = this._originalOnDoneFns);
                }
                _resetDomPlayerState() {
                    this.domPlayer && this.domPlayer.cancel();
                }
                restart() {
                    this.reset(), this.play();
                }
                hasStarted() {
                    return this._started;
                }
                destroy() {
                    this._destroyed ||
                        ((this._destroyed = !0),
                        this._resetDomPlayerState(),
                        this._onFinish(),
                        this._specialStyles && this._specialStyles.destroy(),
                        this._onDestroyFns.forEach((e) => e()),
                        (this._onDestroyFns = []));
                }
                setPosition(e) {
                    void 0 === this.domPlayer && this.init(), (this.domPlayer.currentTime = e * this.time);
                }
                getPosition() {
                    return +(this.domPlayer.currentTime ?? 0) / this.time;
                }
                get totalTime() {
                    return this._delay + this._duration;
                }
                beforeDestroy() {
                    const e = new Map();
                    this.hasStarted() &&
                        this._finalKeyframe.forEach((i, r) => {
                            'offset' !== r && e.set(r, this._finished ? i : yv(this.element, r));
                        }),
                        (this.currentSnapshot = e);
                }
                triggerCallback(e) {
                    const t = 'start' === e ? this._onStartFns : this._onDoneFns;
                    t.forEach((i) => i()), (t.length = 0);
                }
            }
            class JO {
                validateStyleProperty(e) {
                    return !0;
                }
                validateAnimatableStyleProperty(e) {
                    return !0;
                }
                matchesElement(e, t) {
                    return !1;
                }
                containsElement(e, t) {
                    return RO(e, t);
                }
                getParentElement(e) {
                    return cv(e);
                }
                query(e, t, i) {
                    return AO(e, t, i);
                }
                computeStyle(e, t, i) {
                    return yv(e, t);
                }
                animate(e, t, i, r, o, s = []) {
                    const l = { duration: i, delay: r, fill: 0 == r ? 'both' : 'forwards' };
                    o && (l.easing = o);
                    const c = new Map(),
                        u = s.filter((f) => f instanceof QO);
                    (function c6(n, e) {
                        return 0 === n || 0 === e;
                    })(i, r) &&
                        u.forEach((f) => {
                            f.currentSnapshot.forEach((m, p) => c.set(p, m));
                        });
                    let d = (function s6(n) {
                        return n.length ? (n[0] instanceof Map ? n : n.map((e) => new Map(Object.entries(e)))) : [];
                    })(t).map((f) => new Map(f));
                    d = (function u6(n, e, t) {
                        if (t.size && e.length) {
                            let i = e[0],
                                r = [];
                            if (
                                (t.forEach((o, s) => {
                                    i.has(s) || r.push(s), i.set(s, o);
                                }),
                                r.length)
                            )
                                for (let o = 1; o < e.length; o++) {
                                    let s = e[o];
                                    r.forEach((a) => s.set(a, yv(n, a)));
                                }
                        }
                        return e;
                    })(e, d, c);
                    const h = (function Z6(n, e) {
                        let t = null,
                            i = null;
                        return (
                            Array.isArray(e) && e.length
                                ? ((t = Mv(e[0])), e.length > 1 && (i = Mv(e[e.length - 1])))
                                : e instanceof Map && (t = Mv(e)),
                            t || i ? new Uc(n, t, i) : null
                        );
                    })(e, d);
                    return new QO(e, d, l, h);
                }
            }
            const eN = '@.disabled';
            class tN {
                constructor(e, t, i, r) {
                    (this.namespaceId = e), (this.delegate = t), (this.engine = i), (this._onDestroy = r), (this.ɵtype = 0);
                }
                get data() {
                    return this.delegate.data;
                }
                destroyNode(e) {
                    this.delegate.destroyNode?.(e);
                }
                destroy() {
                    this.engine.destroy(this.namespaceId, this.delegate),
                        this.engine.afterFlushAnimationsDone(() => {
                            queueMicrotask(() => {
                                this.delegate.destroy();
                            });
                        }),
                        this._onDestroy?.();
                }
                createElement(e, t) {
                    return this.delegate.createElement(e, t);
                }
                createComment(e) {
                    return this.delegate.createComment(e);
                }
                createText(e) {
                    return this.delegate.createText(e);
                }
                appendChild(e, t) {
                    this.delegate.appendChild(e, t), this.engine.onInsert(this.namespaceId, t, e, !1);
                }
                insertBefore(e, t, i, r = !0) {
                    this.delegate.insertBefore(e, t, i), this.engine.onInsert(this.namespaceId, t, e, r);
                }
                removeChild(e, t, i) {
                    this.engine.onRemove(this.namespaceId, t, this.delegate);
                }
                selectRootElement(e, t) {
                    return this.delegate.selectRootElement(e, t);
                }
                parentNode(e) {
                    return this.delegate.parentNode(e);
                }
                nextSibling(e) {
                    return this.delegate.nextSibling(e);
                }
                setAttribute(e, t, i, r) {
                    this.delegate.setAttribute(e, t, i, r);
                }
                removeAttribute(e, t, i) {
                    this.delegate.removeAttribute(e, t, i);
                }
                addClass(e, t) {
                    this.delegate.addClass(e, t);
                }
                removeClass(e, t) {
                    this.delegate.removeClass(e, t);
                }
                setStyle(e, t, i, r) {
                    this.delegate.setStyle(e, t, i, r);
                }
                removeStyle(e, t, i) {
                    this.delegate.removeStyle(e, t, i);
                }
                setProperty(e, t, i) {
                    '@' == t.charAt(0) && t == eN ? this.disableAnimations(e, !!i) : this.delegate.setProperty(e, t, i);
                }
                setValue(e, t) {
                    this.delegate.setValue(e, t);
                }
                listen(e, t, i) {
                    return this.delegate.listen(e, t, i);
                }
                disableAnimations(e, t) {
                    this.engine.disableAnimations(e, t);
                }
            }
            class J6 extends tN {
                constructor(e, t, i, r, o) {
                    super(t, i, r, o), (this.factory = e), (this.namespaceId = t);
                }
                setProperty(e, t, i) {
                    '@' == t.charAt(0)
                        ? '.' == t.charAt(1) && t == eN
                            ? this.disableAnimations(e, (i = void 0 === i || !!i))
                            : this.engine.process(this.namespaceId, e, t.slice(1), i)
                        : this.delegate.setProperty(e, t, i);
                }
                listen(e, t, i) {
                    if ('@' == t.charAt(0)) {
                        const r = (function e9(n) {
                            switch (n) {
                                case 'body':
                                    return document.body;
                                case 'document':
                                    return document;
                                case 'window':
                                    return window;
                                default:
                                    return n;
                            }
                        })(e);
                        let o = t.slice(1),
                            s = '';
                        return (
                            '@' != o.charAt(0) &&
                                ([o, s] = (function t9(n) {
                                    const e = n.indexOf('.');
                                    return [n.substring(0, e), n.slice(e + 1)];
                                })(o)),
                            this.engine.listen(this.namespaceId, r, o, s, (a) => {
                                this.factory.scheduleListenerCallback(a._data || -1, i, a);
                            })
                        );
                    }
                    return this.delegate.listen(e, t, i);
                }
            }
            class n9 {
                constructor(e, t, i) {
                    (this.delegate = e),
                        (this.engine = t),
                        (this._zone = i),
                        (this._currentId = 0),
                        (this._microtaskId = 1),
                        (this._animationCallbacksBuffer = []),
                        (this._rendererCache = new Map()),
                        (this._cdRecurDepth = 0),
                        (t.onRemovalComplete = (r, o) => {
                            const s = o?.parentNode(r);
                            s && o.removeChild(s, r);
                        });
                }
                createRenderer(e, t) {
                    const r = this.delegate.createRenderer(e, t);
                    if (!e || !t?.data?.animation) {
                        const c = this._rendererCache;
                        let u = c.get(r);
                        return u || ((u = new tN('', r, this.engine, () => c.delete(r))), c.set(r, u)), u;
                    }
                    const o = t.id,
                        s = t.id + '-' + this._currentId;
                    this._currentId++, this.engine.register(s, e);
                    const a = (c) => {
                        Array.isArray(c) ? c.forEach(a) : this.engine.registerTrigger(o, s, e, c.name, c);
                    };
                    return t.data.animation.forEach(a), new J6(this, s, r, this.engine);
                }
                begin() {
                    this._cdRecurDepth++, this.delegate.begin && this.delegate.begin();
                }
                _scheduleCountTask() {
                    queueMicrotask(() => {
                        this._microtaskId++;
                    });
                }
                scheduleListenerCallback(e, t, i) {
                    if (e >= 0 && e < this._microtaskId) return void this._zone.run(() => t(i));
                    const r = this._animationCallbacksBuffer;
                    0 == r.length &&
                        queueMicrotask(() => {
                            this._zone.run(() => {
                                r.forEach((o) => {
                                    const [s, a] = o;
                                    s(a);
                                }),
                                    (this._animationCallbacksBuffer = []);
                            });
                        }),
                        r.push([t, i]);
                }
                end() {
                    this._cdRecurDepth--,
                        0 == this._cdRecurDepth &&
                            this._zone.runOutsideAngular(() => {
                                this._scheduleCountTask(), this.engine.flush(this._microtaskId);
                            }),
                        this.delegate.end && this.delegate.end();
                }
                whenRenderingDone() {
                    return this.engine.whenRenderingDone();
                }
            }
            const s9 = [
                { provide: dv, useFactory: () => new JO() },
                { provide: yr, useValue: 'BrowserAnimations' },
                ...[
                    {
                        provide: hv,
                        useFactory: function r9() {
                            return new FO();
                        },
                    },
                    {
                        provide: Hc,
                        useClass: (() => {
                            class n extends Hc {
                                constructor(t, i, r) {
                                    super(t, i, r, $(Qp, { optional: !0 }));
                                }
                                ngOnDestroy() {
                                    this.flush();
                                }
                                static #e = (this.ɵfac = function (i) {
                                    return new (i || n)(T(De), T(dv), T(hv));
                                });
                                static #t = (this.ɵprov = j({ token: n, factory: n.ɵfac }));
                            }
                            return n;
                        })(),
                    },
                    {
                        provide: Jp,
                        useFactory: function o9(n, e, t) {
                            return new n9(n, e, t);
                        },
                        deps: [U_, Hc, ce],
                    },
                ],
            ];
            (function f3(n, e) {
                return PU({ rootComponent: n, ...nT(e) });
            })(_Z, {
                providers: [
                    (function l9() {
                        return wr('NgEagerAnimations'), [...s9];
                    })(),
                ],
            }).catch((n) => console.error(n));
        },
        688: function (Va) {
            Va.exports = (function () {
                'use strict';
                function Ha(w, D, F, z, V) {
                    !(function H(W, he, ve, _e, Le) {
                        for (; _e > ve; ) {
                            if (_e - ve > 600) {
                                var Ee = _e - ve + 1,
                                    ot = he - ve + 1,
                                    es = Math.log(Ee),
                                    dr = 0.5 * Math.exp((2 * es) / 3),
                                    Jr = 0.5 * Math.sqrt((es * dr * (Ee - dr)) / Ee) * (ot - Ee / 2 < 0 ? -1 : 1);
                                H(
                                    W,
                                    he,
                                    Math.max(ve, Math.floor(he - (ot * dr) / Ee + Jr)),
                                    Math.min(_e, Math.floor(he + ((Ee - ot) * dr) / Ee + Jr)),
                                    Le,
                                );
                            }
                            var ts = W[he],
                                fr = ve,
                                Jt = _e;
                            for (si(W, ve, he), Le(W[_e], ts) > 0 && si(W, ve, _e); fr < Jt; ) {
                                for (si(W, fr, Jt), fr++, Jt--; Le(W[fr], ts) < 0; ) fr++;
                                for (; Le(W[Jt], ts) > 0; ) Jt--;
                            }
                            0 === Le(W[ve], ts) ? si(W, ve, Jt) : si(W, ++Jt, _e), Jt <= he && (ve = Jt + 1), he <= Jt && (_e = Jt - 1);
                        }
                    })(w, D, F || 0, z || w.length - 1, V || Qo);
                }
                function si(w, D, F) {
                    var z = w[D];
                    (w[D] = w[F]), (w[F] = z);
                }
                function Qo(w, D) {
                    return w < D ? -1 : w > D ? 1 : 0;
                }
                var He = function (w) {
                    void 0 === w && (w = 9),
                        (this._maxEntries = Math.max(4, w)),
                        (this._minEntries = Math.max(2, Math.ceil(0.4 * this._maxEntries))),
                        this.clear();
                };
                function jf(w, D, F) {
                    if (!F) return D.indexOf(w);
                    for (var z = 0; z < D.length; z++) if (F(w, D[z])) return z;
                    return -1;
                }
                function Ue(w, D) {
                    Hn(w, 0, w.children.length, D, w);
                }
                function Hn(w, D, F, z, V) {
                    V || (V = li(null)), (V.minX = 1 / 0), (V.minY = 1 / 0), (V.maxX = -1 / 0), (V.maxY = -1 / 0);
                    for (var H = D; H < F; H++) {
                        var W = w.children[H];
                        ai(V, w.leaf ? z(W) : W);
                    }
                    return V;
                }
                function ai(w, D) {
                    return (
                        (w.minX = Math.min(w.minX, D.minX)),
                        (w.minY = Math.min(w.minY, D.minY)),
                        (w.maxX = Math.max(w.maxX, D.maxX)),
                        (w.maxY = Math.max(w.maxY, D.maxY)),
                        w
                    );
                }
                function Tn(w, D) {
                    return w.minX - D.minX;
                }
                function Ze(w, D) {
                    return w.minY - D.minY;
                }
                function Yc(w) {
                    return (w.maxX - w.minX) * (w.maxY - w.minY);
                }
                function Jo(w) {
                    return w.maxX - w.minX + (w.maxY - w.minY);
                }
                function qc(w, D) {
                    return w.minX <= D.minX && w.minY <= D.minY && D.maxX <= w.maxX && D.maxY <= w.maxY;
                }
                function Qr(w, D) {
                    return D.minX <= w.maxX && D.minY <= w.maxY && D.maxX >= w.minX && D.maxY >= w.minY;
                }
                function li(w) {
                    return { children: w, height: 1, leaf: !0, minX: 1 / 0, minY: 1 / 0, maxX: -1 / 0, maxY: -1 / 0 };
                }
                function Xc(w, D, F, z, V) {
                    for (var H = [D, F]; H.length; )
                        if (!((F = H.pop()) - (D = H.pop()) <= z)) {
                            var W = D + Math.ceil((F - D) / z / 2) * z;
                            Ha(w, W, D, F, V), H.push(D, W, W, F);
                        }
                }
                return (
                    (He.prototype.all = function () {
                        return this._all(this.data, []);
                    }),
                    (He.prototype.search = function (w) {
                        var D = this.data,
                            F = [];
                        if (!Qr(w, D)) return F;
                        for (var z = this.toBBox, V = []; D; ) {
                            for (var H = 0; H < D.children.length; H++) {
                                var W = D.children[H],
                                    he = D.leaf ? z(W) : W;
                                Qr(w, he) && (D.leaf ? F.push(W) : qc(w, he) ? this._all(W, F) : V.push(W));
                            }
                            D = V.pop();
                        }
                        return F;
                    }),
                    (He.prototype.collides = function (w) {
                        var D = this.data;
                        if (!Qr(w, D)) return !1;
                        for (var F = []; D; ) {
                            for (var z = 0; z < D.children.length; z++) {
                                var V = D.children[z],
                                    H = D.leaf ? this.toBBox(V) : V;
                                if (Qr(w, H)) {
                                    if (D.leaf || qc(w, H)) return !0;
                                    F.push(V);
                                }
                            }
                            D = F.pop();
                        }
                        return !1;
                    }),
                    (He.prototype.load = function (w) {
                        if (!w || !w.length) return this;
                        if (w.length < this._minEntries) {
                            for (var D = 0; D < w.length; D++) this.insert(w[D]);
                            return this;
                        }
                        var F = this._build(w.slice(), 0, w.length - 1, 0);
                        if (this.data.children.length)
                            if (this.data.height === F.height) this._splitRoot(this.data, F);
                            else {
                                if (this.data.height < F.height) {
                                    var z = this.data;
                                    (this.data = F), (F = z);
                                }
                                this._insert(F, this.data.height - F.height - 1, !0);
                            }
                        else this.data = F;
                        return this;
                    }),
                    (He.prototype.insert = function (w) {
                        return w && this._insert(w, this.data.height - 1), this;
                    }),
                    (He.prototype.clear = function () {
                        return (this.data = li([])), this;
                    }),
                    (He.prototype.remove = function (w, D) {
                        if (!w) return this;
                        for (var F, z, V, H = this.data, W = this.toBBox(w), he = [], ve = []; H || he.length; ) {
                            if ((H || ((H = he.pop()), (z = he[he.length - 1]), (F = ve.pop()), (V = !0)), H.leaf)) {
                                var _e = jf(w, H.children, D);
                                if (-1 !== _e) return H.children.splice(_e, 1), he.push(H), this._condense(he), this;
                            }
                            V || H.leaf || !qc(H, W)
                                ? z
                                    ? (F++, (H = z.children[F]), (V = !1))
                                    : (H = null)
                                : (he.push(H), ve.push(F), (F = 0), (z = H), (H = H.children[0]));
                        }
                        return this;
                    }),
                    (He.prototype.toBBox = function (w) {
                        return w;
                    }),
                    (He.prototype.compareMinX = function (w, D) {
                        return w.minX - D.minX;
                    }),
                    (He.prototype.compareMinY = function (w, D) {
                        return w.minY - D.minY;
                    }),
                    (He.prototype.toJSON = function () {
                        return this.data;
                    }),
                    (He.prototype.fromJSON = function (w) {
                        return (this.data = w), this;
                    }),
                    (He.prototype._all = function (w, D) {
                        for (var F = []; w; ) w.leaf ? D.push.apply(D, w.children) : F.push.apply(F, w.children), (w = F.pop());
                        return D;
                    }),
                    (He.prototype._build = function (w, D, F, z) {
                        var V,
                            H = F - D + 1,
                            W = this._maxEntries;
                        if (H <= W) return Ue((V = li(w.slice(D, F + 1))), this.toBBox), V;
                        z || ((z = Math.ceil(Math.log(H) / Math.log(W))), (W = Math.ceil(H / Math.pow(W, z - 1)))),
                            ((V = li([])).leaf = !1),
                            (V.height = z);
                        var he = Math.ceil(H / W),
                            ve = he * Math.ceil(Math.sqrt(W));
                        Xc(w, D, F, ve, this.compareMinX);
                        for (var _e = D; _e <= F; _e += ve) {
                            var Le = Math.min(_e + ve - 1, F);
                            Xc(w, _e, Le, he, this.compareMinY);
                            for (var Ee = _e; Ee <= Le; Ee += he) {
                                var ot = Math.min(Ee + he - 1, Le);
                                V.children.push(this._build(w, Ee, ot, z - 1));
                            }
                        }
                        return Ue(V, this.toBBox), V;
                    }),
                    (He.prototype._chooseSubtree = function (w, D, F, z) {
                        for (; z.push(D), !D.leaf && z.length - 1 !== F; ) {
                            for (var V = 1 / 0, H = 1 / 0, W = void 0, he = 0; he < D.children.length; he++) {
                                var ve = D.children[he],
                                    _e = Yc(ve),
                                    Le =
                                        ((Ee = w),
                                        (ot = ve),
                                        (Math.max(ot.maxX, Ee.maxX) - Math.min(ot.minX, Ee.minX)) *
                                            (Math.max(ot.maxY, Ee.maxY) - Math.min(ot.minY, Ee.minY)) -
                                            _e);
                                Le < H ? ((H = Le), (V = _e < V ? _e : V), (W = ve)) : Le === H && _e < V && ((V = _e), (W = ve));
                            }
                            D = W || D.children[0];
                        }
                        var Ee, ot;
                        return D;
                    }),
                    (He.prototype._insert = function (w, D, F) {
                        var z = F ? w : this.toBBox(w),
                            V = [],
                            H = this._chooseSubtree(z, this.data, D, V);
                        for (H.children.push(w), ai(H, z); D >= 0 && V[D].children.length > this._maxEntries; ) this._split(V, D), D--;
                        this._adjustParentBBoxes(z, V, D);
                    }),
                    (He.prototype._split = function (w, D) {
                        var F = w[D],
                            z = F.children.length,
                            V = this._minEntries;
                        this._chooseSplitAxis(F, V, z);
                        var H = this._chooseSplitIndex(F, V, z),
                            W = li(F.children.splice(H, F.children.length - H));
                        (W.height = F.height),
                            (W.leaf = F.leaf),
                            Ue(F, this.toBBox),
                            Ue(W, this.toBBox),
                            D ? w[D - 1].children.push(W) : this._splitRoot(F, W);
                    }),
                    (He.prototype._splitRoot = function (w, D) {
                        (this.data = li([w, D])), (this.data.height = w.height + 1), (this.data.leaf = !1), Ue(this.data, this.toBBox);
                    }),
                    (He.prototype._chooseSplitIndex = function (w, D, F) {
                        for (var z, V, H, W, he, ve, _e, Le = 1 / 0, Ee = 1 / 0, ot = D; ot <= F - D; ot++) {
                            var es = Hn(w, 0, ot, this.toBBox),
                                dr = Hn(w, ot, F, this.toBBox),
                                Jr =
                                    ((V = es),
                                    (H = dr),
                                    void 0,
                                    void 0,
                                    void 0,
                                    void 0,
                                    (W = Math.max(V.minX, H.minX)),
                                    (he = Math.max(V.minY, H.minY)),
                                    (ve = Math.min(V.maxX, H.maxX)),
                                    (_e = Math.min(V.maxY, H.maxY)),
                                    Math.max(0, ve - W) * Math.max(0, _e - he)),
                                hr = Yc(es) + Yc(dr);
                            Jr < Le ? ((Le = Jr), (z = ot), (Ee = hr < Ee ? hr : Ee)) : Jr === Le && hr < Ee && ((Ee = hr), (z = ot));
                        }
                        return z || F - D;
                    }),
                    (He.prototype._chooseSplitAxis = function (w, D, F) {
                        var z = w.leaf ? this.compareMinX : Tn,
                            V = w.leaf ? this.compareMinY : Ze;
                        this._allDistMargin(w, D, F, z) < this._allDistMargin(w, D, F, V) && w.children.sort(z);
                    }),
                    (He.prototype._allDistMargin = function (w, D, F, z) {
                        w.children.sort(z);
                        for (
                            var V = this.toBBox, H = Hn(w, 0, D, V), W = Hn(w, F - D, F, V), he = Jo(H) + Jo(W), ve = D;
                            ve < F - D;
                            ve++
                        ) {
                            var _e = w.children[ve];
                            ai(H, w.leaf ? V(_e) : _e), (he += Jo(H));
                        }
                        for (var Le = F - D - 1; Le >= D; Le--) {
                            var Ee = w.children[Le];
                            ai(W, w.leaf ? V(Ee) : Ee), (he += Jo(W));
                        }
                        return he;
                    }),
                    (He.prototype._adjustParentBBoxes = function (w, D, F) {
                        for (var z = F; z >= 0; z--) ai(D[z], w);
                    }),
                    (He.prototype._condense = function (w) {
                        for (var D = w.length - 1, F = void 0; D >= 0; D--)
                            0 === w[D].children.length
                                ? D > 0
                                    ? (F = w[D - 1].children).splice(F.indexOf(w[D]), 1)
                                    : this.clear()
                                : Ue(w[D], this.toBBox);
                    }),
                    He
                );
            })();
        },
    },
    (Va) => {
        Va((Va.s = 8));
    },
]);
